#!/usr/bin/env node

/**
 * Script de demonstra√ß√£o do LookAtni v4.0
 * Mostra como funciona o sistema de marcadores invis√≠veis
 */

import * as fs from 'fs';

// Marcadores invis√≠veis usando File Separator (FS - ASCII 28)
const FS_CHAR = String.fromCharCode(28); // Caractere invis√≠vel
const MARKER_START = `//${FS_CHAR}/`;     // //‚êú/
const MARKER_END = `/${FS_CHAR}//`;       // /‚êú//

// Cores
const colors = {
    RED: '\x1b[0;31m',
    GREEN: '\x1b[0;32m',
    YELLOW: '\x1b[1;33m',
    BLUE: '\x1b[0;34m',
    PURPLE: '\x1b[0;35m',
    CYAN: '\x1b[0;36m',
    NC: '\x1b[0m' // No Color
};

class LookAtniDemo {
    private demoFile = 'demo-code.txt';

    run(): void {
        console.log(`${colors.CYAN}üöÄ LookAtni File Markers Demo v4.0${colors.NC}`);
        console.log("======================================================");
        console.log("");

        this.createDemoFile();
        this.showMarkers();
        this.showUsageExamples();
        this.printConclusion();
    }

    private createDemoFile(): void {
        console.log(`${colors.YELLOW}üìÑ Criando arquivo de demonstra√ß√£o...${colors.NC}`);

        // Criar marcadores com caracteres invis√≠veis
        const helloMarker = `${MARKER_START} hello.js ${MARKER_END}`;
        const styleMarker = `${MARKER_START} style.css ${MARKER_END}`;
        const htmlMarker = `${MARKER_START} index.html ${MARKER_END}`;
        const readmeMarker = `${MARKER_START} README.md ${MARKER_END}`;

        const demoContent = `# LookAtni Demo Code

${helloMarker}
console.log('Hello, LookAtni!');
console.log('Sistema de marcadores invis√≠veis funcionando!');

const message = 'Bem-vindo ao futuro do compartilhamento de c√≥digo!';
console.log(message);

// Fun√ß√£o para demonstrar funcionalidade
function showDemo() {
    console.log('üéâ LookAtni est√° funcionando perfeitamente!');
    console.log('üìÅ Agora voc√™ pode compartilhar projetos inteiros em um s√≥ arquivo!');
}

showDemo();

${styleMarker}
/* LookAtni Demo Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    margin: 0;
    padding: 20px;
    min-height: 100vh;
    color: white;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    padding: 40px;
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
}

.header {
    text-align: center;
    margin-bottom: 30px;
}

.header h1 {
    font-size: 3em;
    margin: 0;
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.features {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 30px;
}

.feature-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 15px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

${htmlMarker}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LookAtni Revolution Demo</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>üöÄ LookAtni Revolution</h1>
            <p>Sistema revolucion√°rio de marcadores invis√≠veis que permite 
            compartilhar projetos inteiros em um √∫nico arquivo!</p>
        </header>
        
        <main>
            <div class="features">
                <div class="feature-card">
                    <h3>üéØ Marcadores √önicos</h3>
                    <p>Marcadores invis√≠veis que nunca conflitam com seu c√≥digo</p>
                </div>
                
                <div class="feature-card">
                    <h3>üìÅ M√∫ltiplos Arquivos</h3>
                    <p>Organize projetos inteiros em um s√≥ documento</p>
                </div>
                
                <div class="feature-card">
                    <h3>üöÄ Extra√ß√£o Autom√°tica</h3>
                    <p>Reconstrua o projeto com um simples comando</p>
                </div>
                
                <div class="feature-card">
                    <h3>üîÑ Cross-Platform</h3>
                    <p>Funciona em Windows, Linux e macOS</p>
                </div>
            </div>
        </main>
    </div>
    
    <script src="hello.js"></script>
</body>
</html>

${readmeMarker}
# üöÄ LookAtni Revolution Demo

Este √© um projeto de demonstra√ß√£o do **LookAtni Revolution**, o sistema mais avan√ßado para compartilhamento e reconstru√ß√£o de projetos.

## ‚ú® Caracter√≠sticas

- üéØ **Marcadores invis√≠veis** que nunca conflitam
- üìÅ **M√∫ltiplos arquivos** em um s√≥ documento
- üöÄ **Extra√ß√£o autom√°tica** com um comando
- üîÑ **Cross-platform** (Windows, Linux, macOS)
- üíº **Zero depend√™ncias** para o arquivo final
- üé® **Compat√≠vel** com qualquer linguagem de programa√ß√£o

## üìã Como Usar

### 1. Instalar ferramentas
\`\`\`bash
npm install -g lookatni-revolution
\`\`\`

### 2. Extrair projeto
\`\`\`bash
tsx extractFiles.ts demo-code.txt ./meu-projeto
\`\`\`

### 3. Executar projeto
\`\`\`bash
cd meu-projeto
# Abrir index.html no navegador
\`\`\`

## üîç Comandos √öteis

### Validar marcadores invis√≠veis
\`\`\`bash
tsx extractFiles.ts demo-code.txt --format
\`\`\`

### Simular extra√ß√£o
\`\`\`bash
tsx extractFiles.ts demo-code.txt ./demo --dry-run --stats
\`\`\`

### Extrair com estat√≠sticas
\`\`\`bash
tsx extractFiles.ts demo-code.txt ./demo --stats --verbose
\`\`\`

## üéâ Resultado

Depois de extrair, voc√™ ter√°:
- \`index.html\` - P√°gina principal
- \`style.css\` - Estilos modernos
- \`hello.js\` - L√≥gica JavaScript
- \`README.md\` - Esta documenta√ß√£o

**Pronto para usar!** üöÄ
`;

        // Escrever arquivo
        fs.writeFileSync(this.demoFile, demoContent);
        console.log(`${colors.GREEN}‚úÖ Demo criada: ${this.demoFile}${colors.NC}`);
    }

    private showMarkers(): void {
        console.log("");
        console.log(`${colors.BLUE}üîç Analisando marcadores invis√≠veis...${colors.NC}`);
        
        if (!fs.existsSync(this.demoFile)) {
            console.log(`${colors.RED}‚ùå Arquivo ${this.demoFile} n√£o encontrado!${colors.NC}`);
            return;
        }

        const content = fs.readFileSync(this.demoFile, 'utf-8');
        const markers = content.split('\n').filter(line => line.startsWith(MARKER_START));
        
        console.log(`${colors.GREEN}üìä Encontrados ${markers.length} marcadores invis√≠veis:${colors.NC}`);
        markers.forEach((marker, index) => {
            // Extrair nome do arquivo
            const match = marker.match(new RegExp(`^//${FS_CHAR}/ (.+) /${FS_CHAR}//$`));
            if (match) {
                console.log(`  ${(index + 1).toString().padStart(2)}. ${colors.CYAN}${match[1]}${colors.NC}`);
            }
        });
    }

    private showUsageExamples(): void {
        console.log("");
        console.log(`${colors.PURPLE}üöÄ Exemplos de uso:${colors.NC}`);
        console.log("");
        console.log(`${colors.YELLOW}1. Extrair projeto completo:${colors.NC}`);
        console.log(`  tsx extractFiles.ts ${this.demoFile} ./demo-extracted`);
        console.log("");
        console.log(`${colors.YELLOW}2. Validar marcadores invis√≠veis:${colors.NC}`);
        console.log(`  tsx extractFiles.ts ${this.demoFile} --format`);
        console.log("");
        console.log(`${colors.YELLOW}3. Simular extra√ß√£o:${colors.NC}`);
        console.log(`  tsx extractFiles.ts ${this.demoFile} ./demo --dry-run --stats`);
        console.log("");
        console.log(`${colors.YELLOW}4. Modo interativo:${colors.NC}`);
        console.log(`  tsx extractFiles.ts ${this.demoFile} ./demo --interactive`);
    }

    private printConclusion(): void {
        console.log("");
        console.log(`${colors.GREEN}üéâ Demo conclu√≠da com sucesso!${colors.NC}`);
        console.log("");
        console.log(`${colors.CYAN}üí° Pr√≥ximos passos:${colors.NC}`);
        console.log(`  1. Extrair o projeto: ${colors.YELLOW}tsx extractFiles.ts ${this.demoFile} ./demo-extracted${colors.NC}`);
        console.log(`  2. Abrir o HTML: ${colors.YELLOW}cd demo-extracted && open index.html${colors.NC}`);
        console.log(`  3. Estudar o c√≥digo gerado e personalizar!`);
        console.log("");
        console.log(`${colors.PURPLE}üîó Arquivo gerado: ${this.demoFile}${colors.NC}`);
        console.log(`${colors.PURPLE}üìÅ Cont√©m: HTML, CSS, JavaScript e documenta√ß√£o${colors.NC}`);
        console.log(`${colors.PURPLE}‚ú® Marcadores: Invis√≠veis e seguros para marketplace!${colors.NC}`);
        console.log("");
        console.log(`${colors.CYAN}Experimente agora mesmo! üöÄ${colors.NC}`);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    const demo = new LookAtniDemo();
    demo.run();
}

export { LookAtniDemo };
