import * as vscode from 'vscode';

/**
 * Recording Guide for LookAtni Demo
 * Provides step-by-step instructions for creating the perfect demo video
 */
export class DemoRecordingGuide {
    
    static async showRecordingGuide(): Promise<void> {
        const guide = `# ðŸŽ¬ LookAtni Demo Recording Guide

## ðŸš€ Quick Setup (30 seconds)

### 1. VS Code Setup
- Install **Chronicler** extension for recording
- Set recording quality to HD
- Ensure clean workspace (no distractions)

### 2. Automated Demo
\`\`\`
Ctrl+Shift+P â†’ "LookAtni: Automated Demo"
\`\`\`

### 3. Recording Steps
1. **Start Chronicler recording**
2. **Run automated demo command**
3. **Let it flow automatically** (2-3 minutes)
4. **Stop recording**

## ðŸŽ¯ What the Demo Shows

### Golden Feature Sequence:
1. ðŸ¤– **AI-Generated Content**
   - Complete React project in single document
   - Invisible Unicode markers (completely hidden)
   - Perfect simulation of ChatGPT/Claude output

2. âš¡ **One-Click Extraction**
   - Right-click â†’ Extract Files
   - Perfect file structure created instantly
   - Ready-to-run project

3. ðŸŽŠ **Amazing Results**
   - Real working files
   - Complete project structure
   - Package.json, components, styles
   - npm start ready!

## ðŸ“‹ Manual Fallback (if needed)

If automation doesn't work perfectly:

1. **Clean workspace**:
   - Remove all demo folders
   - Close all editors
   
2. **Manual steps**:
   - Run \`LookAtni: Quick Demo\`
   - Show file with invisible markers
   - Right-click â†’ Extract Files
   - Select destination folder
   - Show extracted structure

## ðŸŽ¥ Recording Tips

### Optimal Settings:
- **Resolution**: 1920x1080 or 1280x720
- **Frame Rate**: 30fps
- **Duration**: 2-3 minutes max
- **File Size**: Keep under 10MB for GitHub

### VS Code Appearance:
- Dark theme (better contrast)
- Hide unnecessary panels
- Font size: 14-16px for readability
- Zoom: 100-110%

### Narrative Flow:
1. "Here's LookAtni's golden feature..."
2. "AI generates complete project..."
3. "Invisible markers guide extraction..."
4. "One click creates perfect structure!"

## ðŸ”„ Post-Recording

### GIF Optimization:
\`\`\`bash
# FFmpeg command for optimal GIF
ffmpeg -i demo.mp4 \\
  -filter_complex "[0:v] fps=10,scale=640:-1,split[a][b];[a]palettegen[p];[b][p]paletteuse" \\
  -loop 0 assets/demo.gif
\`\`\`

### README Integration:
\`\`\`markdown
![LookAtni Demo](assets/demo.gif)
> ðŸŽ¯ See the Golden Feature in action: AI code to project structure in seconds!
\`\`\`

## ðŸš€ Ready to Record!

**The automated demo handles everything** - just start recording and run the command!

Perfect for showcasing:
- âœ… The unique AI code extraction feature
- âœ… Smooth, professional workflow
- âœ… Real working results
- âœ… Zero manual errors

---
*Generated by LookAtni File Markers v1.0.4*`;

        // Create and show the guide document
        const doc = await vscode.workspace.openTextDocument({
            content: guide,
            language: 'markdown'
        });
        
        await vscode.window.showTextDocument(doc, {
            preview: true,
            viewColumn: vscode.ViewColumn.Beside
        });

        // Show quick action buttons
        const action = await vscode.window.showInformationMessage(
            'ðŸŽ¬ Recording Guide opened! Ready to create the perfect demo?',
            'Start Automated Demo',
            'Open Chronicler Extension',
            'Close Guide'
        );

        switch (action) {
            case 'Start Automated Demo':
                await vscode.commands.executeCommand('lookatni.automatedDemo');
                break;
            case 'Open Chronicler Extension':
                await vscode.commands.executeCommand('workbench.extensions.search', 'chronicler');
                break;
        }
    }
}
