<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Interview Prep</title>
    <style>
      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 2rem; line-height: 1.6; }
      pre, code { background: #f6f8fa; padding: .2rem .4rem; border-radius: 4px; }
      a { color: #0b69c7; text-decoration: none; }
      a:hover { text-decoration: underline; }
      h1, h2, h3 { line-height: 1.25; }
      .container { max-width: 900px; margin: 0 auto; }
      kx-prompt-block { display: block; border: 1px solid #e5e7eb; border-radius: 8px; padding: 12px; margin: 16px 0; }
      .kx-field { margin: 8px 0; }
      .kx-controls { display: flex; gap: 8px; margin-top: 8px; }
      .kx-controls button { background: #0b69c7; color: white; border: none; border-radius: 6px; padding: 6px 10px; cursor: pointer; }
      .kx-controls button.secondary { background: #6b7280; }
      .kx-controls button:hover { opacity: .95; }
    </style>
  </head>
  <body>
    <div class="container">
      {{ . }}
    </div>
    <script>
      (function(){
        function parseJSONAttr(el, name){
          try { return JSON.parse(el.getAttribute(name) || '{}'); } catch(e){ return {}; }
        }
        function simpleRender(tpl, ctx){
          return tpl.replace(/\{\{\s*([\w.-]+)\s*\}\}/g, function(_, k){
            return (ctx && (k in ctx)) ? String(ctx[k]) : '';
          });
        }
        function ensureUI(block){
          // Transform <kx-field> to actual inputs
          const defaults = parseJSONAttr(block, 'data-defaults');
          const templateStr = block.getAttribute('data-template') || '';
          const fieldNodes = Array.from(block.querySelectorAll('kx-field'));
          const fields = [];
          fieldNodes.forEach(fn => {
            const name = fn.getAttribute('name') || '';
            const type = fn.getAttribute('type') || 'text';
            let values = [];
            try { values = JSON.parse(fn.getAttribute('values') || '[]'); } catch(e) {}
            const wrap = document.createElement('div');
            wrap.className = 'kx-field';
            const label = document.createElement('label');
            label.textContent = name;
            label.style.display = 'block';
            wrap.appendChild(label);
            let input;
            if(type === 'select'){
              input = document.createElement('select');
              values.forEach(v => {
                const opt = document.createElement('option');
                opt.value = v; opt.textContent = v; input.appendChild(opt);
              });
            } else {
              input = document.createElement('input');
              input.type = type;
              if(values && values.length) input.value = values[0];
            }
            input.name = name;
            wrap.appendChild(input);
            fn.replaceWith(wrap);
            fields.push({name, input});
          });
          // Controls
          const controls = document.createElement('div');
          controls.className = 'kx-controls';
          const runBtn = block.querySelector('button.run') || document.createElement('button');
          runBtn.textContent = 'Run with MCP';
          const copyBtn = document.createElement('button'); copyBtn.textContent = 'Copy as Markdown'; copyBtn.className='secondary';
          controls.appendChild(runBtn); controls.appendChild(copyBtn);
          block.appendChild(controls);
          const preview = block.querySelector('pre.preview') || (function(){ const p=document.createElement('pre'); p.className='preview'; block.appendChild(p); return p; })();

          function currentContext(){
            const ctx = Object.assign({}, defaults);
            fields.forEach(f => { ctx[f.name] = f.input.value; });
            return ctx;
          }
          function update(){
            preview.textContent = simpleRender(templateStr, currentContext());
          }
          fields.forEach(f => f.input.addEventListener('input', update));
          runBtn.addEventListener('click', update);
          copyBtn.addEventListener('click', function(){
            try { navigator.clipboard.writeText(preview.textContent); } catch(e) {}
          });
          update();
        }
        document.addEventListener('DOMContentLoaded', function(){
          document.querySelectorAll('kx-prompt-block').forEach(ensureUI);
        });
      })();
    </script>
  </body>
</html>
