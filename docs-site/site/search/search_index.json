{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 LookAtni File Markers","text":"<p>Transform single documents into full project structures, and back \u2014 with invisible, portable markers. DX-first, no lock-in.</p> <p>One Command = One Result</p> <p>Build, test and use across Core (TS), CLI (Go) and VS Code Extension with a predictable workflow.</p>"},{"location":"#why-lookatni","title":"Why LookAtni","text":"<ul> <li>AI code extraction that actually works across tools.</li> <li>Share runnable project slices without archives.</li> <li>Perfect for tutorials, reviews and CI pipelines.</li> </ul>"},{"location":"#what-you-get","title":"What You Get","text":"<ul> <li>Marker Spec v1 (portable, ASCII 28).</li> <li>Core library (TypeScript) with Extractor/Generator/Validator.</li> <li>CLI (Go) cross-platform.</li> <li>VS Code extension integrated with the Core.</li> <li>Tools for pipes and HTTP.</li> </ul> <p>Get started in minutes:</p> <pre><code># Generate markers from a folder (temporary naming)\nlookatni generate ./my-project project.lkt.txt\n\n# Extract back into a directory\nlookatni extract project.lkt.txt ./restored\n</code></pre>"},{"location":"community/contributing/","title":"Contributing","text":"<p>We welcome issues, discussions and PRs. Start small, ship fast.</p>"},{"location":"community/contributing/#setup","title":"Setup","text":"<pre><code>./scripts/validate-all.sh\n</code></pre>"},{"location":"community/contributing/#good-first-tasks","title":"Good First Tasks","text":"<ul> <li>Add fixtures for tricky cases</li> <li>Improve docs and examples</li> <li>Enhance CLI UX (errors, help)</li> </ul>"},{"location":"community/contributing/#standards","title":"Standards","text":"<ul> <li>Follow Marker Spec v1</li> <li>DX &gt; Security &gt; Reliability &gt; Cost &gt; Convenience</li> <li>One command = one result</li> </ul>"},{"location":"community/roadmap/","title":"Roadmap (Short)","text":"<ul> <li>v1.1: Binary transport profile (base64)</li> <li>v1.x: More validators, richer metadata</li> <li>Extension: per-file stats and previews</li> <li>CLI: streaming extraction and progress bars</li> </ul> <p>Contribute via issues/PRs \u2014 help shape the spec and UX.</p>"},{"location":"community/style-guide/","title":"Style Guide","text":"<p>Keep contributions consistent, readable, and fast to review.</p>"},{"location":"community/style-guide/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use Conventional Commits when possible: <code>feat:</code>, <code>fix:</code>, <code>docs:</code>, <code>refactor:</code>, <code>test:</code></li> <li>Be concise and imperative (e.g., <code>fix: handle empty filename in validator</code>)</li> </ul>"},{"location":"community/style-guide/#branches","title":"Branches","text":"<ul> <li><code>feature/&lt;short-topic&gt;</code> for new work, <code>fix/&lt;short-topic&gt;</code> for bugfixes.</li> <li>Keep PRs focused and small.</li> </ul>"},{"location":"community/style-guide/#typescript-coreextension","title":"TypeScript (Core/Extension)","text":"<ul> <li>Strict mode, 2 spaces, no <code>any</code> unless justified.</li> <li>Prefer small functions, early returns. Interfaces for contracts.</li> <li>Public APIs documented via JSDoc. Follow existing types in <code>core/src/lib/types.ts</code>.</li> </ul>"},{"location":"community/style-guide/#go-cli","title":"Go (CLI)","text":"<ul> <li>Idiomatic structure: <code>cmd/</code>, <code>internal/</code>, clear package names.</li> <li>Table-driven tests. Small functions, explicit error handling.</li> <li><code>context.Context</code> for cancellation in new code.</li> </ul>"},{"location":"community/style-guide/#docs","title":"Docs","text":"<ul> <li>Short pages, practical examples, copy-paste commands.</li> <li>Reflect real, working functionality only.</li> <li>Link to <code>spec/marker-v1.md</code> and fixtures when relevant.</li> </ul>"},{"location":"community/style-guide/#pr-expectations","title":"PR Expectations","text":"<ul> <li>Add/update tests/fixtures as needed.</li> <li>Update docs when changing behavior.</li> <li>Run <code>bash scripts/validate-all.sh</code> locally and ensure green.</li> </ul>"},{"location":"examples/fixtures/","title":"Example: Fixtures","text":"<p>Use canonical fixtures to test your integrations.</p> <pre><code>node scripts/test-parity.js\n</code></pre> <p>Explore <code>spec/fixtures</code> for valid/invalid/edge cases.</p>"},{"location":"examples/react/","title":"Example: React Sharing","text":"<p>Package a React app without <code>node_modules</code>.</p> <pre><code>lookatni generate ./my-react-app react.lkt\nlookatni extract react.lkt ./restored\ncd restored &amp;&amp; npm install &amp;&amp; npm start\n</code></pre> <p>Tip: exclude <code>build/</code> if present for smaller bundles.</p>"},{"location":"features/cli/","title":"CLI","text":"<p>Cross-platform Go CLI for generation, extraction and validation.</p> <p>Legend for invisible markers</p> <p>We display the File Separator (ASCII 28) as \u241c for readability. Real artifacts contain the actual control character.</p>"},{"location":"features/cli/#commands","title":"Commands","text":"<pre><code>lookatni generate &lt;source&gt; &lt;output&gt;\nlookatni extract &lt;input&gt; &lt;output-dir&gt;\nlookatni validate &lt;input&gt; [--strict]\n</code></pre>"},{"location":"features/cli/#examples","title":"Examples","text":"<pre><code>cli/bin/lookatni generate ./my-project project.lkt.txt\ncli/bin/lookatni extract project.lkt.txt ./restored\ncli/bin/lookatni validate project.lkt.txt --strict\n</code></pre> <p>Outputs are deterministic, ready for automation in CI.</p>"},{"location":"features/cli/#header-metadata","title":"Header Metadata","text":"<p><code>generate</code> escreve um bloco <code>PROJECT_INFO</code> no in\u00edcio do artefato com:</p> <ul> <li>Project, Generated (ISO-8601), Total Files, Source, Generator</li> <li>MarkerSpec (ex.: v1), FS (ex.: 28), MarkerTokens, Encoding</li> </ul> <p>O validador e o extrator autodetectam o separador e respeitam o header.</p>"},{"location":"features/cli/#naming-convention-temporary","title":"Naming Convention (temporary)","text":"<ul> <li>Recomendado: <code>.lkt.txt</code> (ex.: <code>project.lkt.txt</code>) at\u00e9 publica\u00e7\u00f5es e tooling estabilizados.</li> <li>Ajuda a manter compatibilidade com viewers/editores que esperam <code>.txt</code>.</li> </ul>"},{"location":"features/cli/#strict-mode","title":"Strict Mode","text":"<p><code>--strict</code> sinaliza linhas \u201cquase-marcadores\u201d que n\u00e3o respeitam a regex can\u00f4nica e considera \u201czero marcadores\u201d como inv\u00e1lido. \u00datil para depurar formata\u00e7\u00e3o involunt\u00e1ria.</p>"},{"location":"features/extension/","title":"VS Code Extension","text":"<p>UI-focused workflows built on the Core library.</p>"},{"location":"features/extension/#highlights","title":"Highlights","text":"<ul> <li>Extract, Generate, Validate \u2014 using the Core for parity</li> <li>Status bar + Explorer view + visual markers</li> <li>Works in untrusted workspaces (limited operations)</li> </ul>"},{"location":"features/extension/#commands","title":"Commands","text":"<ul> <li>LookAtni: Extract Files</li> <li>LookAtni: Generate Markers</li> <li>LookAtni: Validate Markers</li> <li>LookAtni: Quick Demo</li> </ul> <p>Tip: Build the Core first (<code>cd core &amp;&amp; npm run build</code>) so the extension can import it.</p>"},{"location":"features/markers/","title":"Markers","text":"<p>Legend for invisible markers</p> <p>In documentation, the invisible File Separator (ASCII 28) is shown as the symbol \u241c for readability. Real artifacts contain the actual control character, not the symbol.</p> <p>LookAtni Marker Spec v1 defines a simple, robust format:</p> <ul> <li>Marker line: <code>//\\x1C/ path/relative.ext /\\x1C//</code></li> <li>Content: Lines until the next marker or EOF</li> <li>Encoding: UTF-8 text</li> </ul> <p>Validity rules and metadata are documented in <code>spec/marker-v1.md</code>.</p> <p>Common operations:</p> <pre><code>//\u241c/ README.md /\u241c//\nHello\n\n//\u241c/ src/index.js /\u241c//\nconsole.log('ok')\n</code></pre> <p>Why ASCII 28? Invisible, portable and conflict-free in code blocks.</p>"},{"location":"features/markers/#header-metadata","title":"Header Metadata","text":"<p>Artifacts begin with an optional <code>PROJECT_INFO</code> block carrying metadata:</p> <pre><code>//\u241c/ PROJECT_INFO /\u241c//\nProject: my-project\nGenerated: 2025-09-13T12:34:56Z\nTotal Files: 42\nSource: /path/to/my-project\nGenerator: lookatni-core v1.1.0\nMarkerSpec: v1\nFS: 28\nMarkerTokens: //\\x1C/ &lt;path&gt; /\\x1C//\nEncoding: utf-8\n</code></pre> <ul> <li>Communicates the spec version, chosen separator and token layout.</li> <li>Enables future profiles (e.g., v1.1 with base64 transport for binaries) without breaking v1.</li> </ul>"},{"location":"features/markers/#fs-autodetect","title":"FS Autodetect","text":"<ul> <li>Validator and Extractor auto-detect the separator (any control char 0x00\u20130x1F) via a backreference pattern.</li> <li>Default is ASCII 28; header records the actual value used.</li> </ul>"},{"location":"features/markers/#strict-mode","title":"Strict Mode","text":"<ul> <li>Flags \u201cmarker-like\u201d lines that contain FS tokens but don\u2019t match the canonical regex.</li> <li>Treats \u201cno markers at all\u201d as invalid.</li> <li>Useful to catch subtle formatting errors introduced by third-party tools.</li> </ul> <p>Enable it via CLI (<code>lookatni validate --strict</code>) or programmatically in the Core.</p>"},{"location":"features/markers/#naming-convention-temporary","title":"Naming Convention (temporary)","text":"<ul> <li>To maximize compatibility and easy preview in editors, prefer <code>.lkt.txt</code> filenames for generated artifacts (e.g., <code>project.lkt.txt</code>).</li> <li>The suffix <code>.txt</code> keeps double-click and syntax highlighting friendly; <code>.lkt</code> signals LookAtni.</li> </ul>"},{"location":"features/tools/","title":"Tools","text":"<p>Optional utilities for pipes and HTTP delivery.</p>"},{"location":"features/tools/#pipe-to-stdout","title":"Pipe to STDOUT","text":"<pre><code>cat scripts.lkt.txt | node tools/lookatni-pipe-extract.js build.sh | bash\n</code></pre>"},{"location":"features/tools/#extract-to-directory","title":"Extract to Directory","text":"<pre><code>cat project.lkt.txt | node tools/pipe-extract.js ./out\n</code></pre>"},{"location":"features/tools/#http-api-server","title":"HTTP API Server","text":"<pre><code>LOOKATNI_FILE=./scripts.lkt.txt node tools/lookatni-api-server.js\ncurl -s http://localhost:3000/api/list | jq\n</code></pre> <p>Great for demos, CI and reproducible one-liners.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Choose the path that fits your workflow.</p>"},{"location":"getting-started/installation/#cli-local-build","title":"CLI (local build)","text":"<pre><code>cd core &amp;&amp; npm run build\ncd ../cli &amp;&amp; make build\n# binaries in cli/bin/\n</code></pre>"},{"location":"getting-started/installation/#vs-code-extension-dev","title":"VS Code Extension (dev)","text":"<p>Open <code>extension/</code> in VS Code and run the extension. Ensure Core is built so the extension can import it.</p>"},{"location":"getting-started/installation/#python-docs-this-site","title":"Python Docs (this site)","text":"<pre><code>cd docs-site\nuv sync\nuv run mkdocs serve\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>End-to-end in under 60 seconds.</p> <pre><code># 1) Build Core (once)\ncd core &amp;&amp; npm run build &amp;&amp; cd ..\n\n# 2) Use CLI (if built)\ncli/bin/lookatni generate ./examples my-example.lkt.txt\ncli/bin/lookatni extract my-example.lkt.txt ./restored\n</code></pre> <p>VS Code: 1. Open Command Palette \u2192 LookAtni: Generate Markers 2. Pick your folder and output file 3. Extract with LookAtni: Extract Files</p> <p>Validate with the Core: <pre><code>node scripts/test-parity.js\n</code></pre></p>"},{"location":"guide/configuration/","title":"Configuration","text":"<p>Core options to control generation and extraction.</p>"},{"location":"guide/configuration/#generation","title":"Generation","text":"<ul> <li><code>maxFileSize</code> (KB, -1 no limit)</li> <li><code>excludePatterns</code></li> <li><code>includeMetadata</code> (default: true)</li> <li><code>includeBinaryFiles</code> (default: false)</li> <li><code>encoding</code> (default: utf-8)</li> </ul>"},{"location":"guide/configuration/#extraction","title":"Extraction","text":"<ul> <li><code>overwriteExisting</code></li> <li><code>createDirectories</code></li> <li><code>conflictResolution</code> (overwrite | skip | backup)</li> <li><code>dryRun</code></li> </ul> <p>See TypeScript types in <code>core/src/lib/types.ts</code>.</p>"},{"location":"guide/workflows/","title":"Workflows","text":""},{"location":"guide/workflows/#ai-code-extraction","title":"AI Code Extraction","text":"<ol> <li>Copy a single-file answer with markers from your AI chat</li> <li>Save as <code>answer.lkt</code></li> <li>Extract: <code>lookatni extract answer.lkt ./project</code></li> </ol>"},{"location":"guide/workflows/#sharing-a-project-slice","title":"Sharing a Project Slice","text":"<pre><code>lookatni generate ./src src-slice.lkt\ngit add src-slice.lkt\n</code></pre>"},{"location":"guide/workflows/#ci-step","title":"CI Step","text":"<pre><code>cat deploy.lkt | node tools/lookatni-pipe-extract.js deploy.sh | bash\n</code></pre> <p>Keep it visible, reproducible, and lock-in free.</p>"}]}