{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Welcome to the LookAtni Revolution","text":""},{"location":"#transform-your-code-organization","title":"Transform Your Code Organization","text":"<p>LookAtni File Markers revolutionizes how you organize, share, and manage code projects. Say goodbye to complex zip files and hello to elegant, portable code markers.</p> <p>\ud83c\udfaf What Makes LookAtni Special?</p> <p>Transform any codebase into a single, portable text file with unique markers that preserve complete project structure, file relationships, and metadata.</p>"},{"location":"#quick-preview","title":"\u26a1 Quick Preview","text":"<pre><code># Generate markers from your project\nLookAtni: Generate Markers \u2192 ./my-project \u2192 project-markers.txt\n\n# Share anywhere, extract anywhere\nLookAtni: Extract Files \u2192 project-markers.txt \u2192 ./restored-project\n</code></pre>"},{"location":"#key-features","title":"\ud83c\udf1f Key Features","text":"<ul> <li> <p>\ud83d\udcc1 Smart File Organization</p> <p>Automatically organize files with intelligent markers that preserve project structure and relationships.</p> <p> Learn more</p> </li> <li> <p>\ud83d\udce5 One-Click Extraction</p> <p>Extract complete projects from marked text files with perfect fidelity and zero data loss.</p> <p> Extraction Guide</p> </li> <li> <p>\u2705 Built-in Validation</p> <p>Validate project integrity with comprehensive checks for missing files, broken links, and structure issues.</p> <p> Validation System</p> </li> <li> <p>\ud83d\udc41\ufe0f Visual Markers</p> <p>Interactive visual markers in VS Code with syntax highlighting and smart navigation.</p> <p> Visual Features</p> </li> <li> <p>\ud83d\udd27 Powerful CLI</p> <p>Complete TypeScript-based CLI tools for automation, CI/CD integration, and advanced workflows.</p> <p> CLI Documentation</p> </li> <li> <p>\u2699\ufe0f Highly Configurable</p> <p>Extensive configuration options with workspace settings, file filters, and custom templates.</p> <p> Configuration</p> </li> </ul>"},{"location":"#see-it-in-action","title":"\ud83c\udfac See It In Action","text":"<p>\ud83d\udcf9 Perfect for Recording</p> <p>Built-in Automated Demo mode creates perfect demonstrations for tutorials, presentations, and educational content.</p>"},{"location":"#get-started-in-60-seconds","title":"\ud83c\udfc3\u200d\u2642\ufe0f Get Started in 60 Seconds","text":"Install ExtensionTry Quick DemoGenerate First Markers <ol> <li>Open VS Code</li> <li>Search for \"LookAtni File Markers\"</li> <li>Click Install</li> <li>Reload VS Code</li> </ol> <ol> <li>Open Command Palette (<code>Ctrl+Shift+P</code>)</li> <li>Type <code>LookAtni: Quick Demo</code></li> <li>Watch the magic happen! \u2728</li> </ol> <ol> <li>Open your project folder</li> <li>Command Palette \u2192 <code>LookAtni: Generate Markers</code></li> <li>Select source folder and output file</li> <li>Share your project anywhere! \ud83d\ude80</li> </ol>"},{"location":"#use-cases","title":"\ud83c\udf0d Use Cases","text":"<p>\ud83d\udcbc Professional Development</p> <ul> <li>Code Reviews: Share clean, organized code snippets</li> <li>Documentation: Include runnable examples in docs</li> <li>Portfolio: Showcase projects without repositories</li> <li>Collaboration: Share project slices with team members</li> </ul> <p>\ud83c\udf93 Education &amp; Training</p> <ul> <li>Tutorials: Distribute complete project files</li> <li>Assignments: Package student submissions</li> <li>Workshops: Share hands-on coding exercises</li> <li>Online Courses: Include downloadable project files</li> </ul> <p>\ud83d\udd27 DevOps &amp; Automation</p> <ul> <li>CI/CD: Automate project packaging</li> <li>Deployment: Package configurations and scripts</li> <li>Backup: Create portable project snapshots</li> <li>Migration: Move projects between environments</li> </ul>"},{"location":"#ready-to-join-the-revolution","title":"\ud83d\ude80 Ready to Join the Revolution?","text":"<p>Get Started  View Examples  GitHub Repository </p> <p>\ud83c\udf1f Install LookAtni File Markers and transform your workflow today!</p>"},{"location":"about/changelog/","title":"\ud83d\udcd6 Changelog","text":"<p>Complete version history and release notes for LookAtni File Markers.</p>"},{"location":"about/changelog/#version-106-current-july-2025","title":"Version 1.0.6 (Current) - July 2025","text":""},{"location":"about/changelog/#new-features","title":"\ud83c\udf89 New Features","text":"<ul> <li>Enhanced Visual Markers: Improved syntax highlighting and interactive navigation</li> <li>Advanced CLI Tools: Complete TypeScript-based command-line interface</li> <li>Smart Validation System: Multi-layered validation with auto-fix suggestions</li> <li>Performance Optimizations: Parallel processing and memory management improvements</li> <li>GitHub Pages Documentation: Beautiful, modern documentation site with Material Theme</li> </ul>"},{"location":"about/changelog/#improvements","title":"\ud83d\udd27 Improvements","text":"<ul> <li>Better Error Handling: More descriptive error messages and recovery suggestions</li> <li>Cross-Platform Compatibility: Improved path handling for Windows/Unix systems</li> <li>Memory Optimization: Reduced memory usage for large projects</li> <li>Faster Generation: Up to 40% faster marker generation for medium-sized projects</li> <li>Enhanced Configuration: More flexible configuration options and templates</li> </ul>"},{"location":"about/changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed command registration issues in VS Code extension</li> <li>Resolved path separator problems on Windows</li> <li>Fixed memory leaks in large file processing</li> <li>Corrected encoding issues with non-UTF8 files</li> <li>Fixed extraction conflicts with existing directories</li> </ul>"},{"location":"about/changelog/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Complete documentation overhaul with modern design</li> <li>Added comprehensive examples and tutorials</li> <li>Improved API documentation with TypeScript interfaces</li> <li>Added troubleshooting guides and best practices</li> <li>Created video tutorials and demo recordings</li> </ul>"},{"location":"about/changelog/#version-105-july-2025","title":"Version 1.0.5 - July 2025","text":""},{"location":"about/changelog/#major-features","title":"\ud83c\udfaf Major Features","text":"<ul> <li>Automated Demo System: Perfect demonstrations for tutorials and presentations</li> <li>Recording Guide Integration: Interactive guide for creating video content</li> <li>Statistical Analysis: Project metrics and complexity analysis</li> <li>CLI Integration: Seamless integration between VS Code and command-line tools</li> </ul>"},{"location":"about/changelog/#enhancements","title":"\ud83d\udd27 Enhancements","text":"<ul> <li>Improved File Scanning: Better pattern matching and exclusion rules</li> <li>Enhanced Metadata: More detailed file information and project analysis</li> <li>Better Compression: Improved compression algorithms for smaller file sizes</li> <li>Streamlined UI: Cleaner interface and better user experience</li> </ul>"},{"location":"about/changelog/#fixes","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Resolved issues with large file handling</li> <li>Fixed unicode characters in file names</li> <li>Corrected timestamp preservation during extraction</li> <li>Fixed dependency detection for modern JavaScript frameworks</li> </ul>"},{"location":"about/changelog/#version-104-july-2025","title":"Version 1.0.4 - July 2025","text":""},{"location":"about/changelog/#performance-stability","title":"\u26a1 Performance &amp; Stability","text":"<ul> <li>Parallel Processing: Multi-threaded file processing for large projects</li> <li>Streaming Support: Memory-efficient handling of large files</li> <li>Improved Validation: Faster and more accurate marker validation</li> <li>Error Recovery: Better error handling and recovery mechanisms</li> </ul>"},{"location":"about/changelog/#user-experience","title":"\ud83c\udfa8 User Experience","text":"<ul> <li>Visual Improvements: Better syntax highlighting and code folding</li> <li>Interactive Navigation: Click-to-navigate functionality in marker files</li> <li>Progress Indicators: Real-time progress for long-running operations</li> <li>Keyboard Shortcuts: Customizable shortcuts for common operations</li> </ul>"},{"location":"about/changelog/#technical-improvements","title":"\ud83d\udd27 Technical Improvements","text":"<ul> <li>TypeScript Migration: Full TypeScript support for better type safety</li> <li>Modular Architecture: Improved code organization and maintainability</li> <li>Plugin System: Extensible architecture for custom functionality</li> <li>API Improvements: More consistent and powerful API interface</li> </ul>"},{"location":"about/changelog/#version-103-july-2025","title":"Version 1.0.3 - July 2025","text":""},{"location":"about/changelog/#core-features","title":"\ud83d\ude80 Core Features","text":"<ul> <li>Quick Demo Command: Instant demonstration of LookAtni workflow</li> <li>Configuration System: Comprehensive settings and customization options</li> <li>Backup &amp; Restore: Automatic backup creation during file operations</li> <li>Batch Operations: Process multiple files simultaneously</li> </ul>"},{"location":"about/changelog/#quality-improvements","title":"\ud83c\udfaf Quality Improvements","text":"<ul> <li>Comprehensive Testing: Expanded test coverage and validation</li> <li>Documentation Updates: Improved inline documentation and examples</li> <li>Code Quality: Refactored codebase with better patterns and practices</li> <li>Performance Monitoring: Built-in performance tracking and optimization</li> </ul>"},{"location":"about/changelog/#version-102-july-2025","title":"Version 1.0.2 - July 2025","text":""},{"location":"about/changelog/#stability-reliability","title":"\ud83d\udd27 Stability &amp; Reliability","text":"<ul> <li>Robust File Handling: Improved handling of edge cases and corrupted files</li> <li>Better Validation: Enhanced marker file validation and error reporting</li> <li>Cross-Platform Support: Improved compatibility across operating systems</li> <li>Resource Management: Better memory and CPU usage optimization</li> </ul>"},{"location":"about/changelog/#user-interface","title":"\ud83c\udfa8 User Interface","text":"<ul> <li>Enhanced Explorer: Improved file tree view and navigation</li> <li>Status Indicators: Clear visual feedback for operations and status</li> <li>Error Display: Better error messages and resolution suggestions</li> <li>Accessibility: Improved accessibility and keyboard navigation</li> </ul>"},{"location":"about/changelog/#version-101-july-2025","title":"Version 1.0.1 - July 2025","text":""},{"location":"about/changelog/#critical-fixes","title":"\ud83d\udc1b Critical Fixes","text":"<ul> <li>Command Registration: Fixed VS Code command registration issues</li> <li>File Path Handling: Resolved path resolution problems</li> <li>Extension Loading: Fixed extension activation and loading</li> <li>Marker Parsing: Improved marker file parsing reliability</li> </ul>"},{"location":"about/changelog/#minor-improvements","title":"\ud83d\udd27 Minor Improvements","text":"<ul> <li>Performance Tweaks: Small optimizations for common operations</li> <li>UI Polish: Minor interface improvements and refinements</li> <li>Error Handling: Better error messages and user guidance</li> <li>Documentation: Updated documentation and examples</li> </ul>"},{"location":"about/changelog/#version-100-july-2025","title":"Version 1.0.0 - July 2025","text":""},{"location":"about/changelog/#initial-release","title":"\ud83c\udf89 Initial Release","text":"<p>The first stable release of LookAtni File Markers with complete core functionality:</p>"},{"location":"about/changelog/#core-features_1","title":"\u2728 Core Features","text":"<ul> <li>File Marker Generation: Transform projects into portable text files</li> <li>Project Extraction: Restore complete projects from marker files</li> <li>VS Code Integration: Full extension with commands and visual features</li> <li>File Validation: Comprehensive validation and integrity checking</li> <li>Cross-Platform Support: Windows, macOS, and Linux compatibility</li> </ul>"},{"location":"about/changelog/#key-capabilities","title":"\ud83c\udfaf Key Capabilities","text":"<ul> <li>Smart File Organization: Intelligent project structure preservation</li> <li>Metadata Preservation: File timestamps, sizes, and properties</li> <li>Binary File Support: Handle images, documents, and other binary files</li> <li>Compression: Optional compression for smaller marker files</li> <li>Conflict Resolution: Intelligent handling of file conflicts</li> </ul>"},{"location":"about/changelog/#technical-features","title":"\ud83d\udd27 Technical Features","text":"<ul> <li>TypeScript Core: Robust TypeScript implementation</li> <li>Modular Design: Clean, maintainable architecture</li> <li>Extensible API: Plugin-friendly design for customization</li> <li>Performance Optimized: Efficient processing for large projects</li> </ul>"},{"location":"about/changelog/#documentation-support","title":"\ud83d\udcda Documentation &amp; Support","text":"<ul> <li>Comprehensive Guide: Complete documentation and tutorials</li> <li>Examples Library: Real-world usage examples and patterns</li> <li>API Reference: Detailed API documentation for developers</li> <li>Community Support: GitHub discussions and issue tracking</li> </ul>"},{"location":"about/changelog/#pre-release-versions","title":"Pre-Release Versions","text":""},{"location":"about/changelog/#beta-09x-series-july-2025","title":"Beta 0.9.x Series (July 2025)","text":"<ul> <li>Beta Testing: Extensive testing with community feedback</li> <li>Feature Refinement: Polish and improvement of core features</li> <li>Performance Optimization: Speed and memory usage improvements</li> <li>Bug Fixes: Resolution of critical issues and edge cases</li> </ul>"},{"location":"about/changelog/#alpha-08x-series-july-2025","title":"Alpha 0.8.x Series (July 2025)","text":"<ul> <li>Core Implementation: Initial implementation of core features</li> <li>VS Code Extension: Basic extension functionality</li> <li>Command Line Tools: Initial CLI development</li> <li>Architecture Design: Foundational architecture and patterns</li> </ul>"},{"location":"about/changelog/#development-01x-07x-july-2025","title":"Development 0.1.x - 0.7.x (July 2025)","text":"<ul> <li>Concept Development: Initial concept and prototyping</li> <li>Technology Selection: Choice of technologies and frameworks</li> <li>Core Algorithm: Development of marker generation and extraction</li> <li>Initial Testing: Basic functionality and proof of concept</li> </ul>"},{"location":"about/changelog/#upcoming-features","title":"Upcoming Features","text":""},{"location":"about/changelog/#version-110-planned-q3-2025","title":"Version 1.1.0 (Planned - Q3 2025)","text":""},{"location":"about/changelog/#major-features_1","title":"\ud83c\udfaf Major Features","text":"<ul> <li>Web Interface: Browser-based marker management and visualization</li> <li>Real-time Collaboration: Live sharing and collaborative editing</li> <li>Cloud Integration: Support for cloud storage and synchronization</li> <li>Advanced Analytics: Detailed project analysis and insights</li> </ul>"},{"location":"about/changelog/#enhancements_1","title":"\ud83d\udd27 Enhancements","text":"<ul> <li>Plugin Ecosystem: Third-party plugin support and marketplace</li> <li>AI-Powered Suggestions: Intelligent recommendations and optimizations</li> <li>Advanced Search: Full-text search within marker files</li> <li>Git Integration: Deep integration with Git workflows</li> </ul>"},{"location":"about/changelog/#user-experience_1","title":"\ud83c\udfa8 User Experience","text":"<ul> <li>Mobile Support: Mobile app for viewing and basic operations</li> <li>Dark/Light Themes: Multiple theme options and customization</li> <li>Accessibility: Enhanced accessibility features and compliance</li> <li>Internationalization: Multi-language support</li> </ul>"},{"location":"about/changelog/#version-120-planned-q4-2025","title":"Version 1.2.0 (Planned - Q4 2025)","text":""},{"location":"about/changelog/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":"<ul> <li>Distributed Processing: Cluster support for enterprise-scale projects</li> <li>Advanced Security: Encryption and secure sharing capabilities</li> <li>Integration Platform: Connections to popular development tools</li> <li>Enterprise Features: Team management and advanced administration</li> </ul>"},{"location":"about/changelog/#migration-guide","title":"Migration Guide","text":""},{"location":"about/changelog/#upgrading-from-10x-to-latest","title":"Upgrading from 1.0.x to Latest","text":"<ol> <li>Backup existing markers: Always backup before upgrading</li> <li>Update extension: Install latest version from VS Code marketplace</li> <li>Update CLI: <code>npm update -g lookatni-cli</code></li> <li>Check compatibility: Validate existing marker files</li> <li>Update configurations: Review and update settings as needed</li> </ol>"},{"location":"about/changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>None: All 1.x versions maintain full backward compatibility</li> <li>Deprecations: See individual version notes for deprecated features</li> <li>Configuration: Some configuration keys renamed (with migration support)</li> </ul>"},{"location":"about/changelog/#support-policy","title":"Support Policy","text":"<ul> <li>Current Version: Full support and active development</li> <li>Previous Major: Security updates and critical bug fixes</li> <li>Legacy Versions: Community support only</li> </ul>"},{"location":"about/changelog/#contributing-to-releases","title":"Contributing to Releases","text":""},{"location":"about/changelog/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Report Issues: Use GitHub issues for bugs and feature requests</li> <li>Submit PRs: Contribute code improvements and new features</li> <li>Test Betas: Participate in beta testing programs</li> <li>Documentation: Help improve documentation and examples</li> </ol>"},{"location":"about/changelog/#release-process","title":"Release Process","text":"<ol> <li>Development: Feature development in feature branches</li> <li>Integration: Merge to development branch for integration testing</li> <li>Beta: Release beta versions for community testing</li> <li>Release: Final testing and release to stable channel</li> </ol> <p>For the latest updates and detailed release notes, visit our GitHub Releases page.</p>"},{"location":"about/contributing/","title":"\ud83e\udd1d Contributing to LookAtni File Markers","text":"<p>Welcome to the LookAtni File Markers project! We're excited that you're interested in contributing. This guide will help you get started with contributing to our VS Code extension and documentation.</p>"},{"location":"about/contributing/#ways-to-contribute","title":"\ud83c\udfaf Ways to Contribute","text":""},{"location":"about/contributing/#report-bugs","title":"\ud83d\udc1b Report Bugs","text":"<p>Help us improve by reporting bugs you encounter:</p> <ol> <li>Check existing issues first to avoid duplicates</li> <li>Use the bug report template when creating new issues</li> <li>Include reproduction steps and environment details</li> <li>Provide sample files when relevant</li> </ol>"},{"location":"about/contributing/#bug-report-template","title":"Bug Report Template","text":"<pre><code>**Description**\nA clear description of the bug.\n\n**Steps to Reproduce**\n1. Go to '...'\n2. Click on '...'\n3. See error\n\n**Expected Behavior**\nWhat you expected to happen.\n\n**Actual Behavior**\nWhat actually happened.\n\n**Environment**\n- OS: [e.g. Windows 10, macOS 12, Ubuntu 20.04]\n- VS Code Version: [e.g. 1.80.0]\n- Extension Version: [e.g. 1.0.6]\n\n**Additional Context**\nAny other relevant information.\n</code></pre>"},{"location":"about/contributing/#suggest-features","title":"\ud83d\udca1 Suggest Features","text":"<p>We welcome feature suggestions:</p> <ol> <li>Search existing feature requests to avoid duplicates</li> <li>Use the feature request template</li> <li>Explain the use case and business value</li> <li>Provide implementation ideas if you have them</li> </ol>"},{"location":"about/contributing/#feature-request-template","title":"Feature Request Template","text":"<pre><code>**Is your feature request related to a problem?**\nA clear description of the problem.\n\n**Describe the solution you'd like**\nA clear description of what you want to happen.\n\n**Describe alternatives you've considered**\nOther solutions you've considered.\n\n**Additional context**\nAny other context about the feature request.\n</code></pre>"},{"location":"about/contributing/#contribute-code","title":"\ud83d\udd27 Contribute Code","text":""},{"location":"about/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/rafa-mori/lookatni-file-markers.git\ncd lookatni-file-markers\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Set up development environment:    <pre><code># Start TypeScript compilation in watch mode\nnpm run watch:tsc\n\n# Start esbuild bundling in watch mode\nnpm run watch:esbuild\n</code></pre></p> </li> <li> <p>Open in VS Code:    <pre><code>code .\n</code></pre></p> </li> <li> <p>Press F5 to launch Extension Development Host</p> </li> </ol>"},{"location":"about/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following our coding standards</p> </li> <li> <p>Test your changes:    <pre><code># Run tests\nnpm test\n\n# Test in Extension Development Host\n# Press F5 in VS Code\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git add .\ngit commit -m \"feat: add your feature description\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a Pull Request on GitHub</p> </li> </ol>"},{"location":"about/contributing/#improve-documentation","title":"\ud83d\udcda Improve Documentation","text":"<p>Documentation improvements are always welcome:</p> <ol> <li>Fix typos and grammar errors</li> <li>Add missing examples and clarifications</li> <li>Improve existing tutorials and guides</li> <li>Create new tutorials for advanced features</li> <li>Update screenshots and visual content</li> </ol>"},{"location":"about/contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs-site/docs/\n\u251c\u2500\u2500 index.md                 # Homepage\n\u251c\u2500\u2500 features/               # Feature documentation\n\u251c\u2500\u2500 guide/                  # User guides and tutorials\n\u251c\u2500\u2500 advanced/               # Advanced topics\n\u251c\u2500\u2500 about/                  # Project information\n\u2514\u2500\u2500 examples/               # Real-world examples\n</code></pre>"},{"location":"about/contributing/#running-documentation-locally","title":"Running Documentation Locally","text":"<pre><code>cd docs-site\nuv run mkdocs serve\n</code></pre>"},{"location":"about/contributing/#code-style-guide","title":"\ud83c\udfa8 Code Style Guide","text":""},{"location":"about/contributing/#typescript-guidelines","title":"TypeScript Guidelines","text":""},{"location":"about/contributing/#file-organization","title":"File Organization","text":"<pre><code>// 1. Imports - grouped and sorted\nimport * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { ConfigManager } from '../utils/configManager';\nimport { Logger } from '../utils/logger';\n\n// 2. Types and interfaces\ninterface MarkerOptions {\n    includeMetadata: boolean;\n    compressionLevel: number;\n}\n\n// 3. Constants\nconst DEFAULT_OPTIONS: MarkerOptions = {\n    includeMetadata: true,\n    compressionLevel: 1\n};\n\n// 4. Main implementation\nexport class MarkerGenerator {\n    // Implementation\n}\n</code></pre>"},{"location":"about/contributing/#naming-conventions","title":"Naming Conventions","text":"<pre><code>// Classes: PascalCase\nclass MarkerGenerator {}\n\n// Functions and variables: camelCase\nfunction generateMarkers() {}\nconst fileCount = 10;\n\n// Constants: UPPER_SNAKE_CASE\nconst MAX_FILE_SIZE = 1024 * 1024;\n\n// Interfaces: PascalCase with 'I' prefix (optional)\ninterface IMarkerConfig {}\n// or simply\ninterface MarkerConfig {}\n\n// Enums: PascalCase\nenum FileType {\n    Text,\n    Binary,\n    Archive\n}\n</code></pre>"},{"location":"about/contributing/#function-documentation","title":"Function Documentation","text":"<pre><code>/**\n * Generates marker files for the specified directory.\n * \n * @param sourcePath - The path to the source directory\n * @param options - Configuration options for marker generation\n * @returns Promise that resolves to the generated marker file path\n * \n * @example\n * ```typescript\n * const markerPath = await generateMarkers('/path/to/project', {\n *     includeMetadata: true,\n *     compressionLevel: 2\n * });\n * ```\n */\nasync function generateMarkers(\n    sourcePath: string, \n    options: MarkerOptions\n): Promise&lt;string&gt; {\n    // Implementation\n}\n</code></pre>"},{"location":"about/contributing/#error-handling","title":"Error Handling","text":"<pre><code>// Use specific error types\nclass MarkerGenerationError extends Error {\n    constructor(\n        message: string,\n        public readonly sourcePath: string,\n        public readonly originalError?: Error\n    ) {\n        super(message);\n        this.name = 'MarkerGenerationError';\n    }\n}\n\n// Handle errors gracefully\ntry {\n    const result = await generateMarkers(sourcePath, options);\n    return result;\n} catch (error) {\n    if (error instanceof MarkerGenerationError) {\n        Logger.error(`Failed to generate markers: ${error.message}`);\n        throw error;\n    } else {\n        Logger.error(`Unexpected error: ${error}`);\n        throw new MarkerGenerationError(\n            'Unexpected error during marker generation',\n            sourcePath,\n            error\n        );\n    }\n}\n</code></pre>"},{"location":"about/contributing/#vs-code-extension-guidelines","title":"VS Code Extension Guidelines","text":""},{"location":"about/contributing/#command-implementation","title":"Command Implementation","text":"<pre><code>// Command registration\nexport function activate(context: vscode.ExtensionContext) {\n    const disposable = vscode.commands.registerCommand(\n        'lookatni.generateMarkers',\n        async (uri?: vscode.Uri) =&gt; {\n            try {\n                await generateMarkersCommand(uri);\n            } catch (error) {\n                vscode.window.showErrorMessage(\n                    `Failed to generate markers: ${error.message}`\n                );\n            }\n        }\n    );\n\n    context.subscriptions.push(disposable);\n}\n\n// Command implementation\nasync function generateMarkersCommand(uri?: vscode.Uri): Promise&lt;void&gt; {\n    const sourcePath = uri?.fsPath || vscode.workspace.rootPath;\n\n    if (!sourcePath) {\n        throw new Error('No workspace folder selected');\n    }\n\n    // Show progress\n    await vscode.window.withProgress({\n        location: vscode.ProgressLocation.Notification,\n        title: 'Generating markers...',\n        cancellable: true\n    }, async (progress, token) =&gt; {\n        // Implementation with progress updates\n        progress.report({ increment: 0, message: 'Scanning files...' });\n\n        // Check for cancellation\n        if (token.isCancellationRequested) {\n            return;\n        }\n\n        // Continue implementation...\n    });\n}\n</code></pre>"},{"location":"about/contributing/#configuration-management","title":"Configuration Management","text":"<pre><code>// Type-safe configuration access\ninterface ExtensionConfig {\n    includeMetadata: boolean;\n    compressionLevel: number;\n    excludePatterns: string[];\n}\n\nfunction getConfiguration(): ExtensionConfig {\n    const config = vscode.workspace.getConfiguration('lookatni');\n\n    return {\n        includeMetadata: config.get&lt;boolean&gt;('includeMetadata', true),\n        compressionLevel: config.get&lt;number&gt;('compressionLevel', 1),\n        excludePatterns: config.get&lt;string[]&gt;('excludePatterns', [])\n    };\n}\n</code></pre>"},{"location":"about/contributing/#testing-guidelines","title":"\ud83e\uddea Testing Guidelines","text":""},{"location":"about/contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>// test/unit/markerGenerator.test.ts\nimport * as assert from 'assert';\nimport { MarkerGenerator } from '../../src/utils/markerGenerator';\n\ndescribe('MarkerGenerator', () =&gt; {\n    let generator: MarkerGenerator;\n\n    beforeEach(() =&gt; {\n        generator = new MarkerGenerator();\n    });\n\n    it('should generate markers for simple project', async () =&gt; {\n        const result = await generator.generate('/test/project');\n\n        assert.ok(result);\n        assert.ok(result.includes('// === File:'));\n    });\n\n    it('should handle binary files correctly', async () =&gt; {\n        // Test implementation\n    });\n});\n</code></pre>"},{"location":"about/contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>// test/integration/extension.test.ts\nimport * as vscode from 'vscode';\nimport * as assert from 'assert';\n\ndescribe('Extension Integration Tests', () =&gt; {\n    it('should activate extension successfully', async () =&gt; {\n        const extension = vscode.extensions.getExtension('rafa-mori.lookatni-file-markers');\n\n        assert.ok(extension);\n        await extension.activate();\n        assert.ok(extension.isActive);\n    });\n\n    it('should register all commands', async () =&gt; {\n        const commands = await vscode.commands.getCommands();\n\n        assert.ok(commands.includes('lookatni.generateMarkers'));\n        assert.ok(commands.includes('lookatni.extractFiles'));\n        // ... test other commands\n    });\n});\n</code></pre>"},{"location":"about/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run specific test file\nnpm test -- --grep \"MarkerGenerator\"\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run tests in watch mode\nnpm run test:watch\n</code></pre>"},{"location":"about/contributing/#pull-request-guidelines","title":"\ud83d\udccb Pull Request Guidelines","text":""},{"location":"about/contributing/#before-submitting","title":"Before Submitting","text":"<ol> <li> <p>Ensure all tests pass:    <pre><code>npm test\n</code></pre></p> </li> <li> <p>Check code formatting:    <pre><code>npm run lint\nnpm run format\n</code></pre></p> </li> <li> <p>Update documentation if needed</p> </li> <li> <p>Add tests for new functionality</p> </li> <li> <p>Update changelog for significant changes</p> </li> </ol>"},{"location":"about/contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n\n## Checklist\n- [ ] My code follows the project's style guidelines\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n</code></pre>"},{"location":"about/contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass (CI/CD pipeline)</li> <li>Code review by maintainers</li> <li>Testing in development environment</li> <li>Documentation review if applicable</li> <li>Final approval and merge</li> </ol>"},{"location":"about/contributing/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":""},{"location":"about/contributing/#core-extension","title":"Core Extension","text":"<pre><code>src/\n\u251c\u2500\u2500 extension.ts           # Main extension entry point\n\u251c\u2500\u2500 commands/             # VS Code commands\n\u2502   \u251c\u2500\u2500 generateMarkers.ts\n\u2502   \u251c\u2500\u2500 extractFiles.ts\n\u2502   \u251c\u2500\u2500 validateMarkers.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 utils/               # Utility modules\n\u2502   \u251c\u2500\u2500 configManager.ts\n\u2502   \u251c\u2500\u2500 logger.ts\n\u2502   \u251c\u2500\u2500 markerGenerator.ts\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 views/               # VS Code views and providers\n\u2502   \u2514\u2500\u2500 explorerProvider.ts\n\u2514\u2500\u2500 test/                # Test files\n    \u251c\u2500\u2500 unit/\n    \u251c\u2500\u2500 integration/\n    \u2514\u2500\u2500 fixtures/\n</code></pre>"},{"location":"about/contributing/#documentation","title":"Documentation","text":"<pre><code>docs-site/\n\u251c\u2500\u2500 docs/                # Documentation content\n\u251c\u2500\u2500 mkdocs.yml          # MkDocs configuration\n\u251c\u2500\u2500 pyproject.toml      # Python dependencies\n\u2514\u2500\u2500 overrides/          # Custom templates and assets\n</code></pre>"},{"location":"about/contributing/#configuration-files","title":"Configuration Files","text":"<pre><code>\u251c\u2500\u2500 package.json         # Extension manifest and dependencies\n\u251c\u2500\u2500 tsconfig.json       # TypeScript configuration\n\u251c\u2500\u2500 eslint.config.mjs   # ESLint configuration\n\u251c\u2500\u2500 esbuild.js          # Build configuration\n\u2514\u2500\u2500 .github/            # GitHub workflows and templates\n</code></pre>"},{"location":"about/contributing/#release-process","title":"\ud83d\ude80 Release Process","text":""},{"location":"about/contributing/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR.MINOR.PATCH (e.g., 1.0.6)</li> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"about/contributing/#release-steps","title":"Release Steps","text":"<ol> <li>Update version in <code>package.json</code></li> <li>Update changelog with new features and fixes</li> <li> <p>Create release branch:    <pre><code>git checkout -b release/v1.0.7\n</code></pre></p> </li> <li> <p>Final testing and validation</p> </li> <li>Create GitHub release with release notes</li> <li>Publish to VS Code Marketplace:    <pre><code>vsce publish\n</code></pre></li> </ol>"},{"location":"about/contributing/#community-guidelines","title":"\ud83e\udd1d Community Guidelines","text":""},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Be constructive in feedback and discussions</li> <li>Be patient with new contributors</li> <li>Be helpful and supportive</li> </ul>"},{"location":"about/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: General questions and community discussion</li> <li>Pull Request Reviews: Code-related discussions</li> </ul>"},{"location":"about/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in:</p> <ul> <li>Changelog: Credit for significant contributions</li> <li>README: Contributors section</li> <li>Release Notes: Special mentions for major contributions</li> </ul>"},{"location":"about/contributing/#learning-resources","title":"\ud83c\udf93 Learning Resources","text":""},{"location":"about/contributing/#getting-started-with-vs-code-extensions","title":"Getting Started with VS Code Extensions","text":"<ul> <li>VS Code Extension API</li> <li>Extension Guidelines</li> <li>Publishing Extensions</li> </ul>"},{"location":"about/contributing/#typescript-resources","title":"TypeScript Resources","text":"<ul> <li>TypeScript Handbook</li> <li>TypeScript Best Practices</li> </ul>"},{"location":"about/contributing/#testing-resources","title":"Testing Resources","text":"<ul> <li>Mocha Testing Framework</li> <li>VS Code Extension Testing</li> </ul> <p>Thank you for contributing to LookAtni File Markers! Your contributions help make this tool better for everyone. \ud83d\ude4f</p>"},{"location":"about/license/","title":"\ud83d\udcdc License","text":"<p>LookAtni File Markers is released under the MIT License, which allows for maximum flexibility and freedom in both personal and commercial use.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Rafael Mori\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#what-this-means","title":"What This Means","text":""},{"location":"about/license/#you-can","title":"\u2705 You Can:","text":"<ul> <li>Use commercially: Use LookAtni in any commercial project without restrictions</li> <li>Modify: Adapt and modify the source code to fit your needs</li> <li>Distribute: Share the software with others, including modified versions</li> <li>Private use: Use the software privately without disclosure obligations</li> <li>Sublicense: Include LookAtni in projects with different licenses</li> </ul>"},{"location":"about/license/#you-must","title":"\ud83d\udccb You Must:","text":"<ul> <li>Include copyright: Keep the original copyright notice in distributions</li> <li>Include license: Include the MIT license text with any distributions</li> <li>Include notices: Preserve any existing copyright and license notices</li> </ul>"},{"location":"about/license/#you-cannot","title":"\u274c You Cannot:","text":"<ul> <li>Hold liable: The authors cannot be held liable for any damages</li> <li>Use trademarks: The license doesn't grant rights to use author names or trademarks</li> </ul>"},{"location":"about/license/#why-mit-license","title":"Why MIT License?","text":"<p>We chose the MIT License for LookAtni File Markers because:</p>"},{"location":"about/license/#maximum-freedom","title":"\ud83c\udf0d Maximum Freedom","text":"<p>The MIT License provides maximum freedom for users while maintaining minimal restrictions. This encourages adoption and contribution from the community.</p>"},{"location":"about/license/#business-friendly","title":"\ud83e\udd1d Business Friendly","text":"<p>Commercial use is explicitly allowed without requiring disclosure of source code modifications, making it suitable for enterprise environments.</p>"},{"location":"about/license/#simple-and-clear","title":"\ud83d\udd04 Simple and Clear","text":"<p>The license terms are straightforward and easy to understand, reducing legal complexity for users and contributors.</p>"},{"location":"about/license/#wide-adoption","title":"\ud83c\udfaf Wide Adoption","text":"<p>MIT is one of the most popular open-source licenses, making it familiar to developers and legal teams worldwide.</p>"},{"location":"about/license/#third-party-dependencies","title":"Third-Party Dependencies","text":"<p>LookAtni File Markers uses several third-party libraries, each with their own licenses:</p>"},{"location":"about/license/#core-dependencies","title":"Core Dependencies","text":"Package License Purpose <code>@types/vscode</code> MIT VS Code API type definitions <code>typescript</code> Apache-2.0 TypeScript compiler and language support <code>esbuild</code> MIT Fast JavaScript bundler <code>eslint</code> MIT JavaScript/TypeScript linting"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":"Package License Purpose <code>@types/node</code> MIT Node.js type definitions <code>@types/mocha</code> MIT Mocha testing framework types <code>mocha</code> MIT Testing framework <code>@typescript-eslint/eslint-plugin</code> MIT TypeScript ESLint rules <code>@typescript-eslint/parser</code> BSD-2-Clause TypeScript ESLint parser"},{"location":"about/license/#documentation-dependencies","title":"Documentation Dependencies","text":"Package License Purpose <code>mkdocs</code> BSD-2-Clause Documentation site generator <code>mkdocs-material</code> MIT Material Design theme for MkDocs <code>pymdown-extensions</code> MIT Markdown extensions for Python <p>All dependencies are compatible with the MIT License and don't impose additional restrictions on the use of LookAtni File Markers.</p>"},{"location":"about/license/#attribution-guidelines","title":"Attribution Guidelines","text":"<p>While not required by the MIT License, we appreciate attribution when you use LookAtni File Markers:</p>"},{"location":"about/license/#recommended-attribution","title":"Recommended Attribution","text":"<pre><code>This project uses LookAtni File Markers\nCopyright (c) 2025 Rafael Mori\nLicensed under the MIT License\nhttps://github.com/rafa-mori/lookatni-file-markers\n</code></pre>"},{"location":"about/license/#for-documentation","title":"For Documentation","text":"<p>If you're documenting your use of LookAtni:</p> <pre><code>## Acknowledgments\n\nThis project uses [LookAtni File Markers](https://github.com/rafa-mori/lookatni-file-markers) \nfor project organization and file management, created by Rafael Mori and licensed under \nthe MIT License.\n</code></pre>"},{"location":"about/license/#for-academic-use","title":"For Academic Use","text":"<p>For academic papers or research:</p> <pre><code>@misc{lookatni2025,\n  title={LookAtni File Markers: VS Code Extension for Project Organization},\n  author={Rafael Mori},\n  year={2025},\n  url={https://github.com/rafa-mori/lookatni-file-markers},\n  note={MIT License}\n}\n</code></pre>"},{"location":"about/license/#license-compliance","title":"License Compliance","text":""},{"location":"about/license/#for-developers","title":"For Developers","text":"<p>When using LookAtni File Markers in your projects:</p> <ol> <li>Include the license: Copy the MIT license text to your project</li> <li>Maintain attribution: Keep copyright notices intact</li> <li>Document usage: Note LookAtni usage in your documentation</li> <li>Check dependencies: Ensure all dependencies are compatible</li> </ol>"},{"location":"about/license/#for-distributors","title":"For Distributors","text":"<p>When redistributing LookAtni File Markers:</p> <ol> <li>Include original license: Maintain the complete MIT license text</li> <li>Preserve copyright: Keep all copyright notices unchanged</li> <li>Document modifications: Note any changes made to the original</li> <li>Provide source: Include or reference the original source code</li> </ol>"},{"location":"about/license/#for-enterprises","title":"For Enterprises","text":"<p>Enterprise usage considerations:</p> <ol> <li>Legal review: Have your legal team review the MIT license terms</li> <li>Compliance tracking: Track LookAtni usage across your organization</li> <li>License management: Include LookAtni in your license inventory</li> <li>Risk assessment: Evaluate any potential risks (very low with MIT)</li> </ol>"},{"location":"about/license/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"about/license/#can-i-use-lookatni-in-commercial-products","title":"Can I use LookAtni in commercial products?","text":"<p>Yes! The MIT License explicitly allows commercial use without restrictions. You can include LookAtni in commercial products, services, or applications.</p>"},{"location":"about/license/#do-i-need-to-pay-royalties","title":"Do I need to pay royalties?","text":"<p>No. The MIT License is royalty-free. You can use LookAtni without any payment obligations.</p>"},{"location":"about/license/#can-i-modify-the-source-code","title":"Can I modify the source code?","text":"<p>Yes. You can modify the source code to fit your needs. You're not required to share your modifications, but contributions back to the project are welcome.</p>"},{"location":"about/license/#do-i-need-to-open-source-my-entire-project","title":"Do I need to open-source my entire project?","text":"<p>No. The MIT License is not copyleft. You can use LookAtni in proprietary projects without open-sourcing your code.</p>"},{"location":"about/license/#can-i-remove-the-copyright-notice","title":"Can I remove the copyright notice?","text":"<p>No. You must preserve the copyright notice and license text in any distribution of LookAtni.</p>"},{"location":"about/license/#what-about-warranty-and-liability","title":"What about warranty and liability?","text":"<p>The software is provided \"as is\" without warranty. The authors are not liable for any damages arising from the use of the software.</p>"},{"location":"about/license/#can-i-sublicense-lookatni-under-a-different-license","title":"Can I sublicense LookAtni under a different license?","text":"<p>Yes. You can include LookAtni in projects with different licenses, but the LookAtni components remain under MIT License.</p>"},{"location":"about/license/#do-i-need-permission-to-use-lookatni","title":"Do I need permission to use LookAtni?","text":"<p>No. The MIT License grants permission upfront. You don't need to ask for additional permission to use the software.</p>"},{"location":"about/license/#contact-information","title":"Contact Information","text":"<p>For license-related questions or concerns:</p> <ul> <li>GitHub Issues: Create an issue for licensing questions</li> <li>Email: Contact the maintainers through GitHub</li> <li>Legal Compliance: For enterprise legal compliance questions, create a GitHub issue with the \"legal\" label</li> </ul>"},{"location":"about/license/#license-history","title":"License History","text":""},{"location":"about/license/#version-100-and-later","title":"Version 1.0.0 and Later","text":"<p>All versions of LookAtni File Markers from 1.0.0 onwards are released under the MIT License.</p>"},{"location":"about/license/#pre-release-versions","title":"Pre-Release Versions","text":"<p>Development and pre-release versions (0.x.x) were also developed under the MIT License terms.</p>"},{"location":"about/license/#related-legal-information","title":"Related Legal Information","text":""},{"location":"about/license/#export-control","title":"Export Control","text":"<p>LookAtni File Markers contains only publicly available technology and is not subject to export control restrictions.</p>"},{"location":"about/license/#patents","title":"Patents","text":"<p>The MIT License provides an implicit patent grant from contributors. No additional patent licenses are required.</p>"},{"location":"about/license/#trademarks","title":"Trademarks","text":"<p>The MIT License does not grant rights to use the LookAtni name or associated trademarks outside of describing the software itself.</p>"},{"location":"about/license/#summary","title":"Summary","text":"<p>The MIT License provides a simple, permissive framework that allows you to use LookAtni File Markers with confidence in virtually any context. Whether you're building open-source projects, commercial applications, or enterprise solutions, the MIT License ensures you have the freedom to innovate while maintaining minimal compliance obligations.</p> <p>For the most up-to-date license information, always refer to the LICENSE file in the official repository.</p> <p>Remember: While the MIT License is permissive, always consult with your legal team for enterprise use cases or if you have specific compliance requirements.</p>"},{"location":"advanced/api/","title":"\ud83d\ude80 Extension API Reference","text":"<p>Comprehensive API documentation for developers who want to extend LookAtni File Markers or integrate it into other tools and workflows.</p>"},{"location":"advanced/api/#core-api-overview","title":"\ud83d\udcda Core API Overview","text":"<p>The LookAtni Extension API provides programmatic access to all marker generation, extraction, and management functionality. The API is designed to be type-safe, extensible, and easy to use.</p>"},{"location":"advanced/api/#installation","title":"Installation","text":"<pre><code>npm install lookatni-core\n</code></pre>"},{"location":"advanced/api/#basic-usage","title":"Basic Usage","text":"<pre><code>import { \n  MarkerGenerator, \n  MarkerExtractor, \n  MarkerValidator,\n  ConfigManager \n} from 'lookatni-core';\n\n// Initialize components\nconst generator = new MarkerGenerator();\nconst extractor = new MarkerExtractor();\nconst validator = new MarkerValidator();\n</code></pre>"},{"location":"advanced/api/#core-classes","title":"\ud83c\udfaf Core Classes","text":""},{"location":"advanced/api/#markergenerator","title":"MarkerGenerator","text":"<p>Generates marker files from source directories.</p> <pre><code>class MarkerGenerator {\n  constructor(config?: GeneratorConfig);\n\n  async generate(\n    sourcePath: string, \n    options?: GenerationOptions\n  ): Promise&lt;string&gt;;\n\n  async generateToFile(\n    sourcePath: string, \n    outputPath: string, \n    options?: GenerationOptions\n  ): Promise&lt;void&gt;;\n\n  async generateBatch(\n    sources: BatchSource[], \n    options?: BatchOptions\n  ): Promise&lt;BatchResult[]&gt;;\n\n  setConfig(config: GeneratorConfig): void;\n  getConfig(): GeneratorConfig;\n\n  // Event handlers\n  onProgress(callback: ProgressCallback): void;\n  onError(callback: ErrorCallback): void;\n  onComplete(callback: CompleteCallback): void;\n}\n</code></pre>"},{"location":"advanced/api/#generation-options","title":"Generation Options","text":"<pre><code>interface GenerationOptions {\n  includeMetadata?: boolean;\n  compressionLevel?: number;\n  excludePatterns?: string[];\n  includeBinaryFiles?: boolean;\n  maxFileSize?: number;\n  encoding?: string;\n  preserveTimestamps?: boolean;\n  customMetadata?: Record&lt;string, any&gt;;\n  validateBeforeGeneration?: boolean;\n  progressCallback?: ProgressCallback;\n}\n</code></pre>"},{"location":"advanced/api/#example-usage","title":"Example Usage","text":"<pre><code>const generator = new MarkerGenerator({\n  defaultEncoding: 'utf-8',\n  maxConcurrentFiles: 50\n});\n\n// Generate with options\nconst markerContent = await generator.generate('./my-project', {\n  includeMetadata: true,\n  compressionLevel: 2,\n  excludePatterns: ['node_modules/**', '*.log'],\n  customMetadata: {\n    version: '1.0.0',\n    author: 'John Doe',\n    purpose: 'API Documentation Example'\n  },\n  progressCallback: (progress) =&gt; {\n    console.log(`Progress: ${progress.percentage}% - ${progress.currentFile}`);\n  }\n});\n\n// Save to file\nawait generator.generateToFile('./my-project', './project.lookatni', {\n  compressionLevel: 3,\n  includeMetadata: true\n});\n</code></pre>"},{"location":"advanced/api/#markerextractor","title":"MarkerExtractor","text":"<p>Extracts projects from marker files.</p> <pre><code>class MarkerExtractor {\n  constructor(config?: ExtractorConfig);\n\n  async extract(\n    markerContent: string, \n    targetPath: string, \n    options?: ExtractionOptions\n  ): Promise&lt;ExtractionResult&gt;;\n\n  async extractFromFile(\n    markerPath: string, \n    targetPath: string, \n    options?: ExtractionOptions\n  ): Promise&lt;ExtractionResult&gt;;\n\n  async extractSelected(\n    markerContent: string, \n    targetPath: string, \n    selectedFiles: string[], \n    options?: ExtractionOptions\n  ): Promise&lt;ExtractionResult&gt;;\n\n  async getFileList(markerContent: string): Promise&lt;FileInfo[]&gt;;\n  async getMetadata(markerContent: string): Promise&lt;MarkerMetadata&gt;;\n\n  // Validation\n  async validateMarker(markerContent: string): Promise&lt;ValidationResult&gt;;\n\n  // Event handlers\n  onProgress(callback: ProgressCallback): void;\n  onConflict(callback: ConflictCallback): void;\n  onError(callback: ErrorCallback): void;\n}\n</code></pre>"},{"location":"advanced/api/#extraction-options","title":"Extraction Options","text":"<pre><code>interface ExtractionOptions {\n  overwriteExisting?: boolean;\n  preserveTimestamps?: boolean;\n  createDirectories?: boolean;\n  validateChecksums?: boolean;\n  conflictResolution?: 'overwrite' | 'skip' | 'prompt' | 'backup';\n  progressCallback?: ProgressCallback;\n  conflictCallback?: ConflictCallback;\n  dryRun?: boolean;\n}\n</code></pre>"},{"location":"advanced/api/#example-usage_1","title":"Example Usage","text":"<pre><code>const extractor = new MarkerExtractor();\n\n// Extract from file\nconst result = await extractor.extractFromFile('./project.lookatni', './restored', {\n  overwriteExisting: false,\n  preserveTimestamps: true,\n  validateChecksums: true,\n  conflictResolution: 'backup',\n  progressCallback: (progress) =&gt; {\n    console.log(`Extracting: ${progress.currentFile}`);\n  },\n  conflictCallback: (conflict) =&gt; {\n    console.log(`Conflict detected: ${conflict.filePath}`);\n    return 'backup'; // Create backup of existing file\n  }\n});\n\nconsole.log(`Extracted ${result.filesExtracted} files`);\nconsole.log(`Skipped ${result.filesSkipped} files due to conflicts`);\n\n// Get file list without extracting\nconst fileList = await extractor.getFileList(markerContent);\nconsole.log('Files in marker:', fileList.map(f =&gt; f.path));\n</code></pre>"},{"location":"advanced/api/#markervalidator","title":"MarkerValidator","text":"<p>Validates marker files and their integrity.</p> <pre><code>class MarkerValidator {\n  constructor(config?: ValidatorConfig);\n\n  async validate(markerContent: string): Promise&lt;ValidationResult&gt;;\n  async validateFile(markerPath: string): Promise&lt;ValidationResult&gt;;\n\n  async validateStructure(markerContent: string): Promise&lt;StructureValidation&gt;;\n  async validateChecksums(markerContent: string): Promise&lt;ChecksumValidation&gt;;\n  async validateMetadata(markerContent: string): Promise&lt;MetadataValidation&gt;;\n\n  // Custom validation rules\n  addRule(rule: ValidationRule): void;\n  removeRule(ruleName: string): void;\n  getRules(): ValidationRule[];\n}\n</code></pre>"},{"location":"advanced/api/#validation-result","title":"Validation Result","text":"<pre><code>interface ValidationResult {\n  isValid: boolean;\n  version: string;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  statistics: MarkerStatistics;\n  metadata: MarkerMetadata;\n}\n\ninterface ValidationError {\n  type: 'structure' | 'checksum' | 'metadata' | 'format';\n  message: string;\n  line?: number;\n  file?: string;\n  severity: 'error' | 'warning';\n}\n</code></pre>"},{"location":"advanced/api/#example-usage_2","title":"Example Usage","text":"<pre><code>const validator = new MarkerValidator();\n\n// Validate marker file\nconst result = await validator.validateFile('./project.lookatni');\n\nif (result.isValid) {\n  console.log('Marker is valid!');\n  console.log(`Contains ${result.statistics.fileCount} files`);\n  console.log(`Total size: ${result.statistics.totalSize} bytes`);\n} else {\n  console.log('Validation failed:');\n  result.errors.forEach(error =&gt; {\n    console.log(`- ${error.type}: ${error.message}`);\n  });\n}\n\n// Add custom validation rule\nvalidator.addRule({\n  name: 'no-large-files',\n  description: 'Ensure no files exceed 10MB',\n  validate: (marker) =&gt; {\n    const largeFiles = marker.files.filter(f =&gt; f.size &gt; 10 * 1024 * 1024);\n    if (largeFiles.length &gt; 0) {\n      return {\n        isValid: false,\n        errors: largeFiles.map(f =&gt; ({\n          type: 'structure',\n          message: `File ${f.path} exceeds 10MB limit`,\n          severity: 'error'\n        }))\n      };\n    }\n    return { isValid: true, errors: [] };\n  }\n});\n</code></pre>"},{"location":"advanced/api/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"advanced/api/#configmanager","title":"ConfigManager","text":"<p>Manages configuration across different scopes.</p> <pre><code>class ConfigManager {\n  static getInstance(): ConfigManager;\n\n  // Configuration loading\n  async loadConfig(scope?: ConfigScope): Promise&lt;LookatniConfig&gt;;\n  async saveConfig(config: LookatniConfig, scope?: ConfigScope): Promise&lt;void&gt;;\n\n  // Specific setting management\n  getSetting&lt;T&gt;(key: string, defaultValue?: T): T;\n  setSetting&lt;T&gt;(key: string, value: T, scope?: ConfigScope): Promise&lt;void&gt;;\n\n  // Configuration merging\n  mergeConfigs(...configs: LookatniConfig[]): LookatniConfig;\n\n  // Validation\n  validateConfig(config: LookatniConfig): ConfigValidationResult;\n\n  // Events\n  onConfigChanged(callback: ConfigChangeCallback): void;\n}\n</code></pre>"},{"location":"advanced/api/#configuration-scopes","title":"Configuration Scopes","text":"<pre><code>enum ConfigScope {\n  Global = 'global',      // ~/.lookatni/config.json\n  Project = 'project',    // .lookatni.json in project root\n  Workspace = 'workspace', // VS Code workspace settings\n  Runtime = 'runtime'     // Temporary runtime configuration\n}\n</code></pre>"},{"location":"advanced/api/#example-usage_3","title":"Example Usage","text":"<pre><code>const configManager = ConfigManager.getInstance();\n\n// Load configuration\nconst config = await configManager.loadConfig(ConfigScope.Project);\n\n// Update setting\nawait configManager.setSetting('compressionLevel', 3, ConfigScope.Project);\n\n// Get setting with default\nconst maxFileSize = configManager.getSetting('maxFileSize', 10485760); // 10MB default\n\n// Listen for configuration changes\nconfigManager.onConfigChanged((changes) =&gt; {\n  console.log('Configuration changed:', changes);\n});\n</code></pre>"},{"location":"advanced/api/#advanced-features","title":"\ud83c\udfa8 Advanced Features","text":""},{"location":"advanced/api/#custom-file-processors","title":"Custom File Processors","text":"<p>Extend LookAtni to handle custom file types.</p> <pre><code>interface FileProcessor {\n  name: string;\n  extensions: string[];\n  canProcess(filePath: string, content: Buffer): boolean;\n\n  process(\n    filePath: string, \n    content: Buffer, \n    context: ProcessingContext\n  ): Promise&lt;ProcessedFile&gt;;\n\n  restore(\n    processedContent: string, \n    context: RestorationContext\n  ): Promise&lt;Buffer&gt;;\n}\n\nclass CustomFileProcessor implements FileProcessor {\n  name = 'custom-processor';\n  extensions = ['.custom'];\n\n  canProcess(filePath: string, content: Buffer): boolean {\n    return path.extname(filePath) === '.custom';\n  }\n\n  async process(\n    filePath: string, \n    content: Buffer, \n    context: ProcessingContext\n  ): Promise&lt;ProcessedFile&gt; {\n    // Custom processing logic\n    const processed = await this.customTransformation(content);\n\n    return {\n      content: processed.toString('utf-8'),\n      metadata: {\n        originalSize: content.length,\n        processedSize: processed.length,\n        processingTime: Date.now() - context.startTime\n      }\n    };\n  }\n\n  async restore(\n    processedContent: string, \n    context: RestorationContext\n  ): Promise&lt;Buffer&gt; {\n    // Reverse the custom transformation\n    return await this.reverseTransformation(processedContent);\n  }\n\n  private async customTransformation(content: Buffer): Promise&lt;Buffer&gt; {\n    // Implementation specific to file type\n    return content;\n  }\n\n  private async reverseTransformation(content: string): Promise&lt;Buffer&gt; {\n    // Implementation specific to file type\n    return Buffer.from(content);\n  }\n}\n\n// Register custom processor\nconst generator = new MarkerGenerator();\ngenerator.registerProcessor(new CustomFileProcessor());\n</code></pre>"},{"location":"advanced/api/#plugin-system","title":"Plugin System","text":"<p>Create plugins to extend functionality.</p> <pre><code>interface LookatniPlugin {\n  name: string;\n  version: string;\n\n  initialize(context: PluginContext): Promise&lt;void&gt;;\n  shutdown(): Promise&lt;void&gt;;\n\n  // Hook implementations\n  beforeGeneration?(context: GenerationContext): Promise&lt;void&gt;;\n  afterGeneration?(context: GenerationContext, result: string): Promise&lt;string&gt;;\n\n  beforeExtraction?(context: ExtractionContext): Promise&lt;void&gt;;\n  afterExtraction?(context: ExtractionContext, result: ExtractionResult): Promise&lt;void&gt;;\n\n  // Command contributions\n  getCommands?(): PluginCommand[];\n\n  // Configuration contributions\n  getConfigSchema?(): ConfigSchema;\n}\n\nclass ExamplePlugin implements LookatniPlugin {\n  name = 'example-plugin';\n  version = '1.0.0';\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    console.log('Example plugin initialized');\n  }\n\n  async shutdown(): Promise&lt;void&gt; {\n    console.log('Example plugin shutdown');\n  }\n\n  async beforeGeneration(context: GenerationContext): Promise&lt;void&gt; {\n    // Add custom metadata\n    context.options.customMetadata = {\n      ...context.options.customMetadata,\n      pluginVersion: this.version\n    };\n  }\n\n  async afterGeneration(\n    context: GenerationContext, \n    result: string\n  ): Promise&lt;string&gt; {\n    // Post-process the generated marker\n    return result + '\\n// Enhanced by Example Plugin';\n  }\n\n  getCommands(): PluginCommand[] {\n    return [\n      {\n        id: 'example.custom-command',\n        title: 'Custom Command',\n        handler: this.handleCustomCommand.bind(this)\n      }\n    ];\n  }\n\n  private async handleCustomCommand(): Promise&lt;void&gt; {\n    console.log('Custom command executed');\n  }\n}\n\n// Register plugin\nconst pluginManager = PluginManager.getInstance();\nawait pluginManager.registerPlugin(new ExamplePlugin());\n</code></pre>"},{"location":"advanced/api/#stream-processing","title":"Stream Processing","text":"<p>Handle large files efficiently with streaming.</p> <pre><code>class StreamingGenerator extends MarkerGenerator {\n  async generateStream(\n    sourcePath: string, \n    outputStream: NodeJS.WritableStream,\n    options?: GenerationOptions\n  ): Promise&lt;void&gt; {\n    const scanner = new FileScanner(sourcePath, options?.excludePatterns);\n\n    // Write header\n    await this.writeHeader(outputStream, sourcePath, options);\n\n    // Process files in chunks\n    for await (const fileChunk of scanner.scanInChunks()) {\n      for (const file of fileChunk) {\n        await this.processFileToStream(file, outputStream, options);\n      }\n    }\n  }\n\n  private async processFileToStream(\n    file: FileInfo, \n    stream: NodeJS.WritableStream,\n    options?: GenerationOptions\n  ): Promise&lt;void&gt; {\n    // Stream file content to output\n    const fileStream = await this.createFileStream(file);\n\n    stream.write(`\\n// === File: ${file.path} ===\\n`);\n    stream.write(`// Size: ${file.size} | Modified: ${file.mtime}\\n`);\n\n    fileStream.pipe(stream, { end: false });\n\n    return new Promise((resolve, reject) =&gt; {\n      fileStream.on('end', resolve);\n      fileStream.on('error', reject);\n    });\n  }\n}\n</code></pre>"},{"location":"advanced/api/#analytics-and-monitoring","title":"\ud83d\udcca Analytics and Monitoring","text":""},{"location":"advanced/api/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>class PerformanceMonitor {\n  private metrics: Map&lt;string, Metric&gt; = new Map();\n\n  startTiming(operation: string): TimingToken {\n    const token = new TimingToken(operation);\n    return token;\n  }\n\n  recordMetric(name: string, value: number, unit: string): void {\n    const metric = this.metrics.get(name) || new Metric(name, unit);\n    metric.addValue(value);\n    this.metrics.set(name, metric);\n  }\n\n  getMetrics(): Map&lt;string, Metric&gt; {\n    return new Map(this.metrics);\n  }\n\n  generateReport(): PerformanceReport {\n    return {\n      timestamp: new Date(),\n      metrics: Array.from(this.metrics.values()),\n      summary: this.calculateSummary()\n    };\n  }\n}\n\n// Usage with generator\nconst monitor = new PerformanceMonitor();\nconst generator = new MarkerGenerator();\n\ngenerator.onProgress((progress) =&gt; {\n  monitor.recordMetric('files_processed', 1, 'count');\n  monitor.recordMetric('bytes_processed', progress.bytesProcessed, 'bytes');\n});\n\nconst timing = monitor.startTiming('generation');\nconst marker = await generator.generate('./project');\ntiming.end();\n\nconst report = monitor.generateReport();\nconsole.log('Performance Report:', report);\n</code></pre>"},{"location":"advanced/api/#usage-analytics","title":"Usage Analytics","text":"<pre><code>interface UsageTracker {\n  trackGeneration(options: GenerationOptions, result: GenerationResult): void;\n  trackExtraction(options: ExtractionOptions, result: ExtractionResult): void;\n  trackValidation(result: ValidationResult): void;\n\n  getUsageReport(timeframe: TimeRange): UsageReport;\n  exportAnalytics(format: 'json' | 'csv' | 'xlsx'): Promise&lt;Buffer&gt;;\n}\n\nclass LocalUsageTracker implements UsageTracker {\n  private events: AnalyticsEvent[] = [];\n\n  trackGeneration(options: GenerationOptions, result: GenerationResult): void {\n    this.events.push({\n      type: 'generation',\n      timestamp: new Date(),\n      data: { options, result }\n    });\n  }\n\n  // ... other tracking methods\n\n  getUsageReport(timeframe: TimeRange): UsageReport {\n    const relevantEvents = this.events.filter(event =&gt; \n      event.timestamp &gt;= timeframe.start &amp;&amp; event.timestamp &lt;= timeframe.end\n    );\n\n    return {\n      timeframe,\n      totalOperations: relevantEvents.length,\n      operationsByType: this.groupByType(relevantEvents),\n      averageFileSize: this.calculateAverageFileSize(relevantEvents),\n      popularPatterns: this.findPopularPatterns(relevantEvents)\n    };\n  }\n}\n</code></pre>"},{"location":"advanced/api/#security-features","title":"\ud83d\udd10 Security Features","text":""},{"location":"advanced/api/#access-control","title":"Access Control","text":"<pre><code>interface AccessController {\n  checkPermission(operation: string, resource: string, user: string): Promise&lt;boolean&gt;;\n  grantPermission(permission: Permission): Promise&lt;void&gt;;\n  revokePermission(permissionId: string): Promise&lt;void&gt;;\n}\n\nclass RoleBasedAccessController implements AccessController {\n  private permissions: Map&lt;string, Permission[]&gt; = new Map();\n\n  async checkPermission(\n    operation: string, \n    resource: string, \n    user: string\n  ): Promise&lt;boolean&gt; {\n    const userPermissions = this.permissions.get(user) || [];\n\n    return userPermissions.some(permission =&gt;\n      permission.operation === operation &amp;&amp;\n      this.matchesResource(permission.resource, resource)\n    );\n  }\n\n  // ... implementation details\n}\n\n// Usage\nconst accessController = new RoleBasedAccessController();\nconst generator = new MarkerGenerator();\n\ngenerator.setAccessController(accessController);\n\n// This will check permissions before generation\nawait generator.generate('./project', {\n  user: 'john.doe',\n  requirePermissions: ['read:project', 'generate:marker']\n});\n</code></pre>"},{"location":"advanced/api/#encryption-support","title":"Encryption Support","text":"<pre><code>interface EncryptionProvider {\n  encrypt(data: string, key: string): Promise&lt;string&gt;;\n  decrypt(encryptedData: string, key: string): Promise&lt;string&gt;;\n}\n\nclass AESEncryptionProvider implements EncryptionProvider {\n  async encrypt(data: string, key: string): Promise&lt;string&gt; {\n    const cipher = crypto.createCipher('aes-256-gcm', key);\n    let encrypted = cipher.update(data, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return encrypted;\n  }\n\n  async decrypt(encryptedData: string, key: string): Promise&lt;string&gt; {\n    const decipher = crypto.createDecipher('aes-256-gcm', key);\n    let decrypted = decipher.update(encryptedData, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n}\n\n// Usage\nconst encryptionProvider = new AESEncryptionProvider();\nconst generator = new MarkerGenerator();\n\ngenerator.setEncryptionProvider(encryptionProvider);\n\nconst encryptedMarker = await generator.generate('./project', {\n  encrypt: true,\n  encryptionKey: 'my-secret-key'\n});\n</code></pre>"},{"location":"advanced/api/#api-reference-summary","title":"\ud83d\udcda API Reference Summary","text":""},{"location":"advanced/api/#core-classes_1","title":"Core Classes","text":"<ul> <li>MarkerGenerator: Generate markers from projects</li> <li>MarkerExtractor: Extract projects from markers  </li> <li>MarkerValidator: Validate marker integrity</li> <li>ConfigManager: Manage configuration settings</li> </ul>"},{"location":"advanced/api/#extension-points","title":"Extension Points","text":"<ul> <li>FileProcessor: Custom file type handling</li> <li>LookatniPlugin: Extend functionality with plugins</li> <li>AccessController: Implement access control</li> <li>EncryptionProvider: Add encryption support</li> </ul>"},{"location":"advanced/api/#utilities","title":"Utilities","text":"<ul> <li>PerformanceMonitor: Track performance metrics</li> <li>UsageTracker: Analytics and usage tracking</li> <li>StreamingGenerator: Handle large files efficiently</li> </ul> <p>This comprehensive API enables developers to build powerful integrations and extensions on top of the LookAtni File Markers system.</p>"},{"location":"advanced/architecture/","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>Deep dive into LookAtni File Markers' architecture, design principles, and technical implementation.</p>"},{"location":"advanced/architecture/#system-architecture","title":"System Architecture","text":""},{"location":"advanced/architecture/#high-level-overview","title":"High-Level Overview","text":"<pre><code>graph TB\n    A[VS Code Extension] --&gt; B[Core Engine]\n    C[CLI Tool] --&gt; B\n    D[Web Interface] --&gt; B\n\n    B --&gt; E[File Scanner]\n    B --&gt; F[Marker Generator]\n    B --&gt; G[Validator]\n    B --&gt; H[Extractor]\n\n    E --&gt; I[File System]\n    F --&gt; J[Output Engine]\n    G --&gt; K[Validation Engine]\n    H --&gt; L[Reconstruction Engine]\n\n    I --&gt; M[(File Metadata)]\n    J --&gt; N[Marker Files]\n    K --&gt; O[Validation Reports]\n    L --&gt; P[Extracted Projects]</code></pre>"},{"location":"advanced/architecture/#core-components","title":"Core Components","text":""},{"location":"advanced/architecture/#1-file-scanner-filescanner","title":"1. File Scanner (<code>FileScanner</code>)","text":"<p>Purpose: Discovers and analyzes project files</p> <pre><code>interface FileScanner {\n  scan(options: ScanOptions): Promise&lt;FileTree&gt;;\n  analyzeFile(path: string): Promise&lt;FileMetadata&gt;;\n  detectDependencies(file: FileInfo): Promise&lt;Dependency[]&gt;;\n}\n\ninterface ScanOptions {\n  source: string;\n  include: string[];\n  exclude: string[];\n  followSymlinks: boolean;\n  maxDepth: number;\n  parallel: boolean;\n}\n</code></pre> <p>Key Features: - Recursive directory traversal with glob pattern support - Dependency analysis for import/require statements - File type detection using extension and content analysis - Metadata extraction (size, modified date, permissions) - Parallel processing for performance optimization</p>"},{"location":"advanced/architecture/#2-marker-generator-markergenerator","title":"2. Marker Generator (<code>MarkerGenerator</code>)","text":"<p>Purpose: Creates structured marker files from scanned projects</p> <pre><code>interface MarkerGenerator {\n  generate(fileTree: FileTree, options: GenerateOptions): Promise&lt;MarkerFile&gt;;\n  createMarker(file: FileInfo): MarkerEntry;\n  compress(content: string): Promise&lt;Buffer&gt;;\n}\n\ninterface MarkerEntry {\n  path: string;\n  metadata: FileMetadata;\n  content: string;\n  encoding: string;\n  boundaries: MarkerBoundaries;\n}\n</code></pre> <p>Marker Format Structure: <pre><code>\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\ud83d\udcc1 PROJECT: {project-name}\n\ud83d\uddc2\ufe0f FILE: {relative-path}\n\ud83d\udcca SIZE: {file-size} | \ud83d\udcc5 MODIFIED: {iso-timestamp}\n\ud83d\udd27 TYPE: {file-type} | \ud83d\udcbe ENCODING: {encoding}\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n{file-content}\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n</code></pre></p>"},{"location":"advanced/architecture/#3-validator-validationengine","title":"3. Validator (<code>ValidationEngine</code>)","text":"<p>Purpose: Ensures marker file integrity and consistency</p> <pre><code>interface ValidationEngine {\n  validate(markerFile: MarkerFile): Promise&lt;ValidationResult&gt;;\n  validateStructure(content: string): StructureValidation;\n  validateDependencies(files: MarkerEntry[]): DependencyValidation;\n  suggestFixes(errors: ValidationError[]): FixSuggestion[];\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  score: number;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  suggestions: FixSuggestion[];\n  metrics: ValidationMetrics;\n}\n</code></pre>"},{"location":"advanced/architecture/#4-extractor-extractionengine","title":"4. Extractor (<code>ExtractionEngine</code>)","text":"<p>Purpose: Reconstructs projects from marker files</p> <pre><code>interface ExtractionEngine {\n  extract(markerFile: MarkerFile, options: ExtractOptions): Promise&lt;ExtractionResult&gt;;\n  parseMarkers(content: string): MarkerEntry[];\n  reconstructFile(entry: MarkerEntry, outputPath: string): Promise&lt;void&gt;;\n  handleConflicts(conflicts: FileConflict[]): Promise&lt;ConflictResolution[]&gt;;\n}\n\ninterface ExtractOptions {\n  outputDirectory: string;\n  overwriteExisting: boolean;\n  createBackups: boolean;\n  preserveTimestamps: boolean;\n  filterPatterns?: string[];\n}\n</code></pre>"},{"location":"advanced/architecture/#design-principles","title":"Design Principles","text":""},{"location":"advanced/architecture/#1-portability-first","title":"1. Portability First","text":"<p>All marker files are designed to be completely self-contained:</p> <ul> <li>Plain text format - readable across all platforms</li> <li>No external dependencies - everything needed is embedded</li> <li>UTF-8 encoding - universal character support</li> <li>Cross-platform paths - normalized path separators</li> </ul>"},{"location":"advanced/architecture/#2-integrity-preservation","title":"2. Integrity Preservation","text":"<p>Ensuring perfect fidelity during the generate \u2192 extract cycle:</p> <pre><code>class IntegrityManager {\n  // Checksum validation\n  generateChecksum(content: string): string {\n    return crypto.createHash('sha256').update(content).digest('hex');\n  }\n\n  // Binary file handling\n  encodeBase64(buffer: Buffer): string {\n    return buffer.toString('base64');\n  }\n\n  // Metadata preservation\n  preserveMetadata(source: string, target: string): void {\n    const stats = fs.statSync(source);\n    fs.utimesSync(target, stats.atime, stats.mtime);\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#3-performance-optimization","title":"3. Performance Optimization","text":"<p>Scalable architecture for projects of all sizes:</p> <pre><code>class PerformanceOptimizer {\n  // Streaming for large files\n  async streamLargeFile(path: string): Promise&lt;AsyncIterable&lt;string&gt;&gt; {\n    const stream = fs.createReadStream(path, { encoding: 'utf8' });\n    return this.createChunkedIterator(stream);\n  }\n\n  // Parallel processing\n  async processInParallel&lt;T&gt;(\n    items: T[], \n    processor: (item: T) =&gt; Promise&lt;any&gt;,\n    concurrency: number = 4\n  ): Promise&lt;any[]&gt; {\n    // Implementation with worker pool\n  }\n\n  // Memory management\n  cleanupTempFiles(): void {\n    // Cleanup temporary files and caches\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#4-extensibility","title":"4. Extensibility","text":"<p>Plugin architecture for custom functionality:</p> <pre><code>interface Plugin {\n  name: string;\n  version: string;\n  hooks: PluginHooks;\n}\n\ninterface PluginHooks {\n  beforeScan?(options: ScanOptions): Promise&lt;ScanOptions&gt;;\n  afterScan?(fileTree: FileTree): Promise&lt;FileTree&gt;;\n  beforeGenerate?(entries: MarkerEntry[]): Promise&lt;MarkerEntry[]&gt;;\n  afterGenerate?(markerFile: MarkerFile): Promise&lt;MarkerFile&gt;;\n  beforeValidate?(content: string): Promise&lt;string&gt;;\n  afterValidate?(result: ValidationResult): Promise&lt;ValidationResult&gt;;\n}\n</code></pre>"},{"location":"advanced/architecture/#technical-implementation","title":"Technical Implementation","text":""},{"location":"advanced/architecture/#file-processing-pipeline","title":"File Processing Pipeline","text":"<pre><code>sequenceDiagram\n    participant UI as User Interface\n    participant Core as Core Engine\n    participant Scanner as File Scanner\n    participant Generator as Marker Generator\n    participant Validator as Validator\n    participant FS as File System\n\n    UI-&gt;&gt;Core: Generate Request\n    Core-&gt;&gt;Scanner: Scan Directory\n    Scanner-&gt;&gt;FS: Read File Tree\n    FS--&gt;&gt;Scanner: File Metadata\n    Scanner--&gt;&gt;Core: File Tree\n    Core-&gt;&gt;Generator: Generate Markers\n    Generator-&gt;&gt;FS: Read File Contents\n    FS--&gt;&gt;Generator: File Data\n    Generator--&gt;&gt;Core: Marker File\n    Core-&gt;&gt;Validator: Validate Markers\n    Validator--&gt;&gt;Core: Validation Result\n    Core--&gt;&gt;UI: Generation Complete</code></pre>"},{"location":"advanced/architecture/#data-structures","title":"Data Structures","text":""},{"location":"advanced/architecture/#filetree-structure","title":"FileTree Structure","text":"<pre><code>interface FileTree {\n  root: string;\n  files: Map&lt;string, FileInfo&gt;;\n  directories: Map&lt;string, DirectoryInfo&gt;;\n  dependencies: DependencyGraph;\n  metadata: ProjectMetadata;\n}\n\ninterface FileInfo {\n  path: string;\n  relativePath: string;\n  size: number;\n  modified: Date;\n  created: Date;\n  type: FileType;\n  encoding: string;\n  checksum: string;\n  dependencies: string[];\n}\n\ninterface DirectoryInfo {\n  path: string;\n  relativePath: string;\n  fileCount: number;\n  totalSize: number;\n  subdirectories: string[];\n}\n</code></pre>"},{"location":"advanced/architecture/#marker-file-format","title":"Marker File Format","text":"<pre><code>interface MarkerFile {\n  version: string;\n  metadata: ProjectMetadata;\n  entries: MarkerEntry[];\n  dependencies: DependencyGraph;\n  checksum: string;\n  compressionMethod?: CompressionMethod;\n}\n\ninterface ProjectMetadata {\n  name: string;\n  version?: string;\n  description?: string;\n  author?: string;\n  generated: Date;\n  totalFiles: number;\n  totalSize: number;\n  lookatniVersion: string;\n}\n</code></pre>"},{"location":"advanced/architecture/#storage-compression","title":"Storage &amp; Compression","text":""},{"location":"advanced/architecture/#compression-algorithms","title":"Compression Algorithms","text":"<p>LookAtni supports multiple compression methods:</p> <pre><code>enum CompressionMethod {\n  NONE = 'none',\n  GZIP = 'gzip',\n  BROTLI = 'brotli',\n  LZ4 = 'lz4'\n}\n\nclass CompressionManager {\n  async compress(content: string, method: CompressionMethod): Promise&lt;Buffer&gt; {\n    switch (method) {\n      case CompressionMethod.GZIP:\n        return zlib.gzipSync(content);\n      case CompressionMethod.BROTLI:\n        return zlib.brotliCompressSync(content);\n      case CompressionMethod.LZ4:\n        return this.lz4Compress(content);\n      default:\n        return Buffer.from(content);\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#binary-file-handling","title":"Binary File Handling","text":"<pre><code>class BinaryFileHandler {\n  detectBinaryFile(path: string): boolean {\n    const buffer = fs.readFileSync(path, { flag: 'r' });\n    return this.containsNullBytes(buffer.slice(0, 8192));\n  }\n\n  encodeBinaryFile(path: string): string {\n    const buffer = fs.readFileSync(path);\n    return buffer.toString('base64');\n  }\n\n  decodeBinaryFile(encoded: string, outputPath: string): void {\n    const buffer = Buffer.from(encoded, 'base64');\n    fs.writeFileSync(outputPath, buffer);\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"advanced/architecture/#benchmarks","title":"Benchmarks","text":"Project Size Files Generation Time Validation Time Extraction Time Small (1-50) 50 &lt; 1s &lt; 0.5s &lt; 1s Medium (51-500) 500 2-5s 1-2s 2-4s Large (501-2000) 2000 5-15s 3-8s 5-12s Enterprise (2000+) 5000+ 15-60s 8-20s 15-45s"},{"location":"advanced/architecture/#memory-usage","title":"Memory Usage","text":"<pre><code>class MemoryManager {\n  private maxMemory: number;\n  private currentUsage: number = 0;\n\n  checkMemoryUsage(): MemoryInfo {\n    const used = process.memoryUsage();\n    return {\n      heapUsed: used.heapUsed / 1024 / 1024, // MB\n      heapTotal: used.heapTotal / 1024 / 1024,\n      external: used.external / 1024 / 1024,\n      rss: used.rss / 1024 / 1024\n    };\n  }\n\n  enforceMemoryLimit(): void {\n    const usage = this.checkMemoryUsage();\n    if (usage.heapUsed &gt; this.maxMemory) {\n      this.triggerGarbageCollection();\n      this.clearCaches();\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#error-handling-recovery","title":"Error Handling &amp; Recovery","text":""},{"location":"advanced/architecture/#error-categories","title":"Error Categories","text":"<pre><code>enum ErrorCategory {\n  FILE_SYSTEM = 'filesystem',\n  VALIDATION = 'validation',\n  PARSING = 'parsing',\n  MEMORY = 'memory',\n  NETWORK = 'network',\n  USER_INPUT = 'user_input'\n}\n\nclass ErrorHandler {\n  handleError(error: Error, category: ErrorCategory): ErrorResponse {\n    switch (category) {\n      case ErrorCategory.FILE_SYSTEM:\n        return this.handleFileSystemError(error);\n      case ErrorCategory.VALIDATION:\n        return this.handleValidationError(error);\n      case ErrorCategory.MEMORY:\n        return this.handleMemoryError(error);\n      default:\n        return this.handleGenericError(error);\n    }\n  }\n\n  suggestRecovery(error: ErrorResponse): RecoveryAction[] {\n    // Provide actionable recovery suggestions\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#recovery-mechanisms","title":"Recovery Mechanisms","text":"<pre><code>class RecoveryManager {\n  async attemptRecovery(error: ErrorResponse): Promise&lt;boolean&gt; {\n    for (const action of error.recoveryActions) {\n      try {\n        await this.executeRecoveryAction(action);\n        return true;\n      } catch (recoveryError) {\n        this.logRecoveryFailure(action, recoveryError);\n      }\n    }\n    return false;\n  }\n\n  createCheckpoint(): Checkpoint {\n    // Save current state for rollback\n  }\n\n  rollbackToCheckpoint(checkpoint: Checkpoint): void {\n    // Restore previous state\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"advanced/architecture/#data-protection","title":"Data Protection","text":"<pre><code>class SecurityManager {\n  scanForSensitiveData(content: string): SensitiveDataWarning[] {\n    const patterns = [\n      /(?:password|pwd|pass)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi,\n      /(?:api[_-]?key|apikey)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi,\n      /(?:secret|token)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi,\n      /(?:auth[_-]?token)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi\n    ];\n\n    return this.findMatches(content, patterns);\n  }\n\n  sanitizeOutput(content: string): string {\n    // Remove or mask sensitive data\n    return content.replace(this.getSanitizationPatterns(), '[REDACTED]');\n  }\n}\n</code></pre>"},{"location":"advanced/architecture/#access-control","title":"Access Control","text":"<pre><code>interface AccessControl {\n  validatePermissions(path: string): boolean;\n  restrictFileTypes(extension: string): boolean;\n  checkFileSize(size: number): boolean;\n  validatePath(path: string): boolean;\n}\n</code></pre> <p>Next: Explore TypeScript Scripts for advanced automation.</p>"},{"location":"advanced/development/","title":"\ud83d\udee0\ufe0f Development Guide","text":"<p>Comprehensive guide for developers who want to contribute to LookAtni File Markers or build upon its foundation.</p>"},{"location":"advanced/development/#getting-started-with-development","title":"\ud83d\ude80 Getting Started with Development","text":""},{"location":"advanced/development/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"advanced/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18.x or higher</li> <li>npm 8.x or higher  </li> <li>VS Code (recommended)</li> <li>Git for version control</li> <li>TypeScript knowledge</li> </ul>"},{"location":"advanced/development/#clone-and-setup","title":"Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/rafa-mori/lookatni-file-markers.git\ncd lookatni-file-markers\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run tests\nnpm test\n\n# Start development mode\nnpm run watch\n</code></pre>"},{"location":"advanced/development/#development-scripts","title":"Development Scripts","text":"<pre><code># TypeScript compilation (watch mode)\nnpm run watch:tsc\n\n# Bundle with esbuild (watch mode)  \nnpm run watch:esbuild\n\n# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format\n\n# Generate documentation\nnpm run docs\n\n# Package extension\nnpm run package\n</code></pre>"},{"location":"advanced/development/#project-structure-deep-dive","title":"Project Structure Deep Dive","text":"<pre><code>lookatni-file-markers/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 extension.ts              # VS Code extension entry point\n\u2502   \u251c\u2500\u2500 commands/                 # Extension commands\n\u2502   \u2502   \u251c\u2500\u2500 generateMarkers.ts\n\u2502   \u2502   \u251c\u2500\u2500 extractFiles.ts\n\u2502   \u2502   \u251c\u2500\u2500 validateMarkers.ts\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 utils/                    # Core utilities\n\u2502   \u2502   \u251c\u2500\u2500 markerGenerator.ts    # Core generation logic\n\u2502   \u2502   \u251c\u2500\u2500 markerExtractor.ts    # Core extraction logic\n\u2502   \u2502   \u251c\u2500\u2500 markerParser.ts       # Marker file parsing\n\u2502   \u2502   \u251c\u2500\u2500 configManager.ts      # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 logger.ts             # Logging system\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 views/                    # VS Code UI components\n\u2502   \u2502   \u251c\u2500\u2500 explorerProvider.ts   # Tree view provider\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 scripts/                  # CLI and automation scripts\n\u2502   \u2502   \u251c\u2500\u2500 cli.ts                # Command-line interface\n\u2502   \u2502   \u251c\u2500\u2500 demo.ts               # Demo generation\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 test/                     # Test files\n\u2502       \u251c\u2500\u2500 unit/                 # Unit tests\n\u2502       \u251c\u2500\u2500 integration/          # Integration tests\n\u2502       \u2514\u2500\u2500 fixtures/             # Test data\n\u251c\u2500\u2500 docs/                         # Documentation\n\u251c\u2500\u2500 package.json                  # Extension manifest\n\u251c\u2500\u2500 tsconfig.json                 # TypeScript configuration\n\u251c\u2500\u2500 eslint.config.mjs            # ESLint configuration\n\u251c\u2500\u2500 esbuild.js                   # Build configuration\n\u2514\u2500\u2500 .github/                     # GitHub workflows\n</code></pre>"},{"location":"advanced/development/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"advanced/development/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[VS Code Extension] --&gt; B[Command Layer]\n    B --&gt; C[Core Logic Layer]\n    C --&gt; D[File System Layer]\n\n    B --&gt; E[UI Components]\n    E --&gt; F[Tree View Provider]\n    E --&gt; G[Status Bar]\n    E --&gt; H[Webview Panels]\n\n    C --&gt; I[Marker Generator]\n    C --&gt; J[Marker Extractor]  \n    C --&gt; K[Marker Validator]\n    C --&gt; L[Config Manager]\n\n    I --&gt; M[File Scanner]\n    I --&gt; N[Content Processor]\n    I --&gt; O[Binary Encoder]\n\n    J --&gt; P[Parser]\n    J --&gt; Q[Content Decoder]\n    J --&gt; R[File Writer]</code></pre>"},{"location":"advanced/development/#data-flow","title":"Data Flow","text":""},{"location":"advanced/development/#generation-flow","title":"Generation Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant VSCode\n    participant Extension\n    participant Generator\n    participant FileSystem\n\n    User-&gt;&gt;VSCode: Execute Generate Command\n    VSCode-&gt;&gt;Extension: Invoke generateMarkers\n    Extension-&gt;&gt;Generator: generate(sourcePath, options)\n    Generator-&gt;&gt;FileSystem: Scan directory\n    FileSystem--&gt;&gt;Generator: File list\n    Generator-&gt;&gt;FileSystem: Read file contents\n    FileSystem--&gt;&gt;Generator: File data\n    Generator-&gt;&gt;Generator: Process and encode\n    Generator--&gt;&gt;Extension: Marker content\n    Extension-&gt;&gt;FileSystem: Save marker file\n    Extension--&gt;&gt;VSCode: Show success message</code></pre>"},{"location":"advanced/development/#extraction-flow","title":"Extraction Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant VSCode  \n    participant Extension\n    participant Extractor\n    participant FileSystem\n\n    User-&gt;&gt;VSCode: Execute Extract Command\n    VSCode-&gt;&gt;Extension: Invoke extractFiles\n    Extension-&gt;&gt;Extractor: extract(markerPath, targetPath)\n    Extractor-&gt;&gt;FileSystem: Read marker file\n    FileSystem--&gt;&gt;Extractor: Marker content\n    Extractor-&gt;&gt;Extractor: Parse and decode\n    Extractor-&gt;&gt;FileSystem: Create directories\n    Extractor-&gt;&gt;FileSystem: Write files\n    Extension--&gt;&gt;VSCode: Show completion status</code></pre>"},{"location":"advanced/development/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"advanced/development/#test-organization","title":"Test Organization","text":"<pre><code>// test/unit/markerGenerator.test.ts\nimport { describe, it, expect, beforeEach, afterEach } from 'mocha';\nimport { MarkerGenerator } from '../../src/utils/markerGenerator';\nimport { TestFileSystem } from '../helpers/testFileSystem';\n\ndescribe('MarkerGenerator', () =&gt; {\n  let generator: MarkerGenerator;\n  let testFs: TestFileSystem;\n\n  beforeEach(() =&gt; {\n    generator = new MarkerGenerator();\n    testFs = new TestFileSystem();\n  });\n\n  afterEach(() =&gt; {\n    testFs.cleanup();\n  });\n\n  describe('generate()', () =&gt; {\n    it('should generate markers for simple project', async () =&gt; {\n      // Arrange\n      await testFs.createFile('src/index.js', 'console.log(\"Hello\");');\n      await testFs.createFile('package.json', '{\"name\": \"test\"}');\n\n      // Act\n      const result = await generator.generate(testFs.rootPath);\n\n      // Assert\n      expect(result).to.include('=== File: src/index.js ===');\n      expect(result).to.include('console.log(\"Hello\");');\n      expect(result).to.include('=== File: package.json ===');\n    });\n\n    it('should respect exclude patterns', async () =&gt; {\n      // Arrange\n      await testFs.createFile('src/index.js', 'console.log(\"Hello\");');\n      await testFs.createFile('node_modules/lib.js', 'module.exports = {};');\n\n      // Act\n      const result = await generator.generate(testFs.rootPath, {\n        excludePatterns: ['node_modules/**']\n      });\n\n      // Assert\n      expect(result).to.include('src/index.js');\n      expect(result).to.not.include('node_modules/lib.js');\n    });\n\n    it('should handle binary files correctly', async () =&gt; {\n      // Arrange\n      const binaryData = Buffer.from([0x89, 0x50, 0x4E, 0x47]); // PNG header\n      await testFs.createBinaryFile('image.png', binaryData);\n\n      // Act\n      const result = await generator.generate(testFs.rootPath);\n\n      // Assert\n      expect(result).to.include('=== Binary File: image.png ===');\n      expect(result).to.include('iVBORw0KGgo'); // Base64 encoded\n    });\n  });\n\n  describe('error handling', () =&gt; {\n    it('should handle permission errors gracefully', async () =&gt; {\n      // Test permission error handling\n      await testFs.createProtectedFile('protected.txt');\n\n      const result = await generator.generate(testFs.rootPath);\n\n      // Should include warning about skipped file\n      expect(result).to.include('// Warning: Could not read protected.txt');\n    });\n\n    it('should handle large files appropriately', async () =&gt; {\n      // Test with file exceeding max size\n      const largeContent = 'x'.repeat(50 * 1024 * 1024); // 50MB\n      await testFs.createFile('large.txt', largeContent);\n\n      const result = await generator.generate(testFs.rootPath, {\n        maxFileSize: 10 * 1024 * 1024 // 10MB limit\n      });\n\n      expect(result).to.include('// Warning: File large.txt exceeds size limit');\n    });\n  });\n});\n</code></pre>"},{"location":"advanced/development/#integration-tests","title":"Integration Tests","text":"<pre><code>// test/integration/endToEnd.test.ts\nimport { describe, it, expect } from 'mocha';\nimport { MarkerGenerator } from '../../src/utils/markerGenerator';\nimport { MarkerExtractor } from '../../src/utils/markerExtractor';\nimport { TestProject } from '../helpers/testProject';\n\ndescribe('End-to-End Tests', () =&gt; {\n  it('should generate and extract a complete project', async () =&gt; {\n    // Create test project\n    const project = new TestProject();\n    await project.create({\n      'package.json': '{\"name\": \"test-project\", \"version\": \"1.0.0\"}',\n      'src/index.js': 'console.log(\"Hello World\");',\n      'src/utils/helper.js': 'module.exports = { helper: () =&gt; {} };',\n      'README.md': '# Test Project\\n\\nThis is a test.',\n      'assets/logo.png': Buffer.from('fake-png-data')\n    });\n\n    // Generate markers\n    const generator = new MarkerGenerator();\n    const markerContent = await generator.generate(project.path);\n\n    // Extract to new location\n    const extractor = new MarkerExtractor();\n    const extractPath = project.createTempDir();\n    await extractor.extract(markerContent, extractPath);\n\n    // Verify extracted files match original\n    await project.verifyExtracted(extractPath);\n  });\n\n  it('should handle complex project structures', async () =&gt; {\n    const project = new TestProject();\n    await project.createComplexStructure();\n\n    const generator = new MarkerGenerator();\n    const extractor = new MarkerExtractor();\n\n    const marker = await generator.generate(project.path);\n    const extractPath = project.createTempDir();\n    await extractor.extract(marker, extractPath);\n\n    await project.verifyComplexStructure(extractPath);\n  });\n});\n</code></pre>"},{"location":"advanced/development/#vs-code-extension-tests","title":"VS Code Extension Tests","text":"<pre><code>// test/integration/extension.test.ts\nimport * as vscode from 'vscode';\nimport { describe, it, expect, before } from 'mocha';\n\ndescribe('Extension Integration', () =&gt; {\n  before(async () =&gt; {\n    // Ensure extension is activated\n    const extension = vscode.extensions.getExtension('rafa-mori.lookatni-file-markers');\n    if (extension &amp;&amp; !extension.isActive) {\n      await extension.activate();\n    }\n  });\n\n  it('should register all commands', async () =&gt; {\n    const commands = await vscode.commands.getCommands();\n\n    const expectedCommands = [\n      'lookatni.generateMarkers',\n      'lookatni.extractFiles',\n      'lookatni.validateMarkers',\n      'lookatni.quickDemo',\n      'lookatni.openCLI'\n    ];\n\n    expectedCommands.forEach(command =&gt; {\n      expect(commands).to.include(command);\n    });\n  });\n\n  it('should execute generate command successfully', async () =&gt; {\n    // Create test workspace\n    const workspaceUri = vscode.Uri.file('/tmp/test-workspace');\n    await vscode.workspace.fs.createDirectory(workspaceUri);\n\n    // Execute command\n    const result = await vscode.commands.executeCommand(\n      'lookatni.generateMarkers',\n      workspaceUri\n    );\n\n    expect(result).to.be.true;\n  });\n});\n</code></pre>"},{"location":"advanced/development/#test-helpers","title":"Test Helpers","text":"<pre><code>// test/helpers/testFileSystem.ts\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as os from 'os';\n\nexport class TestFileSystem {\n  public readonly rootPath: string;\n\n  constructor() {\n    this.rootPath = fs.mkdtempSync(path.join(os.tmpdir(), 'lookatni-test-'));\n  }\n\n  async createFile(relativePath: string, content: string): Promise&lt;void&gt; {\n    const fullPath = path.join(this.rootPath, relativePath);\n    await fs.ensureDir(path.dirname(fullPath));\n    await fs.writeFile(fullPath, content, 'utf-8');\n  }\n\n  async createBinaryFile(relativePath: string, data: Buffer): Promise&lt;void&gt; {\n    const fullPath = path.join(this.rootPath, relativePath);\n    await fs.ensureDir(path.dirname(fullPath));\n    await fs.writeFile(fullPath, data);\n  }\n\n  async createProtectedFile(relativePath: string): Promise&lt;void&gt; {\n    await this.createFile(relativePath, 'protected content');\n    const fullPath = path.join(this.rootPath, relativePath);\n    await fs.chmod(fullPath, 0o000); // No permissions\n  }\n\n  async readFile(relativePath: string): Promise&lt;string&gt; {\n    const fullPath = path.join(this.rootPath, relativePath);\n    return await fs.readFile(fullPath, 'utf-8');\n  }\n\n  async exists(relativePath: string): Promise&lt;boolean&gt; {\n    const fullPath = path.join(this.rootPath, relativePath);\n    return await fs.pathExists(fullPath);\n  }\n\n  cleanup(): void {\n    fs.removeSync(this.rootPath);\n  }\n}\n</code></pre>"},{"location":"advanced/development/#core-development-patterns","title":"\ud83d\udd27 Core Development Patterns","text":""},{"location":"advanced/development/#error-handling-strategy","title":"Error Handling Strategy","text":"<pre><code>// src/utils/errorHandling.ts\nexport class LookatniError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string,\n    public readonly context?: Record&lt;string, any&gt;\n  ) {\n    super(message);\n    this.name = 'LookatniError';\n  }\n}\n\nexport class FileProcessingError extends LookatniError {\n  constructor(filePath: string, originalError: Error) {\n    super(\n      `Failed to process file: ${filePath}`,\n      'FILE_PROCESSING_ERROR',\n      { filePath, originalError: originalError.message }\n    );\n  }\n}\n\nexport class ValidationError extends LookatniError {\n  constructor(message: string, line?: number) {\n    super(message, 'VALIDATION_ERROR', { line });\n  }\n}\n\n// Usage in generator\nexport class MarkerGenerator {\n  async generate(sourcePath: string, options?: GenerationOptions): Promise&lt;string&gt; {\n    try {\n      return await this.performGeneration(sourcePath, options);\n    } catch (error) {\n      if (error instanceof LookatniError) {\n        throw error;\n      } else {\n        throw new LookatniError(\n          `Unexpected error during generation: ${error.message}`,\n          'GENERATION_ERROR',\n          { sourcePath, originalError: error.message }\n        );\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/development/#configuration-management","title":"Configuration Management","text":"<pre><code>// src/utils/configManager.ts\ninterface ConfigValue {\n  value: any;\n  source: 'default' | 'global' | 'project' | 'runtime';\n  timestamp: Date;\n}\n\nexport class ConfigManager {\n  private configCache = new Map&lt;string, ConfigValue&gt;();\n  private watchers: ConfigWatcher[] = [];\n\n  async getValue&lt;T&gt;(key: string, defaultValue?: T): Promise&lt;T&gt; {\n    // Check cache first\n    const cached = this.configCache.get(key);\n    if (cached &amp;&amp; this.isCacheValid(cached)) {\n      return cached.value;\n    }\n\n    // Load from sources in priority order\n    const value = await this.loadFromSources(key, defaultValue);\n\n    // Cache the result\n    this.configCache.set(key, {\n      value,\n      source: this.determineSource(key),\n      timestamp: new Date()\n    });\n\n    return value;\n  }\n\n  async setValue&lt;T&gt;(key: string, value: T, scope: ConfigScope): Promise&lt;void&gt; {\n    await this.writeToScope(key, value, scope);\n\n    // Update cache\n    this.configCache.set(key, {\n      value,\n      source: scope,\n      timestamp: new Date()\n    });\n\n    // Notify watchers\n    this.notifyWatchers(key, value, scope);\n  }\n\n  watch(pattern: string, callback: ConfigChangeCallback): ConfigWatcher {\n    const watcher = new ConfigWatcher(pattern, callback);\n    this.watchers.push(watcher);\n    return watcher;\n  }\n\n  private async loadFromSources&lt;T&gt;(key: string, defaultValue?: T): Promise&lt;T&gt; {\n    // Try runtime config first\n    let value = await this.loadFromRuntime(key);\n    if (value !== undefined) return value;\n\n    // Try project config\n    value = await this.loadFromProject(key);\n    if (value !== undefined) return value;\n\n    // Try global config\n    value = await this.loadFromGlobal(key);\n    if (value !== undefined) return value;\n\n    // Return default\n    return defaultValue as T;\n  }\n}\n</code></pre>"},{"location":"advanced/development/#logging-system","title":"Logging System","text":"<pre><code>// src/utils/logger.ts\nexport enum LogLevel {\n  ERROR = 0,\n  WARN = 1,\n  INFO = 2,\n  DEBUG = 3,\n  TRACE = 4\n}\n\nexport interface LogEntry {\n  timestamp: Date;\n  level: LogLevel;\n  message: string;\n  context?: Record&lt;string, any&gt;;\n  stack?: string;\n}\n\nexport class Logger {\n  private static instance: Logger;\n  private loggers = new Map&lt;string, ChannelLogger&gt;();\n  private level: LogLevel = LogLevel.INFO;\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  getLogger(channel: string): ChannelLogger {\n    if (!this.loggers.has(channel)) {\n      this.loggers.set(channel, new ChannelLogger(channel, this));\n    }\n    return this.loggers.get(channel)!;\n  }\n\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  log(entry: LogEntry): void {\n    if (entry.level &lt;= this.level) {\n      this.writeLog(entry);\n    }\n  }\n\n  private writeLog(entry: LogEntry): void {\n    // Write to console\n    console.log(`[${entry.timestamp.toISOString()}] ${LogLevel[entry.level]} ${entry.message}`);\n\n    // Write to file if configured\n    // this.writeToFile(entry);\n\n    // Send to VS Code output channel\n    // this.writeToOutputChannel(entry);\n  }\n}\n\nexport class ChannelLogger {\n  constructor(\n    private channel: string,\n    private parent: Logger\n  ) {}\n\n  error(message: string, context?: Record&lt;string, any&gt;): void {\n    this.parent.log({\n      timestamp: new Date(),\n      level: LogLevel.ERROR,\n      message: `[${this.channel}] ${message}`,\n      context,\n      stack: new Error().stack\n    });\n  }\n\n  warn(message: string, context?: Record&lt;string, any&gt;): void {\n    this.parent.log({\n      timestamp: new Date(),\n      level: LogLevel.WARN,\n      message: `[${this.channel}] ${message}`,\n      context\n    });\n  }\n\n  info(message: string, context?: Record&lt;string, any&gt;): void {\n    this.parent.log({\n      timestamp: new Date(),\n      level: LogLevel.INFO,\n      message: `[${this.channel}] ${message}`,\n      context\n    });\n  }\n\n  debug(message: string, context?: Record&lt;string, any&gt;): void {\n    this.parent.log({\n      timestamp: new Date(),\n      level: LogLevel.DEBUG,\n      message: `[${this.channel}] ${message}`,\n      context\n    });\n  }\n}\n\n// Usage\nconst logger = Logger.getInstance().getLogger('MarkerGenerator');\nlogger.info('Starting marker generation', { sourcePath: '/project' });\nlogger.error('Failed to read file', { filePath: '/project/file.txt', error: 'ENOENT' });\n</code></pre>"},{"location":"advanced/development/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// src/utils/performance.ts\nexport class PerformanceProfiler {\n  private timings = new Map&lt;string, number&gt;();\n  private counters = new Map&lt;string, number&gt;();\n  private memory = new Map&lt;string, number&gt;();\n\n  startTiming(operation: string): void {\n    this.timings.set(operation, performance.now());\n  }\n\n  endTiming(operation: string): number {\n    const start = this.timings.get(operation);\n    if (start === undefined) {\n      throw new Error(`No timing started for operation: ${operation}`);\n    }\n\n    const duration = performance.now() - start;\n    this.timings.delete(operation);\n\n    return duration;\n  }\n\n  increment(counter: string, value: number = 1): void {\n    const current = this.counters.get(counter) || 0;\n    this.counters.set(counter, current + value);\n  }\n\n  recordMemory(label: string): void {\n    const usage = process.memoryUsage();\n    this.memory.set(label, usage.heapUsed);\n  }\n\n  generateReport(): PerformanceReport {\n    return {\n      timestamp: new Date(),\n      counters: Object.fromEntries(this.counters),\n      memorySnapshots: Object.fromEntries(this.memory),\n      summary: this.calculateSummary()\n    };\n  }\n}\n\n// Usage in MarkerGenerator\nexport class MarkerGenerator {\n  private profiler = new PerformanceProfiler();\n\n  async generate(sourcePath: string, options?: GenerationOptions): Promise&lt;string&gt; {\n    this.profiler.startTiming('total_generation');\n    this.profiler.recordMemory('start');\n\n    try {\n      const files = await this.scanFiles(sourcePath);\n      this.profiler.increment('files_scanned', files.length);\n\n      let result = await this.generateHeader(sourcePath, options);\n\n      for (const file of files) {\n        this.profiler.startTiming('file_processing');\n\n        const processed = await this.processFile(file);\n        result += processed;\n\n        const duration = this.profiler.endTiming('file_processing');\n        this.profiler.increment('processing_time', duration);\n      }\n\n      this.profiler.recordMemory('end');\n      const totalTime = this.profiler.endTiming('total_generation');\n\n      const report = this.profiler.generateReport();\n      this.logger.debug('Generation performance', report);\n\n      return result;\n    } catch (error) {\n      this.profiler.endTiming('total_generation');\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"advanced/development/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":""},{"location":"advanced/development/#code-style-and-standards","title":"Code Style and Standards","text":"<pre><code>// .eslintrc.js\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'eslint:recommended',\n    '@typescript-eslint/recommended'\n  ],\n  rules: {\n    // Enforce consistent code style\n    'indent': ['error', 2],\n    'quotes': ['error', 'single'],\n    'semi': ['error', 'always'],\n\n    // TypeScript specific\n    '@typescript-eslint/no-unused-vars': 'error',\n    '@typescript-eslint/explicit-function-return-type': 'warn',\n    '@typescript-eslint/no-explicit-any': 'warn',\n\n    // Best practices\n    'prefer-const': 'error',\n    'no-var': 'error',\n    'object-shorthand': 'error'\n  }\n};\n</code></pre>"},{"location":"advanced/development/#git-workflow","title":"Git Workflow","text":"<pre><code># Feature development workflow\ngit checkout -b feature/your-feature-name\n\n# Make changes...\nnpm run lint\nnpm test\nnpm run build\n\n# Commit with conventional commits\ngit commit -m \"feat: add new marker validation feature\"\n\n# Push and create PR\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"advanced/development/#release-process","title":"Release Process","text":"<pre><code># Update version\nnpm version patch|minor|major\n\n# Update changelog\n# Update documentation\n\n# Create release build\nnpm run build\nnpm run package\n\n# Create GitHub release\n# Publish to VS Code Marketplace\n</code></pre>"},{"location":"advanced/development/#development-resources","title":"\ud83d\udcda Development Resources","text":""},{"location":"advanced/development/#essential-documentation","title":"Essential Documentation","text":"<ul> <li>VS Code Extension API</li> <li>TypeScript Handbook</li> <li>Node.js Documentation</li> <li>Mocha Testing Framework</li> </ul>"},{"location":"advanced/development/#development-tools","title":"Development Tools","text":"<ul> <li>VS Code Extensions:</li> <li>TypeScript Importer</li> <li>ESLint</li> <li>Prettier</li> <li>GitLens</li> <li> <p>Extension Test Runner</p> </li> <li> <p>CLI Tools:</p> </li> <li><code>vsce</code> - VS Code Extension manager</li> <li><code>typescript</code> - TypeScript compiler</li> <li><code>eslint</code> - Code linting</li> <li><code>mocha</code> - Test runner</li> </ul>"},{"location":"advanced/development/#debugging-configuration","title":"Debugging Configuration","text":"<pre><code>// .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Run Extension\",\n      \"type\": \"extensionHost\",\n      \"request\": \"launch\",\n      \"args\": [\"--extensionDevelopmentPath=${workspaceFolder}\"],\n      \"outFiles\": [\"${workspaceFolder}/out/**/*.js\"],\n      \"preLaunchTask\": \"${workspaceFolder}/npm: watch\"\n    },\n    {\n      \"name\": \"Extension Tests\",\n      \"type\": \"extensionHost\",\n      \"request\": \"launch\",\n      \"args\": [\n        \"--extensionDevelopmentPath=${workspaceFolder}\",\n        \"--extensionTestsPath=${workspaceFolder}/out/test/suite/index\"\n      ],\n      \"outFiles\": [\"${workspaceFolder}/out/test/**/*.js\"],\n      \"preLaunchTask\": \"${workspaceFolder}/npm: watch\"\n    }\n  ]\n}\n</code></pre> <p>This comprehensive development guide provides everything needed to contribute effectively to the LookAtni File Markers project while maintaining high code quality and consistency.</p>"},{"location":"advanced/typescript-scripts/","title":"\ud83d\udcdc TypeScript Scripts","text":"<p>Advanced TypeScript scripts for automation, customization, and integration with LookAtni File Markers.</p>"},{"location":"advanced/typescript-scripts/#core-typescript-api","title":"Core TypeScript API","text":""},{"location":"advanced/typescript-scripts/#installation-setup","title":"Installation &amp; Setup","text":"<pre><code># Install TypeScript API\nnpm install lookatni-core\n\n# Install type definitions\nnpm install @types/lookatni-core\n</code></pre>"},{"location":"advanced/typescript-scripts/#basic-usage","title":"Basic Usage","text":"<pre><code>import { LookAtni, GenerateOptions, ExtractOptions } from 'lookatni-core';\n\n// Initialize LookAtni instance\nconst lookatni = new LookAtni({\n  version: '1.0',\n  enableLogging: true,\n  tempDirectory: './temp'\n});\n\n// Generate markers\nconst generateOptions: GenerateOptions = {\n  source: './my-project',\n  output: './markers/project.txt',\n  include: ['src/**/*.ts', 'docs/**/*.md'],\n  exclude: ['node_modules/**', '**/*.test.*'],\n  compress: true,\n  preserveStructure: true\n};\n\nconst result = await lookatni.generate(generateOptions);\nconsole.log(`Generated ${result.fileCount} files`);\n</code></pre>"},{"location":"advanced/typescript-scripts/#custom-generation-scripts","title":"Custom Generation Scripts","text":""},{"location":"advanced/typescript-scripts/#automated-project-packaging","title":"Automated Project Packaging","text":"<pre><code>// scripts/package-project.ts\nimport { LookAtni, FileScanner, ProjectAnalyzer } from 'lookatni-core';\nimport { glob } from 'glob';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\n\ninterface PackageConfig {\n  name: string;\n  version: string;\n  environments: {\n    [key: string]: {\n      include: string[];\n      exclude: string[];\n      compress: boolean;\n    };\n  };\n}\n\nclass ProjectPackager {\n  private lookatni: LookAtni;\n  private config: PackageConfig;\n\n  constructor(configPath: string) {\n    this.lookatni = new LookAtni();\n    this.config = require(configPath);\n  }\n\n  async packageAllEnvironments(): Promise&lt;void&gt; {\n    for (const [env, settings] of Object.entries(this.config.environments)) {\n      console.log(`\ud83d\udce6 Packaging ${env} environment...`);\n\n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const outputFile = `${this.config.name}-${env}-${this.config.version}-${timestamp}.txt`;\n\n      await this.packageEnvironment(env, settings, outputFile);\n    }\n  }\n\n  private async packageEnvironment(\n    environment: string, \n    settings: any, \n    outputFile: string\n  ): Promise&lt;void&gt; {\n    // Analyze project structure first\n    const analyzer = new ProjectAnalyzer();\n    const analysis = await analyzer.analyze('./');\n\n    // Generate environment-specific markers\n    const result = await this.lookatni.generate({\n      source: './',\n      output: `./packages/${outputFile}`,\n      include: settings.include,\n      exclude: settings.exclude,\n      compress: settings.compress,\n      metadata: {\n        environment,\n        analysis: analysis.summary,\n        buildInfo: {\n          timestamp: new Date().toISOString(),\n          nodeVersion: process.version,\n          platform: process.platform\n        }\n      }\n    });\n\n    // Validate the generated package\n    const validation = await this.lookatni.validate(`./packages/${outputFile}`);\n\n    if (!validation.isValid) {\n      throw new Error(`Package validation failed: ${validation.errors.join(', ')}`);\n    }\n\n    console.log(`\u2705 ${environment} package created: ${outputFile}`);\n    console.log(`   Files: ${result.fileCount}, Size: ${result.totalSize}`);\n  }\n}\n\n// Usage\nasync function main() {\n  const packager = new ProjectPackager('./package-config.json');\n  await packager.packageAllEnvironments();\n}\n\nmain().catch(console.error);\n</code></pre>"},{"location":"advanced/typescript-scripts/#smart-dependency-bundler","title":"Smart Dependency Bundler","text":"<pre><code>// scripts/dependency-bundler.ts\nimport { DependencyAnalyzer, FileGraph } from 'lookatni-core';\nimport * as ts from 'typescript';\n\nclass SmartDependencyBundler {\n  private dependencyAnalyzer: DependencyAnalyzer;\n\n  constructor() {\n    this.dependencyAnalyzer = new DependencyAnalyzer();\n  }\n\n  async createComponentBundle(componentPath: string): Promise&lt;string[]&gt; {\n    // Analyze TypeScript dependencies\n    const sourceFile = ts.createSourceFile(\n      componentPath,\n      await fs.readFile(componentPath, 'utf8'),\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    const dependencies = this.extractDependencies(sourceFile);\n    const fileGraph = await this.buildDependencyGraph(dependencies);\n\n    return this.resolveBundleFiles(fileGraph);\n  }\n\n  private extractDependencies(sourceFile: ts.SourceFile): string[] {\n    const dependencies: string[] = [];\n\n    const visit = (node: ts.Node) =&gt; {\n      if (ts.isImportDeclaration(node) || ts.isExportDeclaration(node)) {\n        const moduleSpecifier = node.moduleSpecifier;\n        if (moduleSpecifier &amp;&amp; ts.isStringLiteral(moduleSpecifier)) {\n          dependencies.push(moduleSpecifier.text);\n        }\n      }\n      ts.forEachChild(node, visit);\n    };\n\n    visit(sourceFile);\n    return dependencies;\n  }\n\n  private async buildDependencyGraph(dependencies: string[]): Promise&lt;FileGraph&gt; {\n    return await this.dependencyAnalyzer.buildGraph({\n      entryPoints: dependencies,\n      resolveOptions: {\n        extensions: ['.ts', '.tsx', '.js', '.jsx'],\n        modules: ['node_modules', 'src']\n      }\n    });\n  }\n\n  private resolveBundleFiles(graph: FileGraph): string[] {\n    // Topological sort to determine bundle order\n    return graph.getTopologicalOrder();\n  }\n}\n\n// Usage example\nconst bundler = new SmartDependencyBundler();\nconst files = await bundler.createComponentBundle('./src/components/UserProfile.tsx');\n\nconst lookatni = new LookAtni();\nawait lookatni.generate({\n  source: './',\n  include: files,\n  output: './bundles/user-profile-component.txt',\n  preserveStructure: true\n});\n</code></pre>"},{"location":"advanced/typescript-scripts/#custom-validation-scripts","title":"Custom Validation Scripts","text":""},{"location":"advanced/typescript-scripts/#advanced-validation-framework","title":"Advanced Validation Framework","text":"<pre><code>// scripts/custom-validator.ts\nimport { ValidationRule, ValidationContext, ValidationResult } from 'lookatni-core';\n\nclass CustomValidationRules {\n  static securityRule: ValidationRule = {\n    name: 'security-check',\n    description: 'Check for sensitive data in files',\n    severity: 'error',\n\n    async validate(context: ValidationContext): Promise&lt;ValidationResult&gt; {\n      const sensitivePatterns = [\n        /(?:password|pwd|pass)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi,\n        /(?:api[_-]?key|apikey)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi,\n        /(?:secret|token)\\s*[:=]\\s*['\\\"]?([^'\\\"\\\\s]+)/gi\n      ];\n\n      const violations = [];\n\n      for (const file of context.files) {\n        for (const pattern of sensitivePatterns) {\n          const matches = file.content.match(pattern);\n          if (matches) {\n            violations.push({\n              file: file.path,\n              line: this.findLineNumber(file.content, matches[0]),\n              message: `Potential sensitive data: ${matches[0]}`,\n              suggestion: 'Use environment variables or config files'\n            });\n          }\n        }\n      }\n\n      return {\n        passed: violations.length === 0,\n        violations\n      };\n    },\n\n    findLineNumber(content: string, match: string): number {\n      const lines = content.substring(0, content.indexOf(match)).split('\\n');\n      return lines.length;\n    }\n  };\n\n  static consistencyRule: ValidationRule = {\n    name: 'naming-consistency',\n    description: 'Enforce consistent file naming',\n    severity: 'warning',\n\n    async validate(context: ValidationContext): Promise&lt;ValidationResult&gt; {\n      const violations = [];\n      const patterns = {\n        components: /^[A-Z][a-zA-Z]*\\.(tsx?|jsx?)$/,\n        utils: /^[a-z][a-zA-Z]*\\.(ts|js)$/,\n        tests: /^[a-zA-Z]+\\.(test|spec)\\.(ts|js)$/\n      };\n\n      for (const file of context.files) {\n        const relativePath = file.path;\n\n        if (relativePath.includes('/components/')) {\n          if (!patterns.components.test(path.basename(relativePath))) {\n            violations.push({\n              file: file.path,\n              message: 'Component files should use PascalCase',\n              suggestion: 'Rename to PascalCase format (e.g., UserProfile.tsx)'\n            });\n          }\n        }\n\n        if (relativePath.includes('/utils/')) {\n          if (!patterns.utils.test(path.basename(relativePath))) {\n            violations.push({\n              file: file.path,\n              message: 'Utility files should use camelCase',\n              suggestion: 'Rename to camelCase format (e.g., formatDate.ts)'\n            });\n          }\n        }\n      }\n\n      return {\n        passed: violations.length === 0,\n        violations\n      };\n    }\n  };\n}\n\n// Custom validator implementation\nclass ProjectValidator {\n  private rules: ValidationRule[] = [\n    CustomValidationRules.securityRule,\n    CustomValidationRules.consistencyRule\n  ];\n\n  async validateProject(markerFile: string): Promise&lt;void&gt; {\n    const lookatni = new LookAtni();\n    const markers = await lookatni.parseMarkers(markerFile);\n\n    const context: ValidationContext = {\n      files: markers.entries,\n      projectMetadata: markers.metadata,\n      config: markers.config\n    };\n\n    console.log('\ud83d\udd0d Running custom validation rules...');\n\n    for (const rule of this.rules) {\n      console.log(`  Checking: ${rule.description}`);\n\n      const result = await rule.validate(context);\n\n      if (!result.passed) {\n        console.log(`  \u274c ${rule.name}: ${result.violations.length} violations`);\n        this.reportViolations(result.violations, rule.severity);\n      } else {\n        console.log(`  \u2705 ${rule.name}: passed`);\n      }\n    }\n  }\n\n  private reportViolations(violations: any[], severity: string): void {\n    violations.forEach(violation =&gt; {\n      const icon = severity === 'error' ? '\ud83d\udea8' : '\u26a0\ufe0f';\n      console.log(`    ${icon} ${violation.file}:${violation.line || '?'}`);\n      console.log(`       ${violation.message}`);\n      if (violation.suggestion) {\n        console.log(`       \ud83d\udca1 ${violation.suggestion}`);\n      }\n    });\n  }\n}\n\n// Usage\nconst validator = new ProjectValidator();\nawait validator.validateProject('./project-markers.txt');\n</code></pre>"},{"location":"advanced/typescript-scripts/#extraction-automation-scripts","title":"Extraction Automation Scripts","text":""},{"location":"advanced/typescript-scripts/#intelligent-extraction-manager","title":"Intelligent Extraction Manager","text":"<pre><code>// scripts/extraction-manager.ts\nimport { ExtractionStrategy, ConflictResolver } from 'lookatni-core';\nimport * as inquirer from 'inquirer';\n\nclass IntelligentExtractionManager {\n  private strategies: Map&lt;string, ExtractionStrategy&gt; = new Map();\n\n  constructor() {\n    this.setupStrategies();\n  }\n\n  private setupStrategies(): void {\n    // Safe extraction strategy\n    this.strategies.set('safe', {\n      name: 'Safe Extraction',\n      description: 'Never overwrites existing files',\n\n      async extract(markers: any, outputPath: string): Promise&lt;void&gt; {\n        const existingFiles = await this.scanExistingFiles(outputPath);\n        const conflicts = this.detectConflicts(markers.entries, existingFiles);\n\n        if (conflicts.length &gt; 0) {\n          console.log(`\u26a0\ufe0f Found ${conflicts.length} potential conflicts`);\n          const resolution = await this.promptConflictResolution(conflicts);\n\n          if (resolution === 'abort') {\n            throw new Error('Extraction aborted due to conflicts');\n          }\n        }\n\n        await this.extractWithBackups(markers, outputPath);\n      }\n    });\n\n    // Merge extraction strategy\n    this.strategies.set('merge', {\n      name: 'Intelligent Merge',\n      description: 'Attempts to merge compatible files',\n\n      async extract(markers: any, outputPath: string): Promise&lt;void&gt; {\n        for (const entry of markers.entries) {\n          const targetPath = path.join(outputPath, entry.path);\n\n          if (await this.fileExists(targetPath)) {\n            if (await this.canMerge(entry, targetPath)) {\n              await this.mergeFiles(entry, targetPath);\n            } else {\n              await this.handleConflict(entry, targetPath);\n            }\n          } else {\n            await this.extractFile(entry, targetPath);\n          }\n        }\n      }\n    });\n  }\n\n  async extractWithStrategy(\n    markerFile: string, \n    outputPath: string, \n    strategyName: string\n  ): Promise&lt;void&gt; {\n    const strategy = this.strategies.get(strategyName);\n    if (!strategy) {\n      throw new Error(`Unknown strategy: ${strategyName}`);\n    }\n\n    console.log(`\ud83d\ude80 Using strategy: ${strategy.name}`);\n    console.log(`   ${strategy.description}`);\n\n    const lookatni = new LookAtni();\n    const markers = await lookatni.parseMarkers(markerFile);\n\n    await strategy.extract(markers, outputPath);\n\n    console.log('\u2705 Extraction completed successfully');\n  }\n\n  private async promptConflictResolution(conflicts: any[]): Promise&lt;string&gt; {\n    const answers = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'resolution',\n        message: `How should conflicts be handled?`,\n        choices: [\n          { name: 'Create backups and overwrite', value: 'backup' },\n          { name: 'Skip conflicting files', value: 'skip' },\n          { name: 'Abort extraction', value: 'abort' },\n          { name: 'Review each conflict individually', value: 'individual' }\n        ]\n      }\n    ]);\n\n    return answers.resolution;\n  }\n\n  private async canMerge(entry: any, existingPath: string): Promise&lt;boolean&gt; {\n    // Check if files can be intelligently merged\n    const existingContent = await fs.readFile(existingPath, 'utf8');\n\n    // Simple merge compatibility check\n    if (entry.type === 'json') {\n      return this.canMergeJson(entry.content, existingContent);\n    }\n\n    if (entry.type === 'markdown') {\n      return true; // Markdown can usually be safely appended\n    }\n\n    return false; // Default to no merge for code files\n  }\n\n  private canMergeJson(newContent: string, existingContent: string): boolean {\n    try {\n      const newObj = JSON.parse(newContent);\n      const existingObj = JSON.parse(existingContent);\n\n      // Check for key conflicts\n      const newKeys = Object.keys(newObj);\n      const existingKeys = Object.keys(existingObj);\n      const conflicts = newKeys.filter(key =&gt; existingKeys.includes(key));\n\n      return conflicts.length === 0;\n    } catch {\n      return false;\n    }\n  }\n\n  private async mergeFiles(entry: any, targetPath: string): Promise&lt;void&gt; {\n    console.log(`\ud83d\udd00 Merging ${entry.path}...`);\n\n    if (entry.type === 'json') {\n      await this.mergeJsonFiles(entry, targetPath);\n    } else if (entry.type === 'markdown') {\n      await this.mergeMarkdownFiles(entry, targetPath);\n    }\n  }\n\n  private async mergeJsonFiles(entry: any, targetPath: string): Promise&lt;void&gt; {\n    const existingContent = await fs.readFile(targetPath, 'utf8');\n    const existingObj = JSON.parse(existingContent);\n    const newObj = JSON.parse(entry.content);\n\n    const merged = { ...existingObj, ...newObj };\n    await fs.writeFile(targetPath, JSON.stringify(merged, null, 2));\n  }\n\n  private async mergeMarkdownFiles(entry: any, targetPath: string): Promise&lt;void&gt; {\n    const existingContent = await fs.readFile(targetPath, 'utf8');\n    const separator = '\\n\\n---\\n\\n';\n    const merged = existingContent + separator + entry.content;\n\n    await fs.writeFile(targetPath, merged);\n  }\n}\n\n// Usage\nconst manager = new IntelligentExtractionManager();\nawait manager.extractWithStrategy(\n  './project-markers.txt', \n  './output', \n  'merge'\n);\n</code></pre>"},{"location":"advanced/typescript-scripts/#integration-scripts","title":"Integration Scripts","text":""},{"location":"advanced/typescript-scripts/#cicd-integration","title":"CI/CD Integration","text":"<pre><code>// scripts/ci-integration.ts\nimport { LookAtni, ContinuousIntegration } from 'lookatni-core';\n\nclass CIIntegration {\n  private lookatni: LookAtni;\n  private ci: ContinuousIntegration;\n\n  constructor() {\n    this.lookatni = new LookAtni();\n    this.ci = new ContinuousIntegration();\n  }\n\n  async runBuildPipeline(): Promise&lt;void&gt; {\n    console.log('\ud83d\ude80 Starting LookAtni CI Pipeline...');\n\n    try {\n      // Step 1: Generate markers for current build\n      await this.generateBuildMarkers();\n\n      // Step 2: Validate generated markers\n      await this.validateMarkers();\n\n      // Step 3: Run integration tests\n      await this.runIntegrationTests();\n\n      // Step 4: Create release artifacts\n      await this.createReleaseArtifacts();\n\n      console.log('\u2705 CI Pipeline completed successfully');\n\n    } catch (error) {\n      console.error('\u274c CI Pipeline failed:', error);\n      process.exit(1);\n    }\n  }\n\n  private async generateBuildMarkers(): Promise&lt;void&gt; {\n    const buildInfo = this.ci.getBuildInfo();\n\n    await this.lookatni.generate({\n      source: './',\n      output: `./artifacts/build-${buildInfo.number}.txt`,\n      include: ['src/**', 'docs/**', '*.json', '*.md'],\n      exclude: ['node_modules/**', 'coverage/**', '**/*.test.*'],\n      metadata: {\n        buildNumber: buildInfo.number,\n        commitSha: buildInfo.commitSha,\n        branch: buildInfo.branch,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  private async validateMarkers(): Promise&lt;void&gt; {\n    const buildInfo = this.ci.getBuildInfo();\n    const markerFile = `./artifacts/build-${buildInfo.number}.txt`;\n\n    const result = await this.lookatni.validate(markerFile, {\n      strict: true,\n      customRules: ['security-check', 'naming-consistency']\n    });\n\n    if (!result.isValid) {\n      throw new Error(`Validation failed: ${result.errors.join(', ')}`);\n    }\n  }\n\n  private async runIntegrationTests(): Promise&lt;void&gt; {\n    // Extract markers to temporary directory and run tests\n    const buildInfo = this.ci.getBuildInfo();\n    const markerFile = `./artifacts/build-${buildInfo.number}.txt`;\n    const testDir = `./temp/test-${buildInfo.number}`;\n\n    await this.lookatni.extract(markerFile, testDir);\n\n    // Run tests in extracted directory\n    await this.ci.runCommand('npm test', { cwd: testDir });\n\n    // Cleanup\n    await fs.rmdir(testDir, { recursive: true });\n  }\n\n  private async createReleaseArtifacts(): Promise&lt;void&gt; {\n    const buildInfo = this.ci.getBuildInfo();\n\n    if (buildInfo.isRelease) {\n      // Create production release markers\n      await this.lookatni.generate({\n        source: './',\n        output: `./artifacts/release-${buildInfo.version}.txt`,\n        include: ['src/**', 'README.md', 'LICENSE', 'package.json'],\n        exclude: ['**/*.test.*', '**/*.spec.*'],\n        compress: true,\n        metadata: {\n          version: buildInfo.version,\n          releaseNotes: buildInfo.releaseNotes\n        }\n      });\n\n      console.log(`\ud83d\udce6 Release artifact created: release-${buildInfo.version}.txt`);\n    }\n  }\n}\n\n// Usage in CI pipeline\nif (process.env.CI) {\n  const ci = new CIIntegration();\n  ci.runBuildPipeline();\n}\n</code></pre> <p>Next: Explore API Reference for complete interface documentation.</p>"},{"location":"examples/backup-restore/","title":"\ud83d\udcbe Backup and Restore Workflows","text":"<p>Learn how to implement comprehensive backup and restore strategies using LookAtni File Markers for project preservation and disaster recovery.</p>"},{"location":"examples/backup-restore/#overview","title":"\ud83c\udfaf Overview","text":"<p>LookAtni File Markers provides an excellent foundation for backup and restore workflows by creating portable, self-contained representations of your projects. This guide covers various backup strategies and recovery scenarios.</p>"},{"location":"examples/backup-restore/#basic-backup-workflow","title":"\ud83d\udd04 Basic Backup Workflow","text":""},{"location":"examples/backup-restore/#simple-project-backup","title":"Simple Project Backup","text":"<pre><code>// backup-script.ts\nimport { MarkerGenerator } from '../src/utils/markerGenerator';\nimport { ConfigManager } from '../src/utils/configManager';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface BackupConfig {\n    projectPath: string;\n    backupDir: string;\n    compressionLevel: number;\n    includeMetadata: boolean;\n    timestampFormat: string;\n}\n\nclass ProjectBackup {\n    private config: BackupConfig;\n    private generator: MarkerGenerator;\n\n    constructor(config: BackupConfig) {\n        this.config = config;\n        this.generator = new MarkerGenerator();\n    }\n\n    async createBackup(): Promise&lt;string&gt; {\n        const timestamp = this.formatTimestamp(new Date());\n        const projectName = path.basename(this.config.projectPath);\n        const backupFileName = `${projectName}_backup_${timestamp}.lookatni`;\n        const backupPath = path.join(this.config.backupDir, backupFileName);\n\n        console.log(`Creating backup: ${backupPath}`);\n\n        const markerContent = await this.generator.generate(\n            this.config.projectPath,\n            {\n                includeMetadata: this.config.includeMetadata,\n                compressionLevel: this.config.compressionLevel,\n                excludePatterns: [\n                    'node_modules/**',\n                    '.git/**',\n                    'dist/**',\n                    '*.log'\n                ]\n            }\n        );\n\n        await fs.promises.writeFile(backupPath, markerContent, 'utf8');\n\n        console.log(`Backup created successfully: ${backupPath}`);\n        return backupPath;\n    }\n\n    private formatTimestamp(date: Date): string {\n        return date.toISOString()\n            .replace(/:/g, '-')\n            .replace(/\\./g, '-')\n            .slice(0, 19);\n    }\n}\n\n// Usage\nasync function main() {\n    const backup = new ProjectBackup({\n        projectPath: '/path/to/your/project',\n        backupDir: '/path/to/backups',\n        compressionLevel: 2,\n        includeMetadata: true,\n        timestampFormat: 'ISO'\n    });\n\n    try {\n        await backup.createBackup();\n    } catch (error) {\n        console.error('Backup failed:', error);\n    }\n}\n\nmain();\n</code></pre>"},{"location":"examples/backup-restore/#automated-daily-backups","title":"Automated Daily Backups","text":"<pre><code>// automated-backup.ts\nimport { CronJob } from 'cron';\nimport { ProjectBackup } from './backup-script';\nimport { EmailNotifier } from './email-notifier';\n\nclass AutomatedBackupService {\n    private backupJobs: Map&lt;string, CronJob&gt; = new Map();\n    private notifier: EmailNotifier;\n\n    constructor() {\n        this.notifier = new EmailNotifier();\n    }\n\n    scheduleBackup(\n        projectId: string,\n        config: BackupConfig,\n        schedule: string = '0 2 * * *' // Daily at 2 AM\n    ): void {\n        const job = new CronJob(schedule, async () =&gt; {\n            try {\n                const backup = new ProjectBackup(config);\n                const backupPath = await backup.createBackup();\n\n                await this.notifier.sendSuccess(projectId, backupPath);\n                await this.cleanupOldBackups(config.backupDir, 30); // Keep 30 days\n            } catch (error) {\n                await this.notifier.sendFailure(projectId, error);\n            }\n        });\n\n        this.backupJobs.set(projectId, job);\n        job.start();\n\n        console.log(`Scheduled backup for ${projectId}: ${schedule}`);\n    }\n\n    async cleanupOldBackups(backupDir: string, keepDays: number): Promise&lt;void&gt; {\n        const files = await fs.promises.readdir(backupDir);\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - keepDays);\n\n        for (const file of files) {\n            if (!file.endsWith('.lookatni')) continue;\n\n            const filePath = path.join(backupDir, file);\n            const stats = await fs.promises.stat(filePath);\n\n            if (stats.mtime &lt; cutoffDate) {\n                await fs.promises.unlink(filePath);\n                console.log(`Deleted old backup: ${file}`);\n            }\n        }\n    }\n}\n\n// Configuration for multiple projects\nconst backupService = new AutomatedBackupService();\n\n// Schedule backups for different projects\nbackupService.scheduleBackup('frontend-app', {\n    projectPath: '/projects/frontend-app',\n    backupDir: '/backups/frontend-app',\n    compressionLevel: 2,\n    includeMetadata: true,\n    timestampFormat: 'ISO'\n}, '0 2 * * *'); // Daily at 2 AM\n\nbackupService.scheduleBackup('backend-api', {\n    projectPath: '/projects/backend-api',\n    backupDir: '/backups/backend-api',\n    compressionLevel: 3,\n    includeMetadata: true,\n    timestampFormat: 'ISO'\n}, '0 3 * * *'); // Daily at 3 AM\n</code></pre>"},{"location":"examples/backup-restore/#enterprise-backup-strategies","title":"\ud83c\udfe2 Enterprise Backup Strategies","text":""},{"location":"examples/backup-restore/#multi-tier-backup-system","title":"Multi-Tier Backup System","text":"<pre><code>// enterprise-backup.ts\ninterface BackupTier {\n    name: string;\n    schedule: string;\n    retention: number; // days\n    location: string;\n    compressionLevel: number;\n}\n\nclass EnterpriseBackupSystem {\n    private tiers: BackupTier[] = [\n        {\n            name: 'hourly',\n            schedule: '0 * * * *', // Every hour\n            retention: 7,\n            location: '/backups/hourly',\n            compressionLevel: 1\n        },\n        {\n            name: 'daily',\n            schedule: '0 1 * * *', // Daily at 1 AM\n            retention: 30,\n            location: '/backups/daily',\n            compressionLevel: 2\n        },\n        {\n            name: 'weekly',\n            schedule: '0 2 * * 0', // Weekly on Sunday at 2 AM\n            retention: 365,\n            location: '/backups/weekly',\n            compressionLevel: 3\n        }\n    ];\n\n    async initializeBackupSchedule(projects: ProjectConfig[]): Promise&lt;void&gt; {\n        for (const project of projects) {\n            for (const tier of this.tiers) {\n                this.scheduleBackupTier(project, tier);\n            }\n        }\n    }\n\n    private scheduleBackupTier(project: ProjectConfig, tier: BackupTier): void {\n        const job = new CronJob(tier.schedule, async () =&gt; {\n            try {\n                const backup = new ProjectBackup({\n                    projectPath: project.path,\n                    backupDir: path.join(tier.location, project.name),\n                    compressionLevel: tier.compressionLevel,\n                    includeMetadata: true,\n                    timestampFormat: 'ISO'\n                });\n\n                const backupPath = await backup.createBackup();\n\n                // Archive to cloud storage for weekly backups\n                if (tier.name === 'weekly') {\n                    await this.archiveToCloud(backupPath, project.name);\n                }\n\n                await this.cleanupOldBackups(\n                    path.join(tier.location, project.name),\n                    tier.retention\n                );\n\n                console.log(`${tier.name} backup completed for ${project.name}`);\n            } catch (error) {\n                console.error(`${tier.name} backup failed for ${project.name}:`, error);\n            }\n        });\n\n        job.start();\n    }\n\n    private async archiveToCloud(backupPath: string, projectName: string): Promise&lt;void&gt; {\n        // Implementation for cloud storage (AWS S3, Azure Blob, etc.)\n        console.log(`Archiving ${backupPath} to cloud storage...`);\n    }\n}\n</code></pre>"},{"location":"examples/backup-restore/#version-controlled-backup","title":"Version-Controlled Backup","text":"<pre><code>// git-backup-integration.ts\nimport { simpleGit, SimpleGit } from 'simple-git';\n\nclass GitBackupIntegration {\n    private git: SimpleGit;\n    private backupRepo: string;\n\n    constructor(backupRepoPath: string) {\n        this.backupRepo = backupRepoPath;\n        this.git = simpleGit(backupRepoPath);\n    }\n\n    async initializeBackupRepo(): Promise&lt;void&gt; {\n        if (!await this.git.checkIsRepo()) {\n            await this.git.init();\n            await this.git.addConfig('user.name', 'LookAtni Backup System');\n            await this.git.addConfig('user.email', 'backup@lookatni.dev');\n        }\n    }\n\n    async commitBackup(backupPath: string, projectName: string): Promise&lt;void&gt; {\n        const fileName = path.basename(backupPath);\n        const targetPath = path.join(this.backupRepo, projectName, fileName);\n\n        // Ensure directory exists\n        await fs.promises.mkdir(path.dirname(targetPath), { recursive: true });\n\n        // Copy backup file\n        await fs.promises.copyFile(backupPath, targetPath);\n\n        // Commit to git\n        await this.git.add(path.join(projectName, fileName));\n        await this.git.commit(`Backup: ${projectName} - ${new Date().toISOString()}`);\n\n        console.log(`Backup committed to git: ${targetPath}`);\n    }\n\n    async createBranch(branchName: string): Promise&lt;void&gt; {\n        try {\n            await this.git.checkoutLocalBranch(branchName);\n        } catch (error) {\n            // Branch might already exist\n            await this.git.checkout(branchName);\n        }\n    }\n}\n</code></pre>"},{"location":"examples/backup-restore/#restore-workflows","title":"\ud83d\udd04 Restore Workflows","text":""},{"location":"examples/backup-restore/#interactive-restore-tool","title":"Interactive Restore Tool","text":"<pre><code>// restore-tool.ts\nimport * as inquirer from 'inquirer';\nimport { MarkerExtractor } from '../src/utils/markerExtractor';\n\ninterface RestoreOptions {\n    backupPath: string;\n    targetPath: string;\n    overwriteExisting: boolean;\n    selectiveRestore: boolean;\n    createBackupBeforeRestore: boolean;\n}\n\nclass InteractiveRestoreTool {\n    private extractor: MarkerExtractor;\n\n    constructor() {\n        this.extractor = new MarkerExtractor();\n    }\n\n    async run(): Promise&lt;void&gt; {\n        console.log('\ud83d\udd04 LookAtni Project Restore Tool');\n        console.log('================================\\n');\n\n        const options = await this.gatherRestoreOptions();\n\n        if (options.createBackupBeforeRestore) {\n            await this.createPreRestoreBackup(options.targetPath);\n        }\n\n        if (options.selectiveRestore) {\n            await this.selectiveRestore(options);\n        } else {\n            await this.fullRestore(options);\n        }\n    }\n\n    private async gatherRestoreOptions(): Promise&lt;RestoreOptions&gt; {\n        const answers = await inquirer.prompt([\n            {\n                type: 'input',\n                name: 'backupPath',\n                message: 'Path to LookAtni backup file:',\n                validate: (input) =&gt; fs.existsSync(input) || 'File does not exist'\n            },\n            {\n                type: 'input',\n                name: 'targetPath',\n                message: 'Target directory for restore:',\n                default: './restored-project'\n            },\n            {\n                type: 'confirm',\n                name: 'overwriteExisting',\n                message: 'Overwrite existing files?',\n                default: false\n            },\n            {\n                type: 'confirm',\n                name: 'selectiveRestore',\n                message: 'Select specific files to restore?',\n                default: false\n            },\n            {\n                type: 'confirm',\n                name: 'createBackupBeforeRestore',\n                message: 'Create backup of target directory before restore?',\n                default: true\n            }\n        ]);\n\n        return answers as RestoreOptions;\n    }\n\n    private async selectiveRestore(options: RestoreOptions): Promise&lt;void&gt; {\n        // Parse backup file to get file list\n        const fileList = await this.extractor.getFileList(options.backupPath);\n\n        const selectedFiles = await inquirer.prompt([{\n            type: 'checkbox',\n            name: 'files',\n            message: 'Select files to restore:',\n            choices: fileList.map(file =&gt; ({\n                name: `${file.path} (${this.formatFileSize(file.size)})`,\n                value: file.path\n            }))\n        }]);\n\n        console.log(`\\nRestoring ${selectedFiles.files.length} selected files...`);\n\n        await this.extractor.extractSelected(\n            options.backupPath,\n            options.targetPath,\n            selectedFiles.files,\n            {\n                overwriteExisting: options.overwriteExisting,\n                preserveTimestamps: true\n            }\n        );\n\n        console.log('\u2705 Selective restore completed!');\n    }\n\n    private async fullRestore(options: RestoreOptions): Promise&lt;void&gt; {\n        console.log('\\nStarting full project restore...');\n\n        await this.extractor.extract(options.backupPath, options.targetPath, {\n            overwriteExisting: options.overwriteExisting,\n            preserveTimestamps: true,\n            createDirectories: true\n        });\n\n        console.log('\u2705 Full restore completed!');\n    }\n\n    private async createPreRestoreBackup(targetPath: string): Promise&lt;void&gt; {\n        if (!fs.existsSync(targetPath)) return;\n\n        const timestamp = new Date().toISOString().replace(/:/g, '-').slice(0, 19);\n        const backupPath = `${targetPath}_backup_${timestamp}`;\n\n        console.log(`Creating pre-restore backup: ${backupPath}`);\n\n        await fs.promises.cp(targetPath, backupPath, { recursive: true });\n\n        console.log('\u2705 Pre-restore backup created!');\n    }\n\n    private formatFileSize(bytes: number): string {\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        if (bytes === 0) return '0 B';\n        const i = Math.floor(Math.log(bytes) / Math.log(1024));\n        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n}\n\n// Usage\nconst restoreTool = new InteractiveRestoreTool();\nrestoreTool.run().catch(console.error);\n</code></pre>"},{"location":"examples/backup-restore/#disaster-recovery-script","title":"Disaster Recovery Script","text":"<pre><code>// disaster-recovery.ts\nclass DisasterRecoverySystem {\n    private backupLocations: string[];\n    private recoveryPlan: RecoveryPlan;\n\n    constructor(backupLocations: string[], recoveryPlan: RecoveryPlan) {\n        this.backupLocations = backupLocations;\n        this.recoveryPlan = recoveryPlan;\n    }\n\n    async executeDisasterRecovery(projectName: string): Promise&lt;void&gt; {\n        console.log(`\ud83d\udea8 Starting disaster recovery for: ${projectName}`);\n\n        // Step 1: Find the most recent backup\n        const latestBackup = await this.findLatestBackup(projectName);\n        if (!latestBackup) {\n            throw new Error(`No backup found for project: ${projectName}`);\n        }\n\n        console.log(`\ud83d\udce6 Found backup: ${latestBackup.path} (${latestBackup.date})`);\n\n        // Step 2: Prepare recovery environment\n        const recoveryPath = await this.prepareRecoveryEnvironment(projectName);\n\n        // Step 3: Restore from backup\n        await this.restoreFromBackup(latestBackup.path, recoveryPath);\n\n        // Step 4: Validate restoration\n        const isValid = await this.validateRestoration(recoveryPath);\n        if (!isValid) {\n            throw new Error('Restoration validation failed');\n        }\n\n        // Step 5: Execute post-recovery tasks\n        await this.executePostRecoveryTasks(projectName, recoveryPath);\n\n        console.log('\u2705 Disaster recovery completed successfully!');\n    }\n\n    private async findLatestBackup(projectName: string): Promise&lt;BackupInfo | null&gt; {\n        let latestBackup: BackupInfo | null = null;\n\n        for (const location of this.backupLocations) {\n            const projectBackupDir = path.join(location, projectName);\n\n            if (!fs.existsSync(projectBackupDir)) continue;\n\n            const files = await fs.promises.readdir(projectBackupDir);\n            const backupFiles = files.filter(f =&gt; f.endsWith('.lookatni'));\n\n            for (const file of backupFiles) {\n                const filePath = path.join(projectBackupDir, file);\n                const stats = await fs.promises.stat(filePath);\n\n                if (!latestBackup || stats.mtime &gt; latestBackup.date) {\n                    latestBackup = {\n                        path: filePath,\n                        date: stats.mtime,\n                        size: stats.size\n                    };\n                }\n            }\n        }\n\n        return latestBackup;\n    }\n\n    private async validateRestoration(recoveryPath: string): Promise&lt;boolean&gt; {\n        try {\n            // Check critical files exist\n            for (const criticalFile of this.recoveryPlan.criticalFiles) {\n                const filePath = path.join(recoveryPath, criticalFile);\n                if (!fs.existsSync(filePath)) {\n                    console.error(`Critical file missing: ${criticalFile}`);\n                    return false;\n                }\n            }\n\n            // Run validation scripts\n            for (const validator of this.recoveryPlan.validators) {\n                const result = await validator.validate(recoveryPath);\n                if (!result.isValid) {\n                    console.error(`Validation failed: ${result.message}`);\n                    return false;\n                }\n            }\n\n            return true;\n        } catch (error) {\n            console.error('Validation error:', error);\n            return false;\n        }\n    }\n}\n\ninterface RecoveryPlan {\n    criticalFiles: string[];\n    validators: ValidationRule[];\n    postRecoveryTasks: RecoveryTask[];\n}\n\ninterface ValidationRule {\n    name: string;\n    validate: (path: string) =&gt; Promise&lt;{ isValid: boolean; message?: string }&gt;;\n}\n\ninterface RecoveryTask {\n    name: string;\n    execute: (projectPath: string) =&gt; Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"examples/backup-restore/#secure-backup-workflows","title":"\ud83d\udd12 Secure Backup Workflows","text":""},{"location":"examples/backup-restore/#encrypted-backup-system","title":"Encrypted Backup System","text":"<pre><code>// encrypted-backup.ts\nimport * as crypto from 'crypto';\n\nclass EncryptedBackupSystem {\n    private algorithm = 'aes-256-gcm';\n\n    async createEncryptedBackup(\n        projectPath: string,\n        backupPath: string,\n        password: string\n    ): Promise&lt;void&gt; {\n        // Generate marker file\n        const generator = new MarkerGenerator();\n        const markerContent = await generator.generate(projectPath);\n\n        // Encrypt the content\n        const encryptedData = await this.encrypt(markerContent, password);\n\n        // Save encrypted backup\n        await fs.promises.writeFile(backupPath + '.encrypted', encryptedData);\n\n        console.log('\u2705 Encrypted backup created successfully!');\n    }\n\n    async restoreFromEncryptedBackup(\n        encryptedBackupPath: string,\n        targetPath: string,\n        password: string\n    ): Promise&lt;void&gt; {\n        // Read and decrypt\n        const encryptedData = await fs.promises.readFile(encryptedBackupPath);\n        const decryptedContent = await this.decrypt(encryptedData, password);\n\n        // Extract to target\n        const extractor = new MarkerExtractor();\n        await extractor.extractFromContent(decryptedContent, targetPath);\n\n        console.log('\u2705 Encrypted backup restored successfully!');\n    }\n\n    private async encrypt(data: string, password: string): Promise&lt;Buffer&gt; {\n        const key = crypto.scryptSync(password, 'salt', 32);\n        const iv = crypto.randomBytes(16);\n        const cipher = crypto.createCipher(this.algorithm, key);\n        cipher.setAAD(Buffer.from('lookatni-backup'));\n\n        let encrypted = cipher.update(data, 'utf8');\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\n        const tag = cipher.getAuthTag();\n\n        return Buffer.concat([iv, tag, encrypted]);\n    }\n\n    private async decrypt(encryptedData: Buffer, password: string): Promise&lt;string&gt; {\n        const key = crypto.scryptSync(password, 'salt', 32);\n        const iv = encryptedData.subarray(0, 16);\n        const tag = encryptedData.subarray(16, 32);\n        const encrypted = encryptedData.subarray(32);\n\n        const decipher = crypto.createDecipher(this.algorithm, key);\n        decipher.setAAD(Buffer.from('lookatni-backup'));\n        decipher.setAuthTag(tag);\n\n        let decrypted = decipher.update(encrypted);\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\n\n        return decrypted.toString('utf8');\n    }\n}\n</code></pre>"},{"location":"examples/backup-restore/#backup-monitoring-and-reporting","title":"\ud83d\udcca Backup Monitoring and Reporting","text":""},{"location":"examples/backup-restore/#backup-health-monitor","title":"Backup Health Monitor","text":"<pre><code>// backup-monitor.ts\nclass BackupHealthMonitor {\n    private metrics: BackupMetrics = {\n        totalBackups: 0,\n        successfulBackups: 0,\n        failedBackups: 0,\n        averageBackupSize: 0,\n        lastBackupTime: null\n    };\n\n    async generateHealthReport(): Promise&lt;BackupHealthReport&gt; {\n        const projects = await this.getMonitoredProjects();\n        const report: BackupHealthReport = {\n            timestamp: new Date(),\n            overallHealth: 'healthy',\n            projects: [],\n            recommendations: []\n        };\n\n        for (const project of projects) {\n            const projectHealth = await this.assessProjectHealth(project);\n            report.projects.push(projectHealth);\n\n            if (projectHealth.status !== 'healthy') {\n                report.overallHealth = 'warning';\n            }\n        }\n\n        report.recommendations = this.generateRecommendations(report);\n\n        return report;\n    }\n\n    private async assessProjectHealth(project: ProjectConfig): Promise&lt;ProjectHealthInfo&gt; {\n        const backupDir = path.join('/backups', project.name);\n        const recentBackups = await this.getRecentBackups(backupDir, 7); // Last 7 days\n\n        const health: ProjectHealthInfo = {\n            projectName: project.name,\n            status: 'healthy',\n            lastBackupAge: this.calculateLastBackupAge(recentBackups),\n            backupSize: this.calculateAverageBackupSize(recentBackups),\n            successRate: this.calculateSuccessRate(recentBackups),\n            issues: []\n        };\n\n        // Check for issues\n        if (health.lastBackupAge &gt; 24) { // More than 24 hours\n            health.status = 'warning';\n            health.issues.push('Backup is overdue');\n        }\n\n        if (health.successRate &lt; 0.8) { // Less than 80% success rate\n            health.status = 'critical';\n            health.issues.push('Low backup success rate');\n        }\n\n        return health;\n    }\n\n    async sendAlerts(report: BackupHealthReport): Promise&lt;void&gt; {\n        const criticalProjects = report.projects.filter(p =&gt; p.status === 'critical');\n\n        if (criticalProjects.length &gt; 0) {\n            await this.sendCriticalAlert(criticalProjects);\n        }\n\n        // Send weekly summary\n        if (this.isWeeklyReportDay()) {\n            await this.sendWeeklySummary(report);\n        }\n    }\n}\n\ninterface BackupHealthReport {\n    timestamp: Date;\n    overallHealth: 'healthy' | 'warning' | 'critical';\n    projects: ProjectHealthInfo[];\n    recommendations: string[];\n}\n</code></pre>"},{"location":"examples/backup-restore/#cloud-integration","title":"\ud83c\udf10 Cloud Integration","text":""},{"location":"examples/backup-restore/#multi-cloud-backup-strategy","title":"Multi-Cloud Backup Strategy","text":"<pre><code>// cloud-backup.ts\ninterface CloudProvider {\n    name: string;\n    upload: (localPath: string, remotePath: string) =&gt; Promise&lt;void&gt;;\n    download: (remotePath: string, localPath: string) =&gt; Promise&lt;void&gt;;\n    list: (prefix: string) =&gt; Promise&lt;string[]&gt;;\n}\n\nclass MultiCloudBackupStrategy {\n    private providers: CloudProvider[];\n\n    constructor(providers: CloudProvider[]) {\n        this.providers = providers;\n    }\n\n    async distributeBackup(backupPath: string, projectName: string): Promise&lt;void&gt; {\n        const fileName = path.basename(backupPath);\n        const remotePath = `${projectName}/${fileName}`;\n\n        // Upload to all cloud providers in parallel\n        const uploadPromises = this.providers.map(provider =&gt;\n            this.uploadWithRetry(provider, backupPath, remotePath)\n        );\n\n        const results = await Promise.allSettled(uploadPromises);\n\n        // Log results\n        results.forEach((result, index) =&gt; {\n            const provider = this.providers[index];\n            if (result.status === 'fulfilled') {\n                console.log(`\u2705 Backup uploaded to ${provider.name}`);\n            } else {\n                console.error(`\u274c Failed to upload to ${provider.name}:`, result.reason);\n            }\n        });\n    }\n\n    private async uploadWithRetry(\n        provider: CloudProvider,\n        localPath: string,\n        remotePath: string,\n        retries = 3\n    ): Promise&lt;void&gt; {\n        for (let i = 0; i &lt; retries; i++) {\n            try {\n                await provider.upload(localPath, remotePath);\n                return;\n            } catch (error) {\n                if (i === retries - 1) throw error;\n                await this.delay(Math.pow(2, i) * 1000); // Exponential backoff\n            }\n        }\n    }\n\n    private delay(ms: number): Promise&lt;void&gt; {\n        return new Promise(resolve =&gt; setTimeout(resolve, ms));\n    }\n}\n</code></pre>"},{"location":"examples/backup-restore/#best-practices-summary","title":"\ud83c\udfaf Best Practices Summary","text":""},{"location":"examples/backup-restore/#backup-strategy-checklist","title":"\ud83d\udccb Backup Strategy Checklist","text":"<ul> <li>\u2705 Multiple backup tiers (hourly, daily, weekly)</li> <li>\u2705 Geographic distribution (local + cloud)</li> <li>\u2705 Automated scheduling with monitoring</li> <li>\u2705 Encryption for sensitive projects</li> <li>\u2705 Regular validation of backup integrity</li> <li>\u2705 Documented recovery procedures</li> <li>\u2705 Retention policies for storage management</li> </ul>"},{"location":"examples/backup-restore/#recovery-planning","title":"\ud83d\udd04 Recovery Planning","text":"<ul> <li>\u2705 Test recovery procedures regularly</li> <li>\u2705 Document critical file dependencies</li> <li>\u2705 Maintain recovery environment ready</li> <li>\u2705 Train team members on recovery process</li> <li>\u2705 Monitor backup health continuously</li> </ul>"},{"location":"examples/backup-restore/#security-considerations","title":"\ud83d\udee1\ufe0f Security Considerations","text":"<ul> <li>\u2705 Encrypt sensitive backups</li> <li>\u2705 Secure backup storage locations</li> <li>\u2705 Implement access controls</li> <li>\u2705 Regular security audits</li> <li>\u2705 Compliance with data protection regulations</li> </ul> <p>This comprehensive backup and restore system ensures your projects are protected against data loss while providing flexible recovery options for various scenarios.</p>"},{"location":"examples/cicd/","title":"\ud83d\udd04 CI/CD Integration Examples","text":"<p>Learn how to integrate LookAtni File Markers into your CI/CD pipelines for automated project documentation, testing, and deployment workflows.</p>"},{"location":"examples/cicd/#overview","title":"\ud83c\udfaf Overview","text":"<p>LookAtni File Markers can enhance CI/CD pipelines by providing automated project snapshots, documentation generation, and testing artifacts. This guide covers various integration patterns and use cases.</p>"},{"location":"examples/cicd/#github-actions-integration","title":"\ud83d\ude80 GitHub Actions Integration","text":""},{"location":"examples/cicd/#basic-workflow-with-lookatni","title":"Basic Workflow with LookAtni","text":"<pre><code># .github/workflows/lookatni-integration.yml\nname: LookAtni Integration\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  generate-markers:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v4\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '18'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Install LookAtni CLI\n      run: npm install -g lookatni-cli\n\n    - name: Generate project markers\n      run: |\n        lookatni generate \\\n          --source . \\\n          --output ./artifacts/project-snapshot.lookatni \\\n          --compress \\\n          --include-metadata\n\n    - name: Upload markers as artifact\n      uses: actions/upload-artifact@v4\n      with:\n        name: project-markers-${{ github.sha }}\n        path: ./artifacts/project-snapshot.lookatni\n        retention-days: 30\n\n    - name: Validate generated markers\n      run: |\n        lookatni validate ./artifacts/project-snapshot.lookatni\n\n    - name: Generate statistics\n      run: |\n        lookatni stats ./artifacts/project-snapshot.lookatni &gt; ./artifacts/project-stats.json\n\n    - name: Comment PR with statistics\n      if: github.event_name == 'pull_request'\n      uses: actions/github-script@v7\n      with:\n        script: |\n          const fs = require('fs');\n          const stats = JSON.parse(fs.readFileSync('./artifacts/project-stats.json', 'utf8'));\n\n          const comment = `## \ud83d\udcca Project Statistics\n\n          | Metric | Value |\n          |--------|-------|\n          | Total Files | ${stats.totalFiles} |\n          | Code Files | ${stats.codeFiles} |\n          | Total Size | ${stats.totalSize} |\n          | Complexity Score | ${stats.complexityScore} |\n\n          Generated by LookAtni File Markers \ud83c\udfaf`;\n\n          github.rest.issues.createComment({\n            issue_number: context.issue.number,\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            body: comment\n          });\n</code></pre>"},{"location":"examples/cicd/#advanced-workflow-with-matrix-strategy","title":"Advanced Workflow with Matrix Strategy","text":"<pre><code># .github/workflows/multi-env-markers.yml\nname: Multi-Environment Markers\n\non:\n  workflow_dispatch:\n    inputs:\n      environments:\n        description: 'Environments to process'\n        required: true\n        default: 'dev,staging,prod'\n        type: string\n\njobs:\n  generate-environment-markers:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [dev, staging, prod]\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Setup environment-specific configuration\n      run: |\n        echo \"Setting up for environment: ${{ matrix.environment }}\"\n        cp configs/${{ matrix.environment }}.env .env\n\n    - name: Generate environment markers\n      run: |\n        lookatni generate \\\n          --source . \\\n          --output ./markers/${{ matrix.environment }}-snapshot.lookatni \\\n          --config ./configs/${{ matrix.environment }}.lookatni.json \\\n          --tag \"env:${{ matrix.environment }}\" \\\n          --tag \"build:${{ github.run_number }}\"\n\n    - name: Upload environment markers\n      uses: actions/upload-artifact@v4\n      with:\n        name: markers-${{ matrix.environment }}\n        path: ./markers/${{ matrix.environment }}-snapshot.lookatni\n\n  create-release-bundle:\n    needs: generate-environment-markers\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Download all artifacts\n      uses: actions/download-artifact@v4\n\n    - name: Create release bundle\n      run: |\n        mkdir -p release-bundle\n\n        # Combine all environment markers\n        lookatni combine \\\n          --input \"markers-*/**.lookatni\" \\\n          --output release-bundle/complete-release-${{ github.run_number }}.lookatni \\\n          --metadata \"release_number:${{ github.run_number }}\" \\\n          --metadata \"release_date:$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n\n    - name: Upload release bundle\n      uses: actions/upload-artifact@v4\n      with:\n        name: release-bundle-${{ github.run_number }}\n        path: release-bundle/\n        retention-days: 90\n</code></pre>"},{"location":"examples/cicd/#gitlab-ci-integration","title":"\ud83d\udd27 GitLab CI Integration","text":""},{"location":"examples/cicd/#gitlab-pipeline-configuration","title":"GitLab Pipeline Configuration","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - build\n  - test\n  - documentation\n  - deploy\n\nvariables:\n  LOOKATNI_VERSION: \"latest\"\n  NODE_VERSION: \"18\"\n\n.lookatni-base:\n  image: node:${NODE_VERSION}\n  before_script:\n    - npm install -g lookatni-cli@${LOOKATNI_VERSION}\n  cache:\n    paths:\n      - node_modules/\n\nvalidate-project:\n  extends: .lookatni-base\n  stage: validate\n  script:\n    - lookatni validate-project --source . --strict\n    - lookatni check-dependencies --report-format json &gt; dependency-report.json\n  artifacts:\n    reports:\n      junit: dependency-report.json\n    paths:\n      - dependency-report.json\n    expire_in: 1 week\n\ngenerate-markers:\n  extends: .lookatni-base\n  stage: build\n  script:\n    - |\n      lookatni generate \\\n        --source . \\\n        --output artifacts/project-$CI_COMMIT_SHA.lookatni \\\n        --compress \\\n        --include-git-info \\\n        --metadata \"pipeline_id:$CI_PIPELINE_ID\" \\\n        --metadata \"commit_sha:$CI_COMMIT_SHA\" \\\n        --metadata \"branch:$CI_COMMIT_REF_NAME\"\n  artifacts:\n    paths:\n      - artifacts/project-$CI_COMMIT_SHA.lookatni\n    expire_in: 1 month\n\ntest-with-markers:\n  extends: .lookatni-base\n  stage: test\n  dependencies:\n    - generate-markers\n  script:\n    - |\n      # Create isolated test environment from markers\n      mkdir test-env\n      lookatni extract \\\n        --input artifacts/project-$CI_COMMIT_SHA.lookatni \\\n        --output test-env/ \\\n        --validate-integrity\n\n    - cd test-env\n    - npm ci\n    - npm test\n  coverage: '/Coverage: \\d+\\.\\d+%/'\n\ndocumentation:\n  extends: .lookatni-base\n  stage: documentation\n  script:\n    - |\n      # Generate documentation with project structure\n      lookatni doc-generate \\\n        --source . \\\n        --output docs/auto-generated/ \\\n        --format markdown \\\n        --include-tree \\\n        --include-stats\n\n    - |\n      # Create interactive project explorer\n      lookatni web-viewer \\\n        --input artifacts/project-$CI_COMMIT_SHA.lookatni \\\n        --output public/project-explorer/ \\\n        --theme dark\n  artifacts:\n    paths:\n      - docs/auto-generated/\n      - public/project-explorer/\n    expire_in: 1 week\n  only:\n    - main\n    - develop\n\ndeploy-markers:\n  extends: .lookatni-base\n  stage: deploy\n  script:\n    - |\n      # Deploy to artifact repository\n      lookatni upload \\\n        --input artifacts/project-$CI_COMMIT_SHA.lookatni \\\n        --repository $ARTIFACT_REPOSITORY_URL \\\n        --token $ARTIFACT_REPOSITORY_TOKEN \\\n        --tag \"version:$CI_COMMIT_TAG\" \\\n        --tag \"environment:production\"\n  only:\n    - tags\n</code></pre>"},{"location":"examples/cicd/#branch-specific-workflows","title":"Branch-Specific Workflows","text":"<pre><code># .gitlab-ci.yml (continued)\nfeature-branch-analysis:\n  extends: .lookatni-base\n  stage: validate\n  script:\n    - |\n      # Compare with main branch\n      git fetch origin main\n\n      lookatni diff \\\n        --base origin/main \\\n        --head HEAD \\\n        --output feature-analysis.json \\\n        --format json\n\n    - |\n      # Generate change summary\n      lookatni summarize-changes \\\n        --input feature-analysis.json \\\n        --output change-summary.md \\\n        --format markdown\n\n    - |\n      # Post comment to merge request\n      lookatni gitlab-comment \\\n        --merge-request $CI_MERGE_REQUEST_IID \\\n        --comment-file change-summary.md \\\n        --project-id $CI_PROJECT_ID \\\n        --token $GITLAB_TOKEN\n  only:\n    - merge_requests\n  artifacts:\n    paths:\n      - feature-analysis.json\n      - change-summary.md\n    expire_in: 1 week\n</code></pre>"},{"location":"examples/cicd/#jenkins-pipeline-integration","title":"\ud83c\udfd7\ufe0f Jenkins Pipeline Integration","text":""},{"location":"examples/cicd/#declarative-pipeline","title":"Declarative Pipeline","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n\n    environment {\n        LOOKATNI_CLI = 'lookatni'\n        NODE_VERSION = '18'\n    }\n\n    tools {\n        nodejs \"${NODE_VERSION}\"\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                script {\n                    // Install LookAtni CLI\n                    sh 'npm install -g lookatni-cli'\n\n                    // Verify installation\n                    sh 'lookatni --version'\n                }\n            }\n        }\n\n        stage('Pre-build Analysis') {\n            parallel {\n                stage('Generate Baseline') {\n                    steps {\n                        script {\n                            sh \"\"\"\n                                ${LOOKATNI_CLI} generate \\\\\n                                    --source . \\\\\n                                    --output baseline-${BUILD_NUMBER}.lookatni \\\\\n                                    --exclude-patterns 'node_modules/**,dist/**,*.log' \\\\\n                                    --metadata 'build_number:${BUILD_NUMBER}' \\\\\n                                    --metadata 'jenkins_job:${JOB_NAME}'\n                            \"\"\"\n                        }\n                    }\n                }\n\n                stage('Validate Project Structure') {\n                    steps {\n                        script {\n                            sh \"\"\"\n                                ${LOOKATNI_CLI} validate-structure \\\\\n                                    --source . \\\\\n                                    --rules .lookatni-rules.json \\\\\n                                    --report-format junit \\\\\n                                    --output validation-report.xml\n                            \"\"\"\n                        }\n                    }\n                    post {\n                        always {\n                            publishTestResults testResultsPattern: 'validation-report.xml'\n                        }\n                    }\n                }\n            }\n        }\n\n        stage('Build') {\n            steps {\n                sh 'npm ci'\n                sh 'npm run build'\n            }\n        }\n\n        stage('Test') {\n            steps {\n                script {\n                    // Create test environment from markers\n                    sh \"\"\"\n                        mkdir -p test-environments/clean\n                        ${LOOKATNI_CLI} extract \\\\\n                            --input baseline-${BUILD_NUMBER}.lookatni \\\\\n                            --output test-environments/clean/ \\\\\n                            --verify-checksums\n                    \"\"\"\n\n                    // Run tests in clean environment\n                    dir('test-environments/clean') {\n                        sh 'npm test'\n                    }\n                }\n            }\n        }\n\n        stage('Generate Artifacts') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'develop'\n                    buildingTag()\n                }\n            }\n            steps {\n                script {\n                    // Generate release markers\n                    sh \"\"\"\n                        ${LOOKATNI_CLI} generate \\\\\n                            --source . \\\\\n                            --output release-${BUILD_NUMBER}.lookatni \\\\\n                            --compress \\\\\n                            --include-build-info \\\\\n                            --metadata 'release_candidate:true' \\\\\n                            --metadata 'tested:true'\n                    \"\"\"\n\n                    // Generate documentation\n                    sh \"\"\"\n                        ${LOOKATNI_CLI} doc-extract \\\\\n                            --input release-${BUILD_NUMBER}.lookatni \\\\\n                            --output docs/api/ \\\\\n                            --format html \\\\\n                            --include-examples\n                    \"\"\"\n                }\n            }\n        }\n\n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                script {\n                    // Deploy using markers\n                    sh \"\"\"\n                        ${LOOKATNI_CLI} deploy \\\\\n                            --input release-${BUILD_NUMBER}.lookatni \\\\\n                            --target staging \\\\\n                            --config deploy-staging.json \\\\\n                            --verify-deployment\n                    \"\"\"\n                }\n            }\n        }\n\n        stage('Deploy to Production') {\n            when {\n                buildingTag()\n            }\n            steps {\n                script {\n                    // Production deployment with approval\n                    input message: 'Deploy to production?', \n                          parameters: [\n                              choice(name: 'DEPLOY_STRATEGY', \n                                    choices: ['blue-green', 'rolling', 'canary'],\n                                    description: 'Deployment strategy')\n                          ]\n\n                    sh \"\"\"\n                        ${LOOKATNI_CLI} deploy \\\\\n                            --input release-${BUILD_NUMBER}.lookatni \\\\\n                            --target production \\\\\n                            --strategy ${DEPLOY_STRATEGY} \\\\\n                            --config deploy-production.json \\\\\n                            --create-rollback-point\n                    \"\"\"\n                }\n            }\n        }\n    }\n\n    post {\n        always {\n            // Archive artifacts\n            archiveArtifacts artifacts: '*.lookatni, docs/**', \n                            allowEmptyArchive: true\n\n            // Cleanup\n            sh 'rm -rf test-environments/'\n        }\n\n        success {\n            script {\n                // Notification with project stats\n                def stats = sh(\n                    script: \"${LOOKATNI_CLI} stats release-${BUILD_NUMBER}.lookatni --format json\",\n                    returnStdout: true\n                ).trim()\n\n                slackSend(\n                    color: 'good',\n                    message: \"\"\"\n                        \u2705 Build ${BUILD_NUMBER} successful!\n\n                        \ud83d\udcca Project Stats:\n                        ```\n                        ${stats}\n                        ```\n                    \"\"\"\n                )\n            }\n        }\n\n        failure {\n            slackSend(\n                color: 'danger',\n                message: \"\u274c Build ${BUILD_NUMBER} failed! Check Jenkins for details.\"\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"examples/cicd/#pipeline-library-integration","title":"Pipeline Library Integration","text":"<pre><code>// vars/lookatniPipeline.groovy\ndef call(Map config) {\n    pipeline {\n        agent any\n\n        environment {\n            LOOKATNI_VERSION = config.lookatniVersion ?: 'latest'\n        }\n\n        stages {\n            stage('LookAtni Setup') {\n                steps {\n                    script {\n                        lookatniSetup(config)\n                    }\n                }\n            }\n\n            stage('Generate Markers') {\n                steps {\n                    script {\n                        generateProjectMarkers(config)\n                    }\n                }\n            }\n\n            stage('Quality Gates') {\n                parallel {\n                    stage('Structure Validation') {\n                        steps {\n                            script {\n                                validateProjectStructure(config)\n                            }\n                        }\n                    }\n\n                    stage('Dependency Analysis') {\n                        steps {\n                            script {\n                                analyzeDependencies(config)\n                            }\n                        }\n                    }\n\n                    stage('Security Scan') {\n                        steps {\n                            script {\n                                securityScanWithLookatni(config)\n                            }\n                        }\n                    }\n                }\n            }\n\n            stage('Build &amp; Test') {\n                steps {\n                    script {\n                        buildAndTestWithMarkers(config)\n                    }\n                }\n            }\n\n            stage('Release Preparation') {\n                when {\n                    anyOf {\n                        branch 'main'\n                        buildingTag()\n                    }\n                }\n                steps {\n                    script {\n                        prepareRelease(config)\n                    }\n                }\n            }\n        }\n\n        post {\n            always {\n                script {\n                    lookatniCleanup(config)\n                }\n            }\n\n            success {\n                script {\n                    lookatniNotification(config, 'success')\n                }\n            }\n\n            failure {\n                script {\n                    lookatniNotification(config, 'failure')\n                }\n            }\n        }\n    }\n}\n\ndef generateProjectMarkers(config) {\n    sh \"\"\"\n        lookatni generate \\\\\n            --source ${config.sourceDir ?: '.'} \\\\\n            --output markers/project-${BUILD_NUMBER}.lookatni \\\\\n            --config ${config.lookatniConfig ?: '.lookatni.json'} \\\\\n            --metadata 'build_number:${BUILD_NUMBER}' \\\\\n            --metadata 'branch:${BRANCH_NAME}' \\\\\n            --metadata 'commit:${GIT_COMMIT}'\n    \"\"\"\n}\n</code></pre>"},{"location":"examples/cicd/#docker-integration","title":"\ud83d\udc33 Docker Integration","text":""},{"location":"examples/cicd/#multi-stage-docker-build-with-lookatni","title":"Multi-Stage Docker Build with LookAtni","text":"<pre><code># Dockerfile\nFROM node:18-alpine AS base\nWORKDIR /app\n\n# Install LookAtni CLI\nRUN npm install -g lookatni-cli\n\n# Copy source code\nCOPY . .\n\n# Generate project markers for build reproducibility\nRUN lookatni generate \\\n    --source . \\\n    --output /tmp/build-source.lookatni \\\n    --exclude-patterns 'node_modules/**,dist/**' \\\n    --metadata \"docker_build:true\" \\\n    --metadata \"build_timestamp:$(date -u +%Y-%m-%dT%H:%M:%SZ)\"\n\n# Build stage\nFROM base AS builder\nRUN npm ci --only=production\n\n# Verify build environment matches source\nRUN lookatni extract \\\n    --input /tmp/build-source.lookatni \\\n    --output /tmp/verify-source \\\n    --verify-only\n\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\nWORKDIR /app\n\n# Copy built application\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package.json ./package.json\n\n# Copy build markers for runtime verification\nCOPY --from=builder /tmp/build-source.lookatni ./markers/\n\n# Health check using LookAtni\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD lookatni verify-runtime \\\n        --markers ./markers/build-source.lookatni \\\n        --current-state /app \\\n        --critical-files \"dist/index.js,package.json\"\n\nEXPOSE 3000\nCMD [\"node\", \"dist/index.js\"]\n</code></pre>"},{"location":"examples/cicd/#docker-compose-with-lookatni-services","title":"Docker Compose with LookAtni Services","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./markers:/app/markers\n    environment:\n      - LOOKATNI_VERIFY_ON_START=true\n    healthcheck:\n      test: [\"CMD\", \"lookatni\", \"health-check\", \"/app\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  marker-monitor:\n    image: node:18-alpine\n    volumes:\n      - .:/workspace\n      - markers-data:/markers\n    working_dir: /workspace\n    command: |\n      sh -c \"\n        npm install -g lookatni-cli &amp;&amp;\n        lookatni monitor-changes \\\n          --source /workspace \\\n          --output /markers \\\n          --interval 300 \\\n          --webhook http://notification-service:8080/markers\n      \"\n    depends_on:\n      - app\n\n  documentation:\n    image: node:18-alpine\n    volumes:\n      - .:/workspace\n      - ./docs:/docs\n    working_dir: /workspace\n    command: |\n      sh -c \"\n        npm install -g lookatni-cli &amp;&amp;\n        lookatni doc-server \\\n          --source /workspace \\\n          --output /docs \\\n          --port 8080 \\\n          --auto-reload\n      \"\n    ports:\n      - \"8080:8080\"\n\nvolumes:\n  markers-data:\n</code></pre>"},{"location":"examples/cicd/#azure-devops-integration","title":"\u26a1 Azure DevOps Integration","text":""},{"location":"examples/cicd/#azure-pipeline-yaml","title":"Azure Pipeline YAML","text":"<pre><code># azure-pipelines.yml\ntrigger:\n  branches:\n    include:\n      - main\n      - develop\n      - feature/*\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  - group: lookatni-config\n  - name: nodeVersion\n    value: '18.x'\n\nstages:\n- stage: ValidateAndGenerate\n  displayName: 'Validate and Generate Markers'\n  jobs:\n  - job: LookatniValidation\n    displayName: 'LookAtni Validation'\n    steps:\n    - task: NodeTool@0\n      inputs:\n        versionSpec: $(nodeVersion)\n      displayName: 'Setup Node.js'\n\n    - script: |\n        npm install -g lookatni-cli\n        lookatni --version\n      displayName: 'Install LookAtni CLI'\n\n    - script: |\n        lookatni validate-project \\\n          --source $(System.DefaultWorkingDirectory) \\\n          --config .lookatni-azure.json \\\n          --output validation-report.json\n      displayName: 'Validate Project Structure'\n\n    - task: PublishTestResults@2\n      inputs:\n        testResultsFormat: 'JUnit'\n        testResultsFiles: 'validation-report.xml'\n      condition: always()\n\n    - script: |\n        lookatni generate \\\n          --source $(System.DefaultWorkingDirectory) \\\n          --output $(Build.ArtifactStagingDirectory)/project-markers.lookatni \\\n          --compress \\\n          --metadata \"build_id:$(Build.BuildId)\" \\\n          --metadata \"source_branch:$(Build.SourceBranch)\" \\\n          --metadata \"agent_name:$(Agent.Name)\"\n      displayName: 'Generate Project Markers'\n\n    - task: PublishBuildArtifacts@1\n      inputs:\n        pathToPublish: '$(Build.ArtifactStagingDirectory)'\n        artifactName: 'lookatni-markers'\n      displayName: 'Publish Markers Artifact'\n\n- stage: BuildAndTest\n  displayName: 'Build and Test'\n  dependsOn: ValidateAndGenerate\n  jobs:\n  - job: BuildWithMarkers\n    displayName: 'Build with LookAtni Verification'\n    steps:\n    - task: DownloadBuildArtifacts@0\n      inputs:\n        artifactName: 'lookatni-markers'\n        downloadPath: '$(System.ArtifactsDirectory)'\n\n    - script: |\n        # Verify source integrity\n        lookatni verify-integrity \\\n          --markers $(System.ArtifactsDirectory)/lookatni-markers/project-markers.lookatni \\\n          --source $(System.DefaultWorkingDirectory)\n      displayName: 'Verify Source Integrity'\n\n    - script: |\n        npm ci\n        npm run build\n        npm test\n      displayName: 'Build and Test'\n\n    - script: |\n        # Generate post-build markers\n        lookatni generate \\\n          --source $(System.DefaultWorkingDirectory) \\\n          --output $(Build.ArtifactStagingDirectory)/post-build-markers.lookatni \\\n          --include-build-artifacts \\\n          --diff-from $(System.ArtifactsDirectory)/lookatni-markers/project-markers.lookatni\n      displayName: 'Generate Post-Build Markers'\n\n- stage: Release\n  displayName: 'Release'\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  dependsOn: BuildAndTest\n  jobs:\n  - deployment: DeployWithLookatni\n    displayName: 'Deploy with LookAtni Tracking'\n    environment: 'production'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - script: |\n              lookatni deploy-prepare \\\n                --markers $(System.ArtifactsDirectory)/lookatni-markers/post-build-markers.lookatni \\\n                --environment production \\\n                --output deployment-package.tar.gz\n            displayName: 'Prepare Deployment Package'\n\n          - script: |\n              # Deploy application\n              echo \"Deploying application...\"\n\n              # Verify deployment\n              lookatni verify-deployment \\\n                --package deployment-package.tar.gz \\\n                --target production \\\n                --health-check-url https://myapp.com/health\n            displayName: 'Deploy and Verify'\n</code></pre>"},{"location":"examples/cicd/#advanced-cicd-patterns","title":"\ud83d\udd0d Advanced CI/CD Patterns","text":""},{"location":"examples/cicd/#marker-based-feature-flags","title":"Marker-Based Feature Flags","text":"<pre><code>// feature-flag-manager.ts\nclass MarkerBasedFeatureFlags {\n    async generateFeatureBranch(\n        baseBranch: string,\n        featureName: string,\n        features: string[]\n    ): Promise&lt;void&gt; {\n        // Generate markers for base branch\n        const baseMarkers = await this.generateMarkers(baseBranch);\n\n        // Apply feature flags\n        const featureMarkers = await this.applyFeatureFlags(\n            baseMarkers,\n            features\n        );\n\n        // Deploy feature branch\n        await this.deployWithMarkers(featureMarkers, `feature-${featureName}`);\n    }\n\n    private async applyFeatureFlags(\n        baseMarkers: string,\n        features: string[]\n    ): Promise&lt;string&gt; {\n        const config = {\n            enabledFeatures: features,\n            featureFlags: this.getFeatureConfiguration(features)\n        };\n\n        return await this.lookatniCLI.transform(\n            baseMarkers,\n            'apply-feature-flags',\n            config\n        );\n    }\n}\n</code></pre>"},{"location":"examples/cicd/#progressive-deployment-with-markers","title":"Progressive Deployment with Markers","text":"<pre><code>// progressive-deployment.ts\nclass ProgressiveDeployment {\n    async executeCanaryDeployment(\n        releaseMarkers: string,\n        canaryPercentage: number = 10\n    ): Promise&lt;void&gt; {\n        // Deploy to canary environment\n        await this.deployCanary(releaseMarkers, canaryPercentage);\n\n        // Monitor metrics\n        const metrics = await this.monitorCanary(5); // 5 minutes\n\n        if (metrics.errorRate &lt; 0.1 &amp;&amp; metrics.responseTime &lt; 200) {\n            // Gradually increase traffic\n            await this.increaseCanaryTraffic(25);\n            await this.monitorCanary(10);\n\n            await this.increaseCanaryTraffic(50);\n            await this.monitorCanary(10);\n\n            // Full deployment\n            await this.promoteToProduction(releaseMarkers);\n        } else {\n            // Rollback\n            await this.rollbackCanary();\n        }\n    }\n}\n</code></pre>"},{"location":"examples/cicd/#cicd-best-practices-summary","title":"\ud83d\udccb CI/CD Best Practices Summary","text":""},{"location":"examples/cicd/#integration-checklist","title":"\u2705 Integration Checklist","text":"<ul> <li>Automated marker generation on every build</li> <li>Validation gates before deployment</li> <li>Artifact versioning with meaningful metadata</li> <li>Environment-specific configurations</li> <li>Rollback capabilities using markers</li> <li>Security scanning of generated markers</li> <li>Performance monitoring of CI/CD pipelines</li> </ul>"},{"location":"examples/cicd/#pipeline-optimization","title":"\ud83d\udd04 Pipeline Optimization","text":"<ul> <li>Parallel processing where possible</li> <li>Caching strategies for repeated operations</li> <li>Incremental builds using marker diffs</li> <li>Resource optimization for large projects</li> <li>Failure recovery mechanisms</li> </ul>"},{"location":"examples/cicd/#security-and-compliance","title":"\ud83d\udee1\ufe0f Security and Compliance","text":"<ul> <li>Secure storage of markers and artifacts</li> <li>Access control for sensitive operations</li> <li>Audit trails for all deployments</li> <li>Compliance reporting with generated data</li> <li>Encryption for sensitive marker data</li> </ul> <p>This comprehensive CI/CD integration guide ensures that LookAtni File Markers enhance your development workflow while maintaining security, reliability, and efficiency.</p>"},{"location":"examples/education/","title":"\ud83c\udf93 Educational Use Cases","text":"<p>Discover how LookAtni File Markers can transform coding education, from classroom demonstrations to student portfolio management and collaborative learning experiences.</p>"},{"location":"examples/education/#overview","title":"\ud83c\udfaf Overview","text":"<p>LookAtni File Markers offers unique advantages in educational settings by providing portable, self-contained project representations that facilitate teaching, learning, and assessment in programming courses.</p>"},{"location":"examples/education/#for-educators","title":"\ud83d\udc68\u200d\ud83c\udfeb For Educators","text":""},{"location":"examples/education/#interactive-coding-demonstrations","title":"Interactive Coding Demonstrations","text":"<pre><code>// classroom-demo-manager.ts\nimport { MarkerGenerator } from '../src/utils/markerGenerator';\nimport { MarkerExtractor } from '../src/utils/markerExtractor';\n\nclass ClassroomDemoManager {\n    private demoSteps: DemoStep[] = [];\n    private currentStep: number = 0;\n\n    async prepareLiveDemo(projectPath: string, steps: DemoStep[]): Promise&lt;void&gt; {\n        console.log('\ud83c\udfac Preparing live coding demo...');\n\n        this.demoSteps = steps;\n\n        // Generate markers for each step\n        for (let i = 0; i &lt; steps.length; i++) {\n            const step = steps[i];\n            const markerPath = `./demo-steps/step-${i + 1}-${step.name}.lookatni`;\n\n            await this.generateStepMarker(\n                projectPath,\n                step,\n                markerPath\n            );\n\n            console.log(`\u2705 Generated marker for step ${i + 1}: ${step.name}`);\n        }\n\n        console.log('\ud83c\udfaf Demo preparation complete!');\n    }\n\n    async executeStep(stepNumber: number): Promise&lt;void&gt; {\n        if (stepNumber &lt; 1 || stepNumber &gt; this.demoSteps.length) {\n            throw new Error(`Invalid step number: ${stepNumber}`);\n        }\n\n        const step = this.demoSteps[stepNumber - 1];\n        const markerPath = `./demo-steps/step-${stepNumber}-${step.name}.lookatni`;\n\n        console.log(`\\n\ud83c\udfac Executing Step ${stepNumber}: ${step.name}`);\n        console.log(`\ud83d\udcdd Description: ${step.description}`);\n\n        // Clear current workspace\n        await this.clearWorkspace('./live-demo');\n\n        // Extract step content\n        const extractor = new MarkerExtractor();\n        await extractor.extract(markerPath, './live-demo');\n\n        // Display step explanation\n        this.displayStepExplanation(step);\n\n        this.currentStep = stepNumber;\n        console.log('\u2705 Step executed successfully!');\n    }\n\n    async generateProblemSet(\n        baseProject: string,\n        exercises: Exercise[]\n    ): Promise&lt;void&gt; {\n        console.log('\ud83d\udcda Generating problem set...');\n\n        for (const exercise of exercises) {\n            const exercisePath = `./exercises/${exercise.id}`;\n\n            // Create exercise directory\n            await fs.promises.mkdir(exercisePath, { recursive: true });\n\n            // Generate starter code marker\n            await this.generateStarterCode(baseProject, exercise, exercisePath);\n\n            // Generate solution marker\n            await this.generateSolution(baseProject, exercise, exercisePath);\n\n            // Generate test cases\n            await this.generateTestCases(exercise, exercisePath);\n\n            console.log(`\u2705 Generated exercise: ${exercise.title}`);\n        }\n\n        console.log('\ud83c\udfaf Problem set generation complete!');\n    }\n\n    private async generateStarterCode(\n        baseProject: string,\n        exercise: Exercise,\n        exercisePath: string\n    ): Promise&lt;void&gt; {\n        const generator = new MarkerGenerator();\n\n        // Copy base project\n        await fs.promises.cp(baseProject, `${exercisePath}/starter`, { recursive: true });\n\n        // Apply exercise modifications\n        await this.applyExerciseModifications(\n            `${exercisePath}/starter`,\n            exercise.modifications\n        );\n\n        // Generate marker\n        const starterMarker = await generator.generate(`${exercisePath}/starter`);\n        await fs.promises.writeFile(\n            `${exercisePath}/starter-code.lookatni`,\n            starterMarker\n        );\n    }\n\n    private displayStepExplanation(step: DemoStep): void {\n        console.log('\\n\ud83d\udccb Step Explanation:');\n        console.log('===================');\n        console.log(step.explanation);\n\n        if (step.keyPoints &amp;&amp; step.keyPoints.length &gt; 0) {\n            console.log('\\n\ud83d\udd11 Key Points:');\n            step.keyPoints.forEach((point, index) =&gt; {\n                console.log(`  ${index + 1}. ${point}`);\n            });\n        }\n\n        if (step.codeHighlights &amp;&amp; step.codeHighlights.length &gt; 0) {\n            console.log('\\n\ud83d\udca1 Code Highlights:');\n            step.codeHighlights.forEach(highlight =&gt; {\n                console.log(`  \ud83d\udcc1 ${highlight.file}:`);\n                console.log(`     ${highlight.description}`);\n            });\n        }\n    }\n}\n\ninterface DemoStep {\n    name: string;\n    description: string;\n    explanation: string;\n    keyPoints?: string[];\n    codeHighlights?: CodeHighlight[];\n    modifications?: FileModification[];\n}\n\ninterface Exercise {\n    id: string;\n    title: string;\n    description: string;\n    difficulty: 'beginner' | 'intermediate' | 'advanced';\n    topics: string[];\n    modifications: FileModification[];\n    testCases: TestCase[];\n    solution: Solution;\n}\n\n// Usage example\nasync function prepareLiveDemo() {\n    const demoManager = new ClassroomDemoManager();\n\n    const steps: DemoStep[] = [\n        {\n            name: 'basic-setup',\n            description: 'Setting up a basic React component',\n            explanation: 'We start with a simple functional component that displays a greeting message.',\n            keyPoints: [\n                'Functional components are the modern way to write React',\n                'JSX allows us to write HTML-like syntax in JavaScript',\n                'Props are used to pass data to components'\n            ],\n            codeHighlights: [\n                {\n                    file: 'src/components/Greeting.jsx',\n                    description: 'Basic functional component with props'\n                }\n            ]\n        },\n        {\n            name: 'add-state',\n            description: 'Adding state management with useState hook',\n            explanation: 'Now we introduce state to make our component interactive.',\n            keyPoints: [\n                'useState hook manages component state',\n                'State updates trigger re-renders',\n                'Event handlers update state based on user interactions'\n            ]\n        },\n        {\n            name: 'add-effects',\n            description: 'Implementing side effects with useEffect',\n            explanation: 'We add useEffect to handle side effects like API calls.',\n            keyPoints: [\n                'useEffect runs after component renders',\n                'Dependency array controls when effect runs',\n                'Cleanup functions prevent memory leaks'\n            ]\n        }\n    ];\n\n    await demoManager.prepareLiveDemo('./demo-project', steps);\n\n    // During class, execute steps one by one\n    await demoManager.executeStep(1);\n    // ... continue with other steps\n}\n</code></pre>"},{"location":"examples/education/#automated-assessment-system","title":"Automated Assessment System","text":"<pre><code>// assessment-system.ts\nclass AutomatedAssessmentSystem {\n    async createAssignment(\n        assignmentConfig: AssignmentConfig\n    ): Promise&lt;Assignment&gt; {\n        console.log(`\ud83d\udcdd Creating assignment: ${assignmentConfig.title}`);\n\n        const assignment: Assignment = {\n            id: this.generateAssignmentId(),\n            title: assignmentConfig.title,\n            description: assignmentConfig.description,\n            dueDate: assignmentConfig.dueDate,\n            starterCode: await this.generateStarterMarker(assignmentConfig),\n            testSuite: await this.generateTestSuite(assignmentConfig),\n            rubric: assignmentConfig.rubric,\n            submissions: []\n        };\n\n        await this.saveAssignment(assignment);\n\n        console.log(`\u2705 Assignment created with ID: ${assignment.id}`);\n        return assignment;\n    }\n\n    async submitSolution(\n        assignmentId: string,\n        studentId: string,\n        solutionPath: string\n    ): Promise&lt;SubmissionResult&gt; {\n        console.log(`\ud83d\udce4 Processing submission from student: ${studentId}`);\n\n        // Generate marker for submission\n        const generator = new MarkerGenerator();\n        const submissionMarker = await generator.generate(solutionPath, {\n            includeMetadata: true,\n            metadata: {\n                studentId,\n                submissionTime: new Date().toISOString(),\n                assignmentId\n            }\n        });\n\n        // Run automated tests\n        const testResults = await this.runAutomatedTests(\n            submissionMarker,\n            assignmentId\n        );\n\n        // Analyze code quality\n        const codeAnalysis = await this.analyzeCodeQuality(submissionMarker);\n\n        // Plagiarism detection\n        const plagiarismCheck = await this.checkPlagiarism(\n            submissionMarker,\n            assignmentId\n        );\n\n        // Calculate grade\n        const grade = await this.calculateGrade(\n            testResults,\n            codeAnalysis,\n            assignmentId\n        );\n\n        const submission: Submission = {\n            id: this.generateSubmissionId(),\n            studentId,\n            assignmentId,\n            submissionTime: new Date(),\n            marker: submissionMarker,\n            testResults,\n            codeAnalysis,\n            plagiarismCheck,\n            grade,\n            feedback: await this.generateFeedback(testResults, codeAnalysis)\n        };\n\n        await this.saveSubmission(submission);\n\n        return {\n            submissionId: submission.id,\n            grade: submission.grade,\n            feedback: submission.feedback,\n            testsPassed: testResults.passed,\n            testsTotal: testResults.total\n        };\n    }\n\n    private async runAutomatedTests(\n        submissionMarker: string,\n        assignmentId: string\n    ): Promise&lt;TestResults&gt; {\n        // Extract submission to temporary directory\n        const tempDir = `/tmp/test-${Date.now()}`;\n        const extractor = new MarkerExtractor();\n        await extractor.extractFromContent(submissionMarker, tempDir);\n\n        // Load test suite\n        const assignment = await this.loadAssignment(assignmentId);\n\n        // Run tests\n        const testRunner = new TestRunner();\n        const results = await testRunner.run(tempDir, assignment.testSuite);\n\n        // Cleanup\n        await fs.promises.rm(tempDir, { recursive: true });\n\n        return results;\n    }\n\n    private async analyzeCodeQuality(submissionMarker: string): Promise&lt;CodeAnalysis&gt; {\n        const analyzer = new CodeQualityAnalyzer();\n\n        return await analyzer.analyze(submissionMarker, {\n            checkStyle: true,\n            checkComplexity: true,\n            checkDuplication: true,\n            checkMaintainability: true\n        });\n    }\n\n    async generateProgressReport(studentId: string): Promise&lt;ProgressReport&gt; {\n        const submissions = await this.getStudentSubmissions(studentId);\n\n        const report: ProgressReport = {\n            studentId,\n            totalAssignments: submissions.length,\n            averageGrade: this.calculateAverageGrade(submissions),\n            progressTrend: this.analyzeProgressTrend(submissions),\n            strengths: this.identifyStrengths(submissions),\n            areasForImprovement: this.identifyWeaknesses(submissions),\n            recommendations: this.generateRecommendations(submissions)\n        };\n\n        return report;\n    }\n}\n</code></pre>"},{"location":"examples/education/#course-content-management","title":"Course Content Management","text":"<pre><code>// course-content-manager.ts\nclass CourseContentManager {\n    async createCourse(courseConfig: CourseConfig): Promise&lt;Course&gt; {\n        console.log(`\ud83c\udf93 Creating course: ${courseConfig.title}`);\n\n        const course: Course = {\n            id: this.generateCourseId(),\n            title: courseConfig.title,\n            description: courseConfig.description,\n            modules: [],\n            students: [],\n            instructors: courseConfig.instructors\n        };\n\n        // Generate course modules\n        for (const moduleConfig of courseConfig.modules) {\n            const module = await this.createModule(moduleConfig, course.id);\n            course.modules.push(module);\n        }\n\n        await this.saveCourse(course);\n        return course;\n    }\n\n    private async createModule(\n        moduleConfig: ModuleConfig,\n        courseId: string\n    ): Promise&lt;CourseModule&gt; {\n        const module: CourseModule = {\n            id: this.generateModuleId(),\n            title: moduleConfig.title,\n            description: moduleConfig.description,\n            lessons: [],\n            assignments: [],\n            order: moduleConfig.order\n        };\n\n        // Create lessons\n        for (const lessonConfig of moduleConfig.lessons) {\n            const lesson = await this.createLesson(lessonConfig, courseId, module.id);\n            module.lessons.push(lesson);\n        }\n\n        // Create assignments\n        for (const assignmentConfig of moduleConfig.assignments) {\n            const assignment = await this.createAssignment(assignmentConfig);\n            module.assignments.push(assignment.id);\n        }\n\n        return module;\n    }\n\n    async createLesson(\n        lessonConfig: LessonConfig,\n        courseId: string,\n        moduleId: string\n    ): Promise&lt;Lesson&gt; {\n        console.log(`\ud83d\udcda Creating lesson: ${lessonConfig.title}`);\n\n        // Generate lesson starter code\n        const starterMarker = await this.generateLessonStarter(lessonConfig);\n\n        // Generate step-by-step progression\n        const progressionMarkers = await this.generateLessonProgression(lessonConfig);\n\n        // Generate final solution\n        const solutionMarker = await this.generateLessonSolution(lessonConfig);\n\n        const lesson: Lesson = {\n            id: this.generateLessonId(),\n            title: lessonConfig.title,\n            description: lessonConfig.description,\n            objectives: lessonConfig.objectives,\n            prerequisites: lessonConfig.prerequisites,\n            starterCode: starterMarker,\n            progression: progressionMarkers,\n            solution: solutionMarker,\n            resources: lessonConfig.resources,\n            estimatedDuration: lessonConfig.estimatedDuration\n        };\n\n        await this.saveLesson(lesson);\n        return lesson;\n    }\n\n    async generateCurriculumPlan(\n        subject: string,\n        level: 'beginner' | 'intermediate' | 'advanced',\n        duration: number // weeks\n    ): Promise&lt;CurriculumPlan&gt; {\n        const plan: CurriculumPlan = {\n            subject,\n            level,\n            duration,\n            weeks: []\n        };\n\n        const topics = this.getTopicsForSubject(subject, level);\n        const weeksCount = duration;\n\n        for (let week = 1; week &lt;= weeksCount; week++) {\n            const weekPlan = await this.generateWeekPlan(\n                week,\n                topics,\n                subject,\n                level\n            );\n\n            plan.weeks.push(weekPlan);\n        }\n\n        return plan;\n    }\n}\n</code></pre>"},{"location":"examples/education/#for-students","title":"\ud83d\udc68\u200d\ud83c\udf93 For Students","text":""},{"location":"examples/education/#personal-portfolio-system","title":"Personal Portfolio System","text":"<pre><code>// student-portfolio.ts\nclass StudentPortfolio {\n    private studentId: string;\n    private portfolioPath: string;\n\n    constructor(studentId: string) {\n        this.studentId = studentId;\n        this.portfolioPath = `./portfolios/${studentId}`;\n    }\n\n    async addProject(\n        projectPath: string,\n        projectInfo: ProjectInfo\n    ): Promise&lt;void&gt; {\n        console.log(`\ud83d\udcc1 Adding project to portfolio: ${projectInfo.title}`);\n\n        // Generate project marker\n        const generator = new MarkerGenerator();\n        const projectMarker = await generator.generate(projectPath, {\n            includeMetadata: true,\n            metadata: {\n                ...projectInfo,\n                studentId: this.studentId,\n                addedDate: new Date().toISOString()\n            }\n        });\n\n        // Save to portfolio\n        const markerPath = path.join(\n            this.portfolioPath,\n            `${projectInfo.id}.lookatni`\n        );\n\n        await fs.promises.mkdir(this.portfolioPath, { recursive: true });\n        await fs.promises.writeFile(markerPath, projectMarker);\n\n        // Update portfolio index\n        await this.updatePortfolioIndex(projectInfo);\n\n        console.log('\u2705 Project added to portfolio!');\n    }\n\n    async generatePortfolioWebsite(): Promise&lt;void&gt; {\n        console.log('\ud83c\udf10 Generating portfolio website...');\n\n        const portfolioData = await this.loadPortfolioData();\n        const websiteGenerator = new PortfolioWebsiteGenerator();\n\n        await websiteGenerator.generate(portfolioData, {\n            outputDir: `${this.portfolioPath}/website`,\n            theme: 'modern',\n            includeCodeViewer: true,\n            includeLiveDemo: true\n        });\n\n        console.log('\u2705 Portfolio website generated!');\n    }\n\n    async shareProject(\n        projectId: string,\n        shareOptions: ShareOptions\n    ): Promise&lt;string&gt; {\n        const projectMarker = await this.getProjectMarker(projectId);\n\n        if (shareOptions.platform === 'github') {\n            return await this.shareToGitHub(projectMarker, shareOptions);\n        } else if (shareOptions.platform === 'web') {\n            return await this.shareToWeb(projectMarker, shareOptions);\n        } else {\n            throw new Error(`Unsupported sharing platform: ${shareOptions.platform}`);\n        }\n    }\n\n    async analyzeProgress(): Promise&lt;ProgressAnalysis&gt; {\n        const projects = await this.getAllProjects();\n\n        const analysis: ProgressAnalysis = {\n            totalProjects: projects.length,\n            skillsAcquired: this.extractSkills(projects),\n            languagesUsed: this.extractLanguages(projects),\n            frameworksUsed: this.extractFrameworks(projects),\n            progressTimeline: this.generateTimeline(projects),\n            complexityGrowth: this.analyzeComplexityGrowth(projects),\n            recommendations: this.generateRecommendations(projects)\n        };\n\n        return analysis;\n    }\n\n    private extractSkills(projects: ProjectInfo[]): string[] {\n        const skills = new Set&lt;string&gt;();\n\n        projects.forEach(project =&gt; {\n            project.technologies?.forEach(tech =&gt; skills.add(tech));\n            project.concepts?.forEach(concept =&gt; skills.add(concept));\n        });\n\n        return Array.from(skills);\n    }\n}\n</code></pre>"},{"location":"examples/education/#study-group-collaboration","title":"Study Group Collaboration","text":"<pre><code>// study-group.ts\nclass StudyGroupManager {\n    async createStudyGroup(\n        groupName: string,\n        members: string[],\n        subject: string\n    ): Promise&lt;StudyGroup&gt; {\n        console.log(`\ud83d\udc65 Creating study group: ${groupName}`);\n\n        const group: StudyGroup = {\n            id: this.generateGroupId(),\n            name: groupName,\n            members: members,\n            subject: subject,\n            createdDate: new Date(),\n            sharedProjects: [],\n            discussions: [],\n            resources: []\n        };\n\n        await this.saveStudyGroup(group);\n\n        // Create shared workspace\n        await this.createSharedWorkspace(group.id);\n\n        return group;\n    }\n\n    async shareProjectWithGroup(\n        groupId: string,\n        studentId: string,\n        projectPath: string,\n        shareNote: string\n    ): Promise&lt;void&gt; {\n        console.log(`\ud83d\udce4 Sharing project with study group...`);\n\n        // Generate project marker\n        const generator = new MarkerGenerator();\n        const projectMarker = await generator.generate(projectPath, {\n            includeMetadata: true,\n            metadata: {\n                sharedBy: studentId,\n                shareDate: new Date().toISOString(),\n                shareNote: shareNote,\n                groupId: groupId\n            }\n        });\n\n        // Save to group workspace\n        const groupWorkspace = await this.getGroupWorkspace(groupId);\n        const sharedProjectPath = path.join(\n            groupWorkspace,\n            'shared-projects',\n            `${studentId}-${Date.now()}.lookatni`\n        );\n\n        await fs.promises.writeFile(sharedProjectPath, projectMarker);\n\n        // Notify group members\n        await this.notifyGroupMembers(groupId, {\n            type: 'project_shared',\n            from: studentId,\n            message: shareNote,\n            projectPath: sharedProjectPath\n        });\n\n        console.log('\u2705 Project shared with study group!');\n    }\n\n    async createCollaborativeProject(\n        groupId: string,\n        projectConfig: CollaborativeProjectConfig\n    ): Promise&lt;void&gt; {\n        console.log(`\ud83e\udd1d Creating collaborative project: ${projectConfig.title}`);\n\n        const group = await this.loadStudyGroup(groupId);\n\n        // Create project structure\n        const projectPath = await this.setupCollaborativeProject(\n            groupId,\n            projectConfig\n        );\n\n        // Assign roles to members\n        await this.assignRoles(group.members, projectConfig.roles);\n\n        // Generate initial project marker\n        const generator = new MarkerGenerator();\n        const initialMarker = await generator.generate(projectPath);\n\n        // Create version control system using markers\n        await this.initializeMarkerVersionControl(groupId, initialMarker);\n\n        console.log('\u2705 Collaborative project created!');\n    }\n\n    async syncGroupWorkspace(groupId: string): Promise&lt;void&gt; {\n        const group = await this.loadStudyGroup(groupId);\n        const workspace = await this.getGroupWorkspace(groupId);\n\n        // Generate current workspace marker\n        const generator = new MarkerGenerator();\n        const currentMarker = await generator.generate(workspace);\n\n        // Compare with last sync\n        const lastSyncMarker = await this.getLastSyncMarker(groupId);\n        const changes = await this.compareMarkers(lastSyncMarker, currentMarker);\n\n        if (changes.hasChanges) {\n            // Notify members of changes\n            await this.notifyGroupMembers(groupId, {\n                type: 'workspace_updated',\n                changes: changes.summary,\n                updatedBy: changes.lastModifiedBy\n            });\n\n            // Update sync marker\n            await this.saveLastSyncMarker(groupId, currentMarker);\n        }\n    }\n}\n</code></pre>"},{"location":"examples/education/#institutional-applications","title":"\ud83c\udfeb Institutional Applications","text":""},{"location":"examples/education/#course-material-distribution","title":"Course Material Distribution","text":"<pre><code>// course-distribution.ts\nclass CourseDistributionSystem {\n    async distributeCoursePackage(\n        courseId: string,\n        students: string[]\n    ): Promise&lt;void&gt; {\n        console.log(`\ud83d\udce6 Distributing course package to ${students.length} students`);\n\n        const courseData = await this.loadCourseData(courseId);\n\n        // Generate master course package\n        const packageMarker = await this.generateCoursePackage(courseData);\n\n        // Distribute to each student\n        for (const studentId of students) {\n            await this.distributeToStudent(studentId, packageMarker, courseData);\n        }\n\n        console.log('\u2705 Course package distributed successfully!');\n    }\n\n    private async generateCoursePackage(courseData: CourseData): Promise&lt;string&gt; {\n        const generator = new MarkerGenerator();\n\n        // Create temporary course structure\n        const tempDir = `/tmp/course-${courseData.id}-${Date.now()}`;\n        await this.buildCourseStructure(tempDir, courseData);\n\n        // Generate package marker\n        const packageMarker = await generator.generate(tempDir, {\n            includeMetadata: true,\n            metadata: {\n                courseId: courseData.id,\n                courseTitle: courseData.title,\n                version: courseData.version,\n                distributionDate: new Date().toISOString()\n            }\n        });\n\n        // Cleanup\n        await fs.promises.rm(tempDir, { recursive: true });\n\n        return packageMarker;\n    }\n\n    async trackStudentProgress(\n        courseId: string,\n        studentId: string\n    ): Promise&lt;StudentProgress&gt; {\n        const studentWorkspace = await this.getStudentWorkspace(courseId, studentId);\n\n        // Analyze current workspace\n        const analyzer = new ProgressAnalyzer();\n        const progress = await analyzer.analyzeWorkspace(studentWorkspace);\n\n        return {\n            studentId,\n            courseId,\n            completedLessons: progress.completedLessons,\n            submittedAssignments: progress.submittedAssignments,\n            codeQuality: progress.codeQuality,\n            timeSpent: progress.timeSpent,\n            lastActivity: progress.lastActivity\n        };\n    }\n}\n</code></pre>"},{"location":"examples/education/#academic-integrity-monitoring","title":"Academic Integrity Monitoring","text":"<pre><code>// academic-integrity.ts\nclass AcademicIntegrityMonitor {\n    async checkSubmissionIntegrity(\n        submission: Submission,\n        referenceDatabase: string[]\n    ): Promise&lt;IntegrityReport&gt; {\n        console.log(`\ud83d\udd0d Checking submission integrity for student: ${submission.studentId}`);\n\n        const report: IntegrityReport = {\n            submissionId: submission.id,\n            studentId: submission.studentId,\n            overallScore: 0,\n            checks: [],\n            flagged: false,\n            recommendations: []\n        };\n\n        // Plagiarism detection\n        const plagiarismCheck = await this.checkPlagiarism(\n            submission.marker,\n            referenceDatabase\n        );\n        report.checks.push(plagiarismCheck);\n\n        // Code similarity analysis\n        const similarityCheck = await this.checkCodeSimilarity(\n            submission.marker,\n            referenceDatabase\n        );\n        report.checks.push(similarityCheck);\n\n        // Unusual patterns detection\n        const patternsCheck = await this.checkUnusualPatterns(submission.marker);\n        report.checks.push(patternsCheck);\n\n        // Calculate overall score\n        report.overallScore = this.calculateIntegrityScore(report.checks);\n\n        // Flag if score is below threshold\n        if (report.overallScore &lt; 0.7) {\n            report.flagged = true;\n            report.recommendations = this.generateRecommendations(report.checks);\n        }\n\n        return report;\n    }\n\n    private async checkPlagiarism(\n        submissionMarker: string,\n        referenceDatabase: string[]\n    ): Promise&lt;IntegrityCheck&gt; {\n        const checker = new PlagiarismChecker();\n\n        const results = await checker.compare(submissionMarker, referenceDatabase);\n\n        return {\n            type: 'plagiarism',\n            score: results.originalityScore,\n            details: results.matches,\n            passed: results.originalityScore &gt; 0.8\n        };\n    }\n\n    async generateClassReport(\n        assignmentId: string,\n        submissions: Submission[]\n    ): Promise&lt;ClassIntegrityReport&gt; {\n        console.log(`\ud83d\udcca Generating class integrity report for assignment: ${assignmentId}`);\n\n        const report: ClassIntegrityReport = {\n            assignmentId,\n            totalSubmissions: submissions.length,\n            flaggedSubmissions: 0,\n            averageIntegrityScore: 0,\n            patterns: [],\n            recommendations: []\n        };\n\n        let totalScore = 0;\n\n        for (const submission of submissions) {\n            const integrityReport = await this.checkSubmissionIntegrity(\n                submission,\n                submissions.map(s =&gt; s.marker)\n            );\n\n            if (integrityReport.flagged) {\n                report.flaggedSubmissions++;\n            }\n\n            totalScore += integrityReport.overallScore;\n        }\n\n        report.averageIntegrityScore = totalScore / submissions.length;\n\n        // Analyze patterns across class\n        report.patterns = await this.analyzeClassPatterns(submissions);\n\n        return report;\n    }\n}\n</code></pre>"},{"location":"examples/education/#gamification-elements","title":"\ud83c\udfae Gamification Elements","text":""},{"location":"examples/education/#achievement-system","title":"Achievement System","text":"<pre><code>// achievement-system.ts\nclass AchievementSystem {\n    private achievements: Achievement[] = [\n        {\n            id: 'first-project',\n            name: 'Hello World',\n            description: 'Complete your first project',\n            icon: '\ud83c\udfaf',\n            points: 10\n        },\n        {\n            id: 'clean-code',\n            name: 'Clean Coder',\n            description: 'Achieve 90%+ code quality score',\n            icon: '\u2728',\n            points: 25\n        },\n        {\n            id: 'collaboration',\n            name: 'Team Player',\n            description: 'Contribute to 5 group projects',\n            icon: '\ud83e\udd1d',\n            points: 50\n        },\n        {\n            id: 'mentor',\n            name: 'Mentor',\n            description: 'Help 3 fellow students',\n            icon: '\ud83d\udc68\u200d\ud83c\udfeb',\n            points: 75\n        }\n    ];\n\n    async checkAchievements(studentId: string): Promise&lt;Achievement[]&gt; {\n        const studentData = await this.getStudentData(studentId);\n        const earnedAchievements: Achievement[] = [];\n\n        for (const achievement of this.achievements) {\n            if (await this.isAchievementEarned(achievement, studentData)) {\n                if (!studentData.earnedAchievements.includes(achievement.id)) {\n                    earnedAchievements.push(achievement);\n                    await this.awardAchievement(studentId, achievement);\n                }\n            }\n        }\n\n        return earnedAchievements;\n    }\n\n    async generateLeaderboard(courseId: string): Promise&lt;LeaderboardEntry[]&gt; {\n        const students = await this.getCourseStudents(courseId);\n        const entries: LeaderboardEntry[] = [];\n\n        for (const studentId of students) {\n            const studentData = await this.getStudentData(studentId);\n            const points = this.calculateTotalPoints(studentData);\n\n            entries.push({\n                studentId,\n                points,\n                level: this.calculateLevel(points),\n                achievements: studentData.earnedAchievements.length,\n                projectsCompleted: studentData.projects.length\n            });\n        }\n\n        return entries.sort((a, b) =&gt; b.points - a.points);\n    }\n}\n</code></pre>"},{"location":"examples/education/#interactive-learning-paths","title":"Interactive Learning Paths","text":"<pre><code>// learning-paths.ts\nclass LearningPathManager {\n    async createAdaptivePath(\n        studentId: string,\n        subject: string,\n        targetLevel: string\n    ): Promise&lt;LearningPath&gt; {\n        console.log(`\ud83d\udee4\ufe0f Creating adaptive learning path for ${studentId}`);\n\n        // Assess current skill level\n        const currentLevel = await this.assessSkillLevel(studentId, subject);\n\n        // Generate personalized path\n        const path = await this.generatePath(currentLevel, targetLevel, subject);\n\n        // Customize based on learning style\n        const learningStyle = await this.identifyLearningStyle(studentId);\n        await this.customizeForLearningStyle(path, learningStyle);\n\n        return path;\n    }\n\n    async updatePathProgress(\n        studentId: string,\n        pathId: string,\n        completedActivity: string\n    ): Promise&lt;void&gt; {\n        const path = await this.getLearningPath(pathId);\n        const studentProgress = await this.getStudentProgress(studentId, pathId);\n\n        // Mark activity as completed\n        studentProgress.completedActivities.push(completedActivity);\n\n        // Check if prerequisites for next activities are met\n        const nextActivities = await this.getNextAvailableActivities(\n            path,\n            studentProgress\n        );\n\n        // Adapt path based on performance\n        const performance = await this.analyzePerformance(studentId, completedActivity);\n        if (performance.strugglingAreas.length &gt; 0) {\n            await this.addReinforcementActivities(path, performance.strugglingAreas);\n        }\n\n        await this.saveStudentProgress(studentId, pathId, studentProgress);\n    }\n}\n</code></pre>"},{"location":"examples/education/#educational-analytics","title":"\ud83d\udcca Educational Analytics","text":""},{"location":"examples/education/#learning-outcome-analysis","title":"Learning Outcome Analysis","text":"<pre><code>// learning-analytics.ts\nclass LearningAnalytics {\n    async analyzeLearningOutcomes(\n        courseId: string,\n        timeframe: DateRange\n    ): Promise&lt;LearningOutcomeReport&gt; {\n        const students = await this.getCourseStudents(courseId);\n        const assignments = await this.getCourseAssignments(courseId, timeframe);\n\n        const report: LearningOutcomeReport = {\n            courseId,\n            timeframe,\n            totalStudents: students.length,\n            objectives: [],\n            overallSuccess: 0,\n            recommendations: []\n        };\n\n        // Analyze each learning objective\n        const objectives = await this.getCourseObjectives(courseId);\n\n        for (const objective of objectives) {\n            const objectiveAnalysis = await this.analyzeObjective(\n                objective,\n                students,\n                assignments\n            );\n\n            report.objectives.push(objectiveAnalysis);\n        }\n\n        report.overallSuccess = this.calculateOverallSuccess(report.objectives);\n        report.recommendations = this.generateRecommendations(report.objectives);\n\n        return report;\n    }\n\n    async trackCodingProgress(studentId: string): Promise&lt;CodingProgressReport&gt; {\n        const submissions = await this.getStudentSubmissions(studentId);\n        const projects = await this.getStudentProjects(studentId);\n\n        const report: CodingProgressReport = {\n            studentId,\n            timelineAnalysis: this.analyzeTimeline(submissions),\n            skillDevelopment: this.analyzeSkillDevelopment(submissions),\n            codeQualityTrend: this.analyzeCodingQuality(submissions),\n            complexityProgression: this.analyzeComplexityProgression(projects),\n            languageProficiency: this.analyzeLinguisticProficiency(submissions),\n            recommendations: []\n        };\n\n        report.recommendations = this.generatePersonalizedRecommendations(report);\n\n        return report;\n    }\n}\n</code></pre>"},{"location":"examples/education/#best-practices-for-educational-use","title":"\ud83c\udfaf Best Practices for Educational Use","text":""},{"location":"examples/education/#implementation-checklist","title":"\ud83d\udccb Implementation Checklist","text":""},{"location":"examples/education/#for-instructors","title":"For Instructors","text":"<ul> <li>\u2705 Prepare modular content with clear progression steps</li> <li>\u2705 Create comprehensive starter templates for different skill levels</li> <li>\u2705 Implement automated validation for consistent assessment</li> <li>\u2705 Design interactive demonstrations with step-by-step reveals</li> <li>\u2705 Establish clear grading rubrics integrated with code analysis</li> </ul>"},{"location":"examples/education/#for-students_1","title":"For Students","text":"<ul> <li>\u2705 Maintain organized project portfolio with proper documentation</li> <li>\u2705 Document learning journey with reflective notes</li> <li>\u2705 Participate actively in study groups and collaborative projects</li> <li>\u2705 Regularly backup and version important work</li> <li>\u2705 Share knowledge and help fellow students</li> </ul>"},{"location":"examples/education/#for-institutions","title":"For Institutions","text":"<ul> <li>\u2705 Implement academic integrity monitoring with fair policies</li> <li>\u2705 Provide training for instructors and students</li> <li>\u2705 Establish clear guidelines for tool usage</li> <li>\u2705 Monitor learning outcomes and adjust curricula accordingly</li> <li>\u2705 Ensure data privacy and security compliance</li> </ul>"},{"location":"examples/education/#workflow-optimization","title":"\ud83d\udd04 Workflow Optimization","text":""},{"location":"examples/education/#course-development","title":"Course Development","text":"<ol> <li>Curriculum Design \u2192 Define learning objectives and outcomes</li> <li>Content Creation \u2192 Develop modular, progressive content</li> <li>Assessment Design \u2192 Create fair, automated evaluation systems</li> <li>Platform Integration \u2192 Seamless LMS integration</li> <li>Continuous Improvement \u2192 Regular analysis and updates</li> </ol>"},{"location":"examples/education/#student-experience","title":"Student Experience","text":"<ol> <li>Onboarding \u2192 Introduction to tools and workflows</li> <li>Practice \u2192 Hands-on exercises with immediate feedback</li> <li>Collaboration \u2192 Group projects and peer learning</li> <li>Assessment \u2192 Fair, comprehensive evaluation</li> <li>Reflection \u2192 Portfolio development and progress tracking</li> </ol> <p>This comprehensive guide demonstrates how LookAtni File Markers can transform programming education by providing powerful tools for instruction, learning, collaboration, and assessment while maintaining academic integrity and fostering genuine skill development.</p>"},{"location":"examples/react-sharing/","title":"\ud83d\ude80 React Project Sharing","text":"<p>Learn how to package and share React projects seamlessly with LookAtni File Markers.</p>"},{"location":"examples/react-sharing/#overview","title":"Overview","text":"<p>Sharing React projects traditionally involves: - \u274c Large <code>node_modules</code> folders (100MB+) - \u274c Complex setup instructions - \u274c Version compatibility issues - \u274c Missing dependencies</p> <p>With LookAtni File Markers: - \u2705 Single lightweight text file - \u2705 Complete project structure preserved - \u2705 No dependencies included - \u2705 Works across any environment</p>"},{"location":"examples/react-sharing/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":""},{"location":"examples/react-sharing/#1-create-sample-react-project","title":"1. Create Sample React Project","text":"<p>Let's start with a typical React project structure:</p> <pre><code>my-react-app/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 App.js\n\u2502   \u251c\u2500\u2500 App.css\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u2514\u2500\u2500 TodoList.js\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u2514\u2500\u2500 api.js\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"examples/react-sharing/#2-set-up-the-project","title":"2. Set Up the Project","text":"<pre><code># Create project directory\nmkdir my-react-app\ncd my-react-app\n\n# Create package.json\ncat &gt; package.json &lt;&lt; 'EOF'\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \"&gt;0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\nEOF\n\n# Create public files\nmkdir public\ncat &gt; public/index.html &lt;&lt; 'EOF'\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\" /&gt;\n  &lt;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n  &lt;title&gt;My React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEOF\n\n# Create source files\nmkdir -p src/components src/utils\n\ncat &gt; src/index.js &lt;&lt; 'EOF'\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;App /&gt;\n  &lt;/React.StrictMode&gt;\n);\nEOF\n\ncat &gt; src/App.js &lt;&lt; 'EOF'\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport { fetchTodos } from './utils/api';\nimport './App.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    const loadTodos = async () =&gt; {\n      try {\n        const data = await fetchTodos();\n        setTodos(data);\n      } catch (error) {\n        console.error('Failed to load todos:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const addTodo = (text) =&gt; {\n    const newTodo = {\n      id: Date.now(),\n      text,\n      completed: false\n    };\n    setTodos([...todos, newTodo]);\n  };\n\n  const toggleTodo = (id) =&gt; {\n    setTodos(todos.map(todo =&gt;\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    ));\n  };\n\n  if (loading) {\n    return &lt;div className=\"loading\"&gt;Loading...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;Header onAddTodo={addTodo} /&gt;\n      &lt;TodoList todos={todos} onToggle={toggleTodo} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\nEOF\n\ncat &gt; src/App.css &lt;&lt; 'EOF'\n.App {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n}\n\n.loading {\n  text-align: center;\n  padding: 50px;\n  font-size: 18px;\n  color: #666;\n}\n\n.header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 30px;\n  border-radius: 12px;\n  margin-bottom: 30px;\n  text-align: center;\n}\n\n.todo-form {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.todo-input {\n  flex: 1;\n  padding: 12px;\n  border: 2px solid #e1e5e9;\n  border-radius: 6px;\n  font-size: 16px;\n}\n\n.todo-button {\n  padding: 12px 24px;\n  background: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background 0.2s;\n}\n\n.todo-button:hover {\n  background: #45a049;\n}\n\n.todo-list {\n  list-style: none;\n  padding: 0;\n}\n\n.todo-item {\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  margin: 10px 0;\n  background: #f8f9fa;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.todo-item:hover {\n  background: #e9ecef;\n  transform: translateX(5px);\n}\n\n.todo-item.completed {\n  opacity: 0.6;\n  text-decoration: line-through;\n}\n\n.todo-checkbox {\n  margin-right: 15px;\n}\nEOF\n\ncat &gt; src/components/Header.js &lt;&lt; 'EOF'\nimport React, { useState } from 'react';\n\nfunction Header({ onAddTodo }) {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      onAddTodo(inputValue.trim());\n      setInputValue('');\n    }\n  };\n\n  return (\n    &lt;div className=\"header\"&gt;\n      &lt;h1&gt;\ud83d\ude80 LookAtni Todo App&lt;/h1&gt;\n      &lt;p&gt;Built with React and shared via LookAtni File Markers!&lt;/p&gt;\n\n      &lt;form onSubmit={handleSubmit} className=\"todo-form\"&gt;\n        &lt;input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) =&gt; setInputValue(e.target.value)}\n          placeholder=\"Add a new todo...\"\n          className=\"todo-input\"\n        /&gt;\n        &lt;button type=\"submit\" className=\"todo-button\"&gt;\n          Add Todo\n        &lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Header;\nEOF\n\ncat &gt; src/components/TodoList.js &lt;&lt; 'EOF'\nimport React from 'react';\n\nfunction TodoList({ todos, onToggle }) {\n  if (todos.length === 0) {\n    return (\n      &lt;div style={{ textAlign: 'center', padding: '50px', color: '#666' }}&gt;\n        &lt;h3&gt;No todos yet!&lt;/h3&gt;\n        &lt;p&gt;Add your first todo above to get started.&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;ul className=\"todo-list\"&gt;\n      {todos.map(todo =&gt; (\n        &lt;li\n          key={todo.id}\n          className={`todo-item ${todo.completed ? 'completed' : ''}`}\n          onClick={() =&gt; onToggle(todo.id)}\n        &gt;\n          &lt;input\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() =&gt; {}} // Handled by parent click\n            className=\"todo-checkbox\"\n          /&gt;\n          &lt;span&gt;{todo.text}&lt;/span&gt;\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n\nexport default TodoList;\nEOF\n\ncat &gt; src/utils/api.js &lt;&lt; 'EOF'\n// Mock API functions for demo purposes\nexport const fetchTodos = async () =&gt; {\n  // Simulate API delay\n  await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n  return [\n    { id: 1, text: 'Learn React', completed: true },\n    { id: 2, text: 'Try LookAtni File Markers', completed: false },\n    { id: 3, text: 'Share your project', completed: false }\n  ];\n};\n\nexport const saveTodo = async (todo) =&gt; {\n  // Simulate API call\n  await new Promise(resolve =&gt; setTimeout(resolve, 500));\n  return { ...todo, id: Date.now() };\n};\n\nexport const updateTodo = async (id, updates) =&gt; {\n  // Simulate API call\n  await new Promise(resolve =&gt; setTimeout(resolve, 300));\n  return { id, ...updates };\n};\nEOF\n\ncat &gt; README.md &lt;&lt; 'EOF'\n# My React Todo App\n\nA simple React todo application demonstrating LookAtni File Markers.\n\n## Features\n\n- \u2705 Add new todos\n- \u2705 Mark todos as complete\n- \u2705 Responsive design\n- \u2705 Modern React hooks\n- \u2705 Component-based architecture\n\n## Getting Started\n\n1. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n2. Start development server:\n   ```bash\n   npm start\n   ```\n\n3. Open [http://localhost:3000](http://localhost:3000)\n\n## Project Structure\n\n- `src/App.js` - Main application component\n- `src/components/` - Reusable React components\n- `src/utils/` - Utility functions and API calls\n- `public/` - Static assets\n\n## Built With\n\n- React 18\n- Modern CSS\n- Local state management\n\n## Shared via LookAtni\n\nThis project was packaged and shared using LookAtni File Markers - \nno node_modules required!\nEOF\n</code></pre>"},{"location":"examples/react-sharing/#3-generate-markers","title":"3. Generate Markers","text":"<p>Now let's create markers from our React project:</p> <ol> <li>Open VS Code in the project directory</li> <li>Command Palette (<code>Ctrl+Shift+P</code>) \u2192 <code>LookAtni: Generate Markers</code></li> <li>Configure generation:</li> <li>Source folder: <code>./</code> (current directory)</li> <li>Output file: <code>react-todo-markers.txt</code></li> <li>Exclude patterns: <code>node_modules</code>, <code>build</code>, <code>.git</code></li> <li>Include patterns: <code>src/**/*</code>, <code>public/**/*</code>, <code>package.json</code>, <code>README.md</code></li> </ol>"},{"location":"examples/react-sharing/#4-review-generated-markers","title":"4. Review Generated Markers","text":"<p>The generated <code>react-todo-markers.txt</code> will look like:</p> <pre><code>//\u241c/ package.json /\u241c//\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\"\n  },\n  // ... rest of package.json\n}\n\n//\u241c/ src/App.js /\u241c//\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\n// ... rest of App.js\n\n//\u241c/ src/components/Header.js /\u241c//\nimport React, { useState } from 'react';\n\nfunction Header({ onAddTodo }) {\n  // ... component code\n}\n// ... and so on for all files\n</code></pre>"},{"location":"examples/react-sharing/#sharing-the-project","title":"Sharing the Project","text":""},{"location":"examples/react-sharing/#via-github-issuesprs","title":"Via GitHub Issues/PRs","text":"<pre><code>Here's the complete React Todo app:\n\n[Attach: react-todo-markers.txt]\n\nTo run:\n1. Extract using LookAtni: Extract Files\n2. cd into the folder\n3. npm install\n4. npm start\n</code></pre>"},{"location":"examples/react-sharing/#via-emailslack","title":"Via Email/Slack","text":"<p>Simply attach the <code>react-todo-markers.txt</code> file - it's typically under 50KB for most React projects!</p>"},{"location":"examples/react-sharing/#via-documentation","title":"Via Documentation","text":"<p>Include the markers file in your documentation:</p> <pre><code>## Example Project\n\nDownload the complete working example: [react-todo-markers.txt](./react-todo-markers.txt)\n\nExtract with LookAtni File Markers extension in VS Code.\n</code></pre>"},{"location":"examples/react-sharing/#extraction-setup","title":"Extraction &amp; Setup","text":"<p>When someone receives your markers file:</p>"},{"location":"examples/react-sharing/#1-extract-files","title":"1. Extract Files","text":"<ol> <li>Open VS Code</li> <li>Command Palette \u2192 <code>LookAtni: Extract Files</code></li> <li>Select <code>react-todo-markers.txt</code></li> <li>Choose destination folder</li> <li>Extract!</li> </ol>"},{"location":"examples/react-sharing/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>cd extracted-project-folder\nnpm install\n</code></pre>"},{"location":"examples/react-sharing/#3-run-the-project","title":"3. Run the Project","text":"<pre><code>npm start\n</code></pre> <p>The project runs exactly as the original!</p>"},{"location":"examples/react-sharing/#advanced-react-sharing","title":"Advanced React Sharing","text":""},{"location":"examples/react-sharing/#selective-component-sharing","title":"Selective Component Sharing","text":"<p>Share just components you want to showcase:</p> <pre><code># Generate markers for specific components\nLookAtni: Generate Markers\n\u251c\u2500 Include: src/components/Header.js\n\u251c\u2500 Include: src/components/TodoList.js\n\u251c\u2500 Include: src/App.css\n\u2514\u2500 Exclude: everything else\n</code></pre>"},{"location":"examples/react-sharing/#code-review-workflow","title":"Code Review Workflow","text":"<pre><code># 1. Developer creates feature branch\ngit checkout -b feature/new-component\n\n# 2. Generate markers for review\nLookAtni: Generate Markers \u2192 feature-review.txt\n\n# 3. Share with team\n# Reviewers extract and test locally\n\n# 4. Iterate based on feedback\n</code></pre>"},{"location":"examples/react-sharing/#educational-use","title":"Educational Use","text":"<p>Perfect for React tutorials and workshops:</p> <pre><code># Create lesson markers\nlesson-1-setup.txt      # Basic React setup\nlesson-2-components.txt # Component basics\nlesson-3-state.txt      # State management\nlesson-4-complete.txt   # Final application\n</code></pre>"},{"location":"examples/react-sharing/#best-practices","title":"Best Practices","text":""},{"location":"examples/react-sharing/#optimize-for-size","title":"Optimize for Size","text":"<pre><code>{\n  \"lookatni.excludePatterns\": [\n    \"node_modules\",\n    \"build\",\n    \"dist\",\n    \".git\",\n    \"*.log\",\n    \"coverage\",\n    \".nyc_output\",\n    \"*.min.js\",\n    \"*.map\"\n  ],\n  \"lookatni.maxFileSize\": 500\n}\n</code></pre>"},{"location":"examples/react-sharing/#include-documentation","title":"Include Documentation","text":"<p>Always include: - <code>README.md</code> with setup instructions - <code>package.json</code> with dependencies - Key configuration files - Example usage files</p>"},{"location":"examples/react-sharing/#test-before-sharing","title":"Test Before Sharing","text":"<ol> <li>Generate markers</li> <li>Extract to new folder</li> <li>Install and run</li> <li>Verify everything works</li> <li>Then share with confidence</li> </ol> <p>\ud83c\udf89 React Sharing Mastered!</p> <p>You've learned how to efficiently share React projects using LookAtni File Markers. No more node_modules nightmares!</p>"},{"location":"features/cli-tools/","title":"\ud83d\udd27 CLI Tools","text":"<p>Powerful command-line interface for automation, CI/CD integration, and advanced LookAtni workflows.</p>"},{"location":"features/cli-tools/#installation","title":"Installation","text":""},{"location":"features/cli-tools/#global-installation","title":"Global Installation","text":"<pre><code># Install via npm\nnpm install -g lookatni-cli\n\n# Install via yarn\nyarn global add lookatni-cli\n\n# Install via pnpm\npnpm add -g lookatni-cli\n</code></pre>"},{"location":"features/cli-tools/#local-project-installation","title":"Local Project Installation","text":"<pre><code># Install as dev dependency\nnpm install --save-dev lookatni-cli\n\n# Use with npx\nnpx lookatni-cli --help\n</code></pre>"},{"location":"features/cli-tools/#core-commands","title":"Core Commands","text":""},{"location":"features/cli-tools/#generate-markers","title":"Generate Markers","text":"<p>Create marker files from project directories:</p> <pre><code># Basic generation\nlookatni generate --source ./my-project --output project-markers.txt\n\n# With filters\nlookatni generate \\\n  --source ./my-project \\\n  --output markers.txt \\\n  --include \"src/**/*.ts,*.json\" \\\n  --exclude \"node_modules/**,*.log\"\n\n# Advanced options\nlookatni generate \\\n  --source ./my-project \\\n  --output markers.txt \\\n  --preserve-structure \\\n  --include-metadata \\\n  --compress \\\n  --verbose\n</code></pre>"},{"location":"features/cli-tools/#extract-files","title":"Extract Files","text":"<p>Restore projects from marker files:</p> <pre><code># Basic extraction\nlookatni extract --input project-markers.txt --output ./restored\n\n# Selective extraction\nlookatni extract \\\n  --input project-markers.txt \\\n  --output ./components-only \\\n  --filter \"src/components/**\"\n\n# With conflict resolution\nlookatni extract \\\n  --input project-markers.txt \\\n  --output ./project \\\n  --overwrite \\\n  --backup\n</code></pre>"},{"location":"features/cli-tools/#validate-markers","title":"Validate Markers","text":"<p>Verify marker file integrity:</p> <pre><code># Quick validation\nlookatni validate project-markers.txt\n\n# Detailed validation\nlookatni validate project-markers.txt \\\n  --detailed \\\n  --fix-suggestions \\\n  --output-report validation-report.json\n\n# Batch validation\nlookatni validate *.txt --parallel=4\n</code></pre>"},{"location":"features/cli-tools/#advanced-commands","title":"Advanced Commands","text":""},{"location":"features/cli-tools/#project-analysis","title":"Project Analysis","text":"<p>Analyze project structure and dependencies:</p> <pre><code># Analyze project\nlookatni analyze --source ./my-project --output analysis.json\n\n# Dependency graph\nlookatni analyze --source ./my-project --graph-output deps.dot\n\n# Size analysis\nlookatni analyze --source ./my-project --size-breakdown\n</code></pre>"},{"location":"features/cli-tools/#comparison-tools","title":"Comparison Tools","text":"<p>Compare projects and marker files:</p> <pre><code># Compare two marker files\nlookatni diff markers-v1.txt markers-v2.txt\n\n# Compare marker file with directory\nlookatni diff markers.txt ./project-directory\n\n# Generate change report\nlookatni diff markers-v1.txt markers-v2.txt --report changes.json\n</code></pre>"},{"location":"features/cli-tools/#transformation-tools","title":"Transformation Tools","text":"<p>Convert and transform marker files:</p> <pre><code># Convert to different format\nlookatni convert markers.txt --format json --output project.json\n\n# Merge multiple marker files\nlookatni merge markers-1.txt markers-2.txt --output combined.txt\n\n# Split large marker file\nlookatni split large-markers.txt --by-directory --output-dir ./split\n</code></pre>"},{"location":"features/cli-tools/#configuration","title":"Configuration","text":""},{"location":"features/cli-tools/#global-configuration","title":"Global Configuration","text":"<pre><code># Set global defaults\nlookatni config set default.output ./markers\nlookatni config set default.include \"src/**,docs/**\"\nlookatni config set default.exclude \"node_modules/**,*.log\"\n\n# View current config\nlookatni config list\n\n# Reset to defaults\nlookatni config reset\n</code></pre>"},{"location":"features/cli-tools/#project-configuration","title":"Project Configuration","text":"<p>Create <code>.lookatni.json</code> in your project:</p> <pre><code>{\n  \"include\": [\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\", \n    \"*.json\",\n    \"*.md\"\n  ],\n  \"exclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"*.log\",\n    \".git/**\"\n  ],\n  \"output\": {\n    \"directory\": \"./markers\",\n    \"filename\": \"{{project}}-{{timestamp}}.txt\",\n    \"compress\": true\n  },\n  \"validation\": {\n    \"strict\": true,\n    \"maxFileSize\": \"10MB\",\n    \"allowedExtensions\": [\".ts\", \".tsx\", \".js\", \".jsx\", \".json\", \".md\"]\n  }\n}\n</code></pre>"},{"location":"features/cli-tools/#automation-examples","title":"Automation Examples","text":""},{"location":"features/cli-tools/#build-scripts","title":"Build Scripts","text":"<p>Add to your <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"markers:generate\": \"lookatni generate --source src --output dist/markers.txt\",\n    \"markers:validate\": \"lookatni validate dist/markers.txt --strict\",\n    \"markers:extract\": \"lookatni extract --input markers.txt --output temp/project\",\n    \"markers:all\": \"npm run markers:generate &amp;&amp; npm run markers:validate\"\n  }\n}\n</code></pre>"},{"location":"features/cli-tools/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"features/cli-tools/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Generate and Validate Markers\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  markers:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install LookAtni CLI\n        run: npm install -g lookatni-cli\n\n      - name: Generate markers\n        run: lookatni generate --source . --output project-markers.txt\n\n      - name: Validate markers\n        run: lookatni validate project-markers.txt --strict\n\n      - name: Upload markers artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: project-markers\n          path: project-markers.txt\n</code></pre>"},{"location":"features/cli-tools/#gitlab-ci","title":"GitLab CI","text":"<pre><code>stages:\n  - build\n  - validate\n  - deploy\n\ngenerate_markers:\n  stage: build\n  script:\n    - npm install -g lookatni-cli\n    - lookatni generate --source . --output project-markers.txt\n  artifacts:\n    paths:\n      - project-markers.txt\n    expire_in: 1 week\n\nvalidate_markers:\n  stage: validate\n  dependencies:\n    - generate_markers\n  script:\n    - npm install -g lookatni-cli\n    - lookatni validate project-markers.txt --strict --output-report validation.json\n  artifacts:\n    reports:\n      junit: validation.json\n</code></pre>"},{"location":"features/cli-tools/#docker-integration","title":"Docker Integration","text":"<pre><code>FROM node:18-alpine\n\n# Install LookAtni CLI\nRUN npm install -g lookatni-cli\n\n# Copy project\nCOPY . /app\nWORKDIR /app\n\n# Generate markers\nRUN lookatni generate --source . --output /output/project-markers.txt\n\n# Validate\nRUN lookatni validate /output/project-markers.txt --strict\n\n# Set output volume\nVOLUME [\"/output\"]\n</code></pre>"},{"location":"features/cli-tools/#scripting-examples","title":"Scripting Examples","text":""},{"location":"features/cli-tools/#bash-automation","title":"Bash Automation","text":"<pre><code>#!/bin/bash\n\n# Project backup script\nPROJECT_NAME=$(basename \"$PWD\")\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nOUTPUT_FILE=\"${PROJECT_NAME}_${TIMESTAMP}.txt\"\n\necho \"Creating project markers for $PROJECT_NAME...\"\n\n# Generate markers\nlookatni generate \\\n  --source . \\\n  --output \"$OUTPUT_FILE\" \\\n  --include \"src/**,docs/**,*.json,*.md\" \\\n  --exclude \"node_modules/**,dist/**,*.log\" \\\n  --compress \\\n  --verbose\n\n# Validate\nif lookatni validate \"$OUTPUT_FILE\" --strict; then\n  echo \"\u2705 Markers created successfully: $OUTPUT_FILE\"\n\n  # Upload to cloud storage (example)\n  # aws s3 cp \"$OUTPUT_FILE\" \"s3://my-backups/projects/\"\nelse\n  echo \"\u274c Validation failed\"\n  exit 1\nfi\n</code></pre>"},{"location":"features/cli-tools/#powershell-automation","title":"PowerShell Automation","text":"<pre><code># Project deployment script\nparam(\n    [string]$MarkerFile,\n    [string]$DeploymentPath = \"./deployment\",\n    [switch]$Backup\n)\n\n# Extract project\nWrite-Host \"Extracting project from $MarkerFile...\"\n\n$extractArgs = @(\n    \"extract\"\n    \"--input\", $MarkerFile\n    \"--output\", $DeploymentPath\n)\n\nif ($Backup) {\n    $extractArgs += \"--backup\"\n}\n\n&amp; lookatni @extractArgs\n\n# Validate extraction\nif (lookatni validate $MarkerFile --extracted $DeploymentPath) {\n    Write-Host \"\u2705 Deployment successful\"\n} else {\n    Write-Host \"\u274c Deployment validation failed\"\n    exit 1\n}\n</code></pre>"},{"location":"features/cli-tools/#api-integration","title":"API Integration","text":""},{"location":"features/cli-tools/#nodejs-module","title":"Node.js Module","text":"<pre><code>const { LookAtniCLI } = require('lookatni-cli');\n\n// Programmatic usage\nasync function createProjectBackup(projectPath) {\n  const cli = new LookAtniCLI();\n\n  // Generate markers\n  const result = await cli.generate({\n    source: projectPath,\n    output: `backup-${Date.now()}.txt`,\n    include: ['src/**', 'docs/**'],\n    exclude: ['node_modules/**']\n  });\n\n  // Validate\n  const validation = await cli.validate(result.outputFile);\n\n  if (validation.isValid) {\n    console.log('\u2705 Backup created successfully');\n    return result.outputFile;\n  } else {\n    throw new Error('Validation failed');\n  }\n}\n</code></pre>"},{"location":"features/cli-tools/#python-integration","title":"Python Integration","text":"<pre><code>import subprocess\nimport json\n\ndef generate_markers(source_dir, output_file):\n    \"\"\"Generate markers using LookAtni CLI\"\"\"\n\n    cmd = [\n        'lookatni', 'generate',\n        '--source', source_dir,\n        '--output', output_file,\n        '--format', 'json'\n    ]\n\n    result = subprocess.run(cmd, capture_output=True, text=True)\n\n    if result.returncode == 0:\n        return json.loads(result.stdout)\n    else:\n        raise Exception(f\"Generation failed: {result.stderr}\")\n\ndef validate_markers(marker_file):\n    \"\"\"Validate marker file\"\"\"\n\n    cmd = ['lookatni', 'validate', marker_file, '--json']\n    result = subprocess.run(cmd, capture_output=True, text=True)\n\n    return json.loads(result.stdout)\n</code></pre>"},{"location":"features/cli-tools/#performance-tips","title":"Performance Tips","text":""},{"location":"features/cli-tools/#large-projects","title":"Large Projects","text":"<pre><code># Use parallel processing\nlookatni generate --source . --output markers.txt --parallel=8\n\n# Stream large files\nlookatni generate --source . --output markers.txt --stream\n\n# Compress output\nlookatni generate --source . --output markers.txt --compress\n</code></pre>"},{"location":"features/cli-tools/#memory-optimization","title":"Memory Optimization","text":"<pre><code># Limit memory usage\nlookatni generate --source . --output markers.txt --max-memory=2GB\n\n# Use temporary files for large projects\nlookatni generate --source . --output markers.txt --use-temp\n</code></pre> <p>Next: Explore Configuration Guide for detailed setup options.</p>"},{"location":"features/extraction/","title":"\ud83d\udce5 File Extraction","text":"<p>Extract complete projects from LookAtni marker files with perfect fidelity and zero data loss.</p>"},{"location":"features/extraction/#quick-start","title":"Quick Start","text":"<pre><code># Extract from VS Code\nLookAtni: Extract Files \u2192 select marker file \u2192 choose destination\n\n# Extract via CLI\nlookatni extract --input project-markers.txt --output ./restored-project\n</code></pre>"},{"location":"features/extraction/#how-extraction-works","title":"How Extraction Works","text":"<p>The extraction process reconstructs your project in three phases:</p> <ol> <li>Marker Parsing - Reads and validates marker file structure</li> <li>Structure Creation - Recreates folder hierarchy</li> <li>File Restoration - Writes files with original content and metadata</li> </ol>"},{"location":"features/extraction/#features","title":"Features","text":""},{"location":"features/extraction/#perfect-fidelity","title":"\ud83c\udfaf Perfect Fidelity","text":"<ul> <li>Exact content restoration - Byte-for-byte accuracy</li> <li>Folder structure - Complete directory hierarchy</li> <li>File metadata - Timestamps and permissions (when possible)</li> <li>Encoding preservation - UTF-8, ASCII, binary files</li> </ul>"},{"location":"features/extraction/#smart-extraction","title":"\u26a1 Smart Extraction","text":"<pre><code># Extract specific folders only\nlookatni extract --input markers.txt --filter \"src/**\"\n\n# Extract with conflict resolution\nlookatni extract --input markers.txt --on-conflict=overwrite\n\n# Dry run to preview extraction\nlookatni extract --input markers.txt --dry-run\n</code></pre>"},{"location":"features/extraction/#safety-features","title":"\ud83d\udd12 Safety Features","text":"<ul> <li>Conflict detection - Warns about existing files</li> <li>Backup creation - Optional backup of overwritten files</li> <li>Validation checks - Ensures marker file integrity</li> <li>Progress tracking - Real-time extraction progress</li> </ul>"},{"location":"features/extraction/#extraction-options","title":"Extraction Options","text":""},{"location":"features/extraction/#vs-code-command","title":"VS Code Command","text":"<p>The VS Code command provides an interactive experience:</p> <ol> <li>File Selection - Browse for marker files</li> <li>Destination Choice - Select output directory</li> <li>Conflict Resolution - Handle existing files</li> <li>Progress Display - Visual extraction progress</li> </ol>"},{"location":"features/extraction/#cli-tool","title":"CLI Tool","text":"<p>Full command-line control with advanced options:</p> <pre><code>lookatni extract [options]\n\nOptions:\n  --input, -i     Input marker file (required)\n  --output, -o    Output directory (default: current)\n  --filter, -f    Extract specific paths only\n  --exclude, -e   Exclude specific patterns\n  --overwrite     Overwrite existing files\n  --backup        Create backups before overwriting\n  --dry-run       Preview extraction without writing\n  --verbose, -v   Show detailed progress\n</code></pre>"},{"location":"features/extraction/#use-cases","title":"Use Cases","text":""},{"location":"features/extraction/#educational-content","title":"\ud83d\udcda Educational Content","text":"<p>Perfect for distributing course materials and tutorials:</p> <pre><code># Student downloads tutorial-project.txt\nlookatni extract --input tutorial-project.txt --output ./lesson-1\ncd lesson-1\nnpm install  # Project ready to run!\n</code></pre>"},{"location":"features/extraction/#team-collaboration","title":"\ud83d\udc65 Team Collaboration","text":"<p>Share project slices without full repository access:</p> <pre><code># Extract just the component library\nlookatni extract --input full-project.txt \\\n  --filter \"src/components/**\" \\\n  --output ./component-review\n</code></pre>"},{"location":"features/extraction/#deployment-cicd","title":"\ud83d\ude80 Deployment &amp; CI/CD","text":"<p>Automate project packaging and deployment:</p> <pre><code># Extract configuration files for deployment\nlookatni extract --input deployment-package.txt \\\n  --filter \"config/**,scripts/**\" \\\n  --output ./deploy-staging\n</code></pre>"},{"location":"features/extraction/#advanced-features","title":"Advanced Features","text":""},{"location":"features/extraction/#selective-extraction","title":"Selective Extraction","text":"<p>Extract only the files you need:</p> <pre><code># Extract TypeScript files only\nlookatni extract --input project.txt --filter \"**/*.ts,**/*.tsx\"\n\n# Extract everything except tests\nlookatni extract --input project.txt --exclude \"**/*.test.*,**/tests/**\"\n</code></pre>"},{"location":"features/extraction/#conflict-resolution","title":"Conflict Resolution","text":"<p>Handle existing files intelligently:</p> Interactive ModeAutomatic Modes <pre><code># Prompt for each conflict\nlookatni extract --input project.txt --interactive\n</code></pre> <pre><code># Always overwrite\nlookatni extract --input project.txt --overwrite\n\n# Always skip existing\nlookatni extract --input project.txt --skip-existing\n\n# Create backups\nlookatni extract --input project.txt --backup\n</code></pre>"},{"location":"features/extraction/#validation-verification","title":"Validation &amp; Verification","text":"<p>Ensure extraction accuracy:</p> <pre><code># Verify extraction integrity\nlookatni verify --input project.txt --extracted ./my-project\n\n# Compare with original\nlookatni diff --markers project.txt --directory ./my-project\n</code></pre>"},{"location":"features/extraction/#error-handling","title":"Error Handling","text":"<p>LookAtni provides comprehensive error handling:</p>"},{"location":"features/extraction/#common-issues","title":"Common Issues","text":"<p>Marker File Corrupted</p> <pre><code>Error: Invalid marker format detected\nSolution: Re-generate markers from original source\n</code></pre> <p>Insufficient Permissions</p> <pre><code>Error: Cannot write to destination directory\nSolution: Check directory permissions or choose different location\n</code></pre> <p>Disk Space</p> <pre><code>Error: Not enough space for extraction\nSolution: Free up disk space or extract to different drive\n</code></pre>"},{"location":"features/extraction/#recovery-options","title":"Recovery Options","text":"<ul> <li>Partial extraction - Continue with remaining files</li> <li>Repair mode - Attempt to fix corrupted markers</li> <li>Logging - Detailed logs for troubleshooting</li> </ul>"},{"location":"features/extraction/#performance","title":"Performance","text":""},{"location":"features/extraction/#extraction-speed","title":"Extraction Speed","text":"<ul> <li>Small projects (&lt; 100 files) - Instant</li> <li>Medium projects (&lt; 1000 files) - &lt; 5 seconds  </li> <li>Large projects (&lt; 10000 files) - &lt; 30 seconds</li> </ul>"},{"location":"features/extraction/#memory-usage","title":"Memory Usage","text":"<ul> <li>Streaming extraction - Constant memory usage</li> <li>Large files - Processed in chunks</li> <li>Memory-efficient - No full file buffering</li> </ul>"},{"location":"features/extraction/#integration-examples","title":"Integration Examples","text":""},{"location":"features/extraction/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Extract Project\n  run: |\n    npm install -g lookatni-cli\n    lookatni extract --input project-markers.txt --output ./build\n</code></pre>"},{"location":"features/extraction/#docker-containers","title":"Docker Containers","text":"<pre><code>RUN npm install -g lookatni-cli\nCOPY project-markers.txt .\nRUN lookatni extract --input project-markers.txt --output ./app\n</code></pre> <p>Next: Learn about Validation Systems to ensure project integrity.</p>"},{"location":"features/generation/","title":"\ud83c\udfd7\ufe0f Marker Generation","text":"<p>Transform any project into portable, shareable markers with intelligent file organization and metadata preservation.</p>"},{"location":"features/generation/#overview","title":"Overview","text":"<p>The Marker Generation system is the heart of LookAtni File Markers. It analyzes your project structure, applies intelligent filters, and creates a single text file containing all your project files with unique separation markers.</p>"},{"location":"features/generation/#how-it-works","title":"How It Works","text":""},{"location":"features/generation/#file-analysis","title":"File Analysis","text":"<p>LookAtni performs deep analysis of your project:</p> <ol> <li>Structure Mapping - Maps complete directory hierarchy</li> <li>File Type Detection - Identifies programming languages and file types</li> <li>Dependency Analysis - Detects package files and dependencies</li> <li>Size Calculation - Measures file sizes and project complexity</li> <li>Relationship Mapping - Understands file imports and references</li> </ol>"},{"location":"features/generation/#intelligent-filtering","title":"Intelligent Filtering","text":"<p>Advanced filtering keeps your markers clean and focused:</p> <pre><code>// Default exclusion patterns\nconst defaultExcludes = [\n  'node_modules',\n  '.git',\n  'dist',\n  'build',\n  '*.log',\n  'coverage',\n  '.DS_Store'\n];\n\n// Size-based filtering\nconst maxFileSize = 1000; // KB\nconst totalSizeLimit = 50000; // KB\n</code></pre>"},{"location":"features/generation/#marker-format","title":"Marker Format","text":"<p>Each file is wrapped with unique markers:</p> <pre><code>//\u241c/ path/to/file.js /\u241c//\n[File content here]\n\n//\u241c/ path/to/another.js /\u241c//\n[Another file content]\n</code></pre>"},{"location":"features/generation/#generation-modes","title":"Generation Modes","text":""},{"location":"features/generation/#interactive-mode","title":"Interactive Mode","text":"<p>Step-by-step generation with full control:</p> <ol> <li>Command Palette \u2192 <code>LookAtni: Generate Markers</code></li> <li>Select source folder</li> <li>Choose output location</li> <li>Configure filters and options</li> <li>Review and generate</li> </ol>"},{"location":"features/generation/#quick-mode","title":"Quick Mode","text":"<p>Fast generation with smart defaults:</p> <ol> <li>Right-click on folder in Explorer</li> <li>Select \"LookAtni: Generate Markers\"</li> <li>Choose output file</li> <li>Generate instantly</li> </ol>"},{"location":"features/generation/#cli-mode","title":"CLI Mode","text":"<p>Programmatic generation for automation:</p> <pre><code># Basic generation\nnpm run lookatni generate ./src markers.txt\n\n# With custom options\nnpm run lookatni generate ./project output.txt \\\n  --exclude node_modules \\\n  --exclude \"*.log\" \\\n  --max-size 500 \\\n  --include \"*.ts\" \\\n  --include \"*.js\"\n</code></pre>"},{"location":"features/generation/#configuration-options","title":"Configuration Options","text":""},{"location":"features/generation/#file-filters","title":"File Filters","text":"<p>Control which files are included:</p> <pre><code>{\n  \"lookatni.includePatterns\": [\n    \"*.ts\",\n    \"*.js\",\n    \"*.tsx\",\n    \"*.jsx\",\n    \"*.css\",\n    \"*.md\"\n  ],\n  \"lookatni.excludePatterns\": [\n    \"node_modules\",\n    \".git\",\n    \"dist\",\n    \"build\",\n    \"*.log\",\n    \"coverage\",\n    \".DS_Store\",\n    \"*.min.js\"\n  ]\n}\n</code></pre>"},{"location":"features/generation/#size-limits","title":"Size Limits","text":"<p>Manage marker file size:</p> <pre><code>{\n  \"lookatni.defaultMaxFileSize\": 1000,\n  \"lookatni.maxTotalSize\": 50000,\n  \"lookatni.warnOnLargeFiles\": true,\n  \"lookatni.compressLargeContent\": true\n}\n</code></pre>"},{"location":"features/generation/#output-options","title":"Output Options","text":"<p>Customize the generated markers:</p> <pre><code>{\n  \"lookatni.includeMetadata\": true,\n  \"lookatni.includeTimestamp\": true,\n  \"lookatni.includeStatistics\": true,\n  \"lookatni.preserveLineEndings\": true\n}\n</code></pre>"},{"location":"features/generation/#advanced-features","title":"Advanced Features","text":""},{"location":"features/generation/#template-system","title":"Template System","text":"<p>Use templates for consistent generation:</p> <pre><code># .lookatni/template.yml\nname: \"React Project Template\"\ndescription: \"Standard React project structure\"\n\ninclude:\n  - \"src/**/*.{ts,tsx,js,jsx}\"\n  - \"public/**/*\"\n  - \"package.json\"\n  - \"README.md\"\n\nexclude:\n  - \"node_modules\"\n  - \"build\"\n  - \"dist\"\n\noptions:\n  maxFileSize: 500\n  includeTests: true\n  preserveComments: true\n</code></pre>"},{"location":"features/generation/#batch-processing","title":"Batch Processing","text":"<p>Generate multiple marker sets:</p> <pre><code>// Batch configuration\nconst batchConfig = {\n  projects: [\n    { source: './frontend', output: 'frontend-markers.txt' },\n    { source: './backend', output: 'backend-markers.txt' },\n    { source: './shared', output: 'shared-markers.txt' }\n  ],\n  globalExcludes: ['node_modules', '.git'],\n  maxSize: 1000\n};\n</code></pre>"},{"location":"features/generation/#custom-markers","title":"Custom Markers","text":"<p>Define custom marker patterns:</p> <pre><code>{\n  \"lookatni.customMarkers\": {\n    \"startPattern\": \"//=== START: {path} ===//\",\n    \"endPattern\": \"//=== END: {path} ===//\",\n    \"metadataPattern\": \"// Metadata: {metadata}\"\n  }\n}\n</code></pre>"},{"location":"features/generation/#generation-statistics","title":"Generation Statistics","text":"<p>Track generation metrics:</p> <pre><code>interface GenerationStats {\n  totalFiles: number;\n  totalSize: number;\n  processedFiles: number;\n  skippedFiles: number;\n  warnings: string[];\n  duration: number;\n  outputSize: number;\n}\n</code></pre>"},{"location":"features/generation/#real-time-progress","title":"Real-time Progress","text":"<p>Monitor generation progress:</p> <pre><code>\ud83d\udd04 Analyzing project structure...\n\ud83d\udcc1 Found 156 files in 23 directories\n\ud83d\udd0d Applying filters...\n\u2705 89 files selected for processing\n\ud83d\udce6 Generating markers...\n   \u251c\u2500 Processing src/components... (12/89)\n   \u251c\u2500 Processing src/utils... (24/89)\n   \u2514\u2500 Processing tests... (45/89)\n\u2705 Generation complete! (2.3s)\n</code></pre>"},{"location":"features/generation/#error-handling","title":"Error Handling","text":"<p>Robust error handling and recovery:</p>"},{"location":"features/generation/#common-issues","title":"Common Issues","text":"Issue Cause Solution Files too large Individual files exceed size limit Increase limit or exclude files Permission denied Insufficient file access rights Check file permissions Out of memory Project too large for available RAM Use batch processing Invalid encoding Binary files or encoding issues Update file filters"},{"location":"features/generation/#validation","title":"Validation","text":"<p>Automatic validation during generation:</p> <pre><code>interface ValidationResult {\n  isValid: boolean;\n  warnings: Warning[];\n  errors: Error[];\n  suggestions: string[];\n}\n</code></pre>"},{"location":"features/generation/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/generation/#async-processing","title":"Async Processing","text":"<p>Non-blocking generation with progress updates:</p> <pre><code>async function generateMarkers(options: GenerationOptions): Promise&lt;GenerationResult&gt; {\n  const progress = new Progress();\n\n  for await (const file of processFiles(options)) {\n    await processFile(file);\n    progress.update();\n  }\n\n  return result;\n}\n</code></pre>"},{"location":"features/generation/#memory-management","title":"Memory Management","text":"<p>Efficient memory usage for large projects:</p> <ul> <li>Streaming processing for large files</li> <li>Garbage collection between files</li> <li>Chunk-based reading for binary detection</li> <li>Progressive output to disk</li> </ul>"},{"location":"features/generation/#caching","title":"Caching","text":"<p>Smart caching for repeated operations:</p> <pre><code>interface CacheEntry {\n  path: string;\n  hash: string;\n  metadata: FileMetadata;\n  lastModified: Date;\n}\n</code></pre>"},{"location":"features/generation/#best-practices","title":"Best Practices","text":""},{"location":"features/generation/#project-organization","title":"Project Organization","text":"<ul> <li>Use consistent folder structure</li> <li>Maintain clean dependencies</li> <li>Document file purposes</li> <li>Organize by feature, not type</li> </ul>"},{"location":"features/generation/#filter-strategy","title":"Filter Strategy","text":"<ul> <li>Start with broad excludes</li> <li>Gradually refine includes</li> <li>Test with small projects first</li> <li>Monitor generated sizes</li> </ul>"},{"location":"features/generation/#quality-control","title":"Quality Control","text":"<ul> <li>Validate before sharing</li> <li>Test extraction regularly</li> <li>Review generated statistics</li> <li>Keep templates updated</li> </ul> <p>\ud83c\udfaf Generation Mastery</p> <p>Master the generation system to create perfect, portable project snapshots every time!</p>"},{"location":"features/validation/","title":"\u2705 Validation System","text":"<p>Ensure project integrity with LookAtni's comprehensive validation system that checks for missing files, broken links, and structural issues.</p>"},{"location":"features/validation/#overview","title":"Overview","text":"<p>The validation system performs multi-layered checks to guarantee that your marker files are complete, accurate, and ready for extraction.</p>"},{"location":"features/validation/#validation-types","title":"Validation Types","text":""},{"location":"features/validation/#structural-validation","title":"\ud83d\udd0d Structural Validation","text":"<p>Verifies the overall integrity of marker files:</p> <ul> <li>Marker format - Correct syntax and structure</li> <li>File boundaries - Proper start/end markers</li> <li>Encoding - Valid character encoding</li> <li>Completeness - All referenced files present</li> </ul>"},{"location":"features/validation/#dependency-validation","title":"\ud83d\udd17 Dependency Validation","text":"<p>Checks relationships between files:</p> <ul> <li>Import statements - Verify all imports exist</li> <li>Asset references - Images, fonts, and media files</li> <li>Configuration links - Package.json dependencies</li> <li>Internal links - Documentation cross-references</li> </ul>"},{"location":"features/validation/#structure-validation","title":"\ud83d\udcc2 Structure Validation","text":"<p>Ensures folder organization integrity:</p> <ul> <li>Path consistency - No conflicting directory structures</li> <li>File naming - Valid filenames for target platform</li> <li>Permissions - Extractable permission settings</li> <li>Size limits - Files within reasonable size bounds</li> </ul>"},{"location":"features/validation/#running-validation","title":"Running Validation","text":""},{"location":"features/validation/#vs-code-command","title":"VS Code Command","text":"<pre><code># Validate current project\nLookAtni: Validate Markers\n\n# Validate specific marker file\nLookAtni: Validate Markers \u2192 select file\n</code></pre>"},{"location":"features/validation/#cli-validation","title":"CLI Validation","text":"<pre><code># Quick validation\nlookatni validate project-markers.txt\n\n# Detailed validation with fix suggestions\nlookatni validate project-markers.txt --detailed --fix-suggestions\n\n# Validate multiple files\nlookatni validate *.txt --batch\n</code></pre>"},{"location":"features/validation/#validation-reports","title":"Validation Reports","text":""},{"location":"features/validation/#report-structure","title":"Report Structure","text":"<pre><code>\u2705 VALIDATION REPORT\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\n\ud83d\udcc1 STRUCTURE ANALYSIS\n  \u2705 156 files validated\n  \u2705 23 directories verified\n  \u2705 Folder hierarchy intact\n\n\ud83d\udd17 DEPENDENCY ANALYSIS  \n  \u2705 45 import statements verified\n  \u26a0\ufe0f  2 optional dependencies missing\n  \u2705 All asset references valid\n\n\ud83d\udccb CONTENT ANALYSIS\n  \u2705 All file markers complete\n  \u2705 Encoding validation passed\n  \u2705 No corruption detected\n\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\ud83c\udfaf RESULT: VALID \u2705\n\ud83d\udcca Score: 98/100 (Excellent)\n</code></pre>"},{"location":"features/validation/#issue-categories","title":"Issue Categories","text":"\ud83d\udea8 Critical Issues\u26a0\ufe0f Warnings\ud83d\udca1 Suggestions <p>Issues that prevent extraction:</p> <ul> <li>Corrupted markers - Malformed file boundaries</li> <li>Missing files - Referenced but not included</li> <li>Invalid paths - Illegal characters or structures</li> <li>Size violations - Files exceeding limits</li> </ul> <p>Issues that may cause problems:</p> <ul> <li>Missing dependencies - Optional imports not found</li> <li>Large files - May affect performance</li> <li>Deprecated syntax - Old marker format</li> <li>Platform incompatibility - Path separator issues</li> </ul> <p>Optimization opportunities:</p> <ul> <li>Unused files - Included but not referenced</li> <li>Duplicate content - Same file included multiple times</li> <li>Optimization hints - Better organization suggestions</li> <li>Best practices - Recommended improvements</li> </ul>"},{"location":"features/validation/#automatic-fixes","title":"Automatic Fixes","text":""},{"location":"features/validation/#self-healing-features","title":"Self-Healing Features","text":"<p>LookAtni can automatically fix many common issues:</p> <pre><code># Auto-fix simple issues\nlookatni validate project-markers.txt --auto-fix\n\n# Interactive fixing\nlookatni validate project-markers.txt --interactive-fix\n\n# Preview fixes without applying\nlookatni validate project-markers.txt --dry-fix\n</code></pre>"},{"location":"features/validation/#fixable-issues","title":"Fixable Issues","text":"<ul> <li>Path separators - Convert between Windows/Unix paths</li> <li>Encoding issues - Fix UTF-8 encoding problems</li> <li>Marker boundaries - Repair malformed markers</li> <li>Duplicate entries - Remove redundant file entries</li> </ul>"},{"location":"features/validation/#advanced-validation","title":"Advanced Validation","text":""},{"location":"features/validation/#custom-validation-rules","title":"Custom Validation Rules","text":"<pre><code>{\n  \"validation\": {\n    \"maxFileSize\": \"10MB\",\n    \"allowedExtensions\": [\".js\", \".ts\", \".json\", \".md\"],\n    \"requiredFiles\": [\"package.json\", \"README.md\"],\n    \"bannedPatterns\": [\"node_modules/**\", \"*.log\"]\n  }\n}\n</code></pre>"},{"location":"features/validation/#batch-validation","title":"Batch Validation","text":"<p>Validate multiple projects efficiently:</p> <pre><code># Validate all marker files in directory\nlookatni validate-batch ./marker-files/\n\n# Validate with parallel processing\nlookatni validate-batch ./projects/ --parallel=4\n\n# Generate combined report\nlookatni validate-batch ./projects/ --report=summary.json\n</code></pre>"},{"location":"features/validation/#integration-examples","title":"Integration Examples","text":""},{"location":"features/validation/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<pre><code>#!/bin/sh\n# .git/hooks/pre-commit\nlookatni validate markers/ --strict || exit 1\n</code></pre>"},{"location":"features/validation/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>name: Validate Markers\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install LookAtni CLI\n        run: npm install -g lookatni-cli\n      - name: Validate all markers\n        run: lookatni validate-batch ./markers/ --strict\n</code></pre>"},{"location":"features/validation/#automated-testing","title":"Automated Testing","text":"<pre><code>// Jest test example\nimport { validateMarkers } from 'lookatni-cli';\n\ntest('project markers are valid', async () =&gt; {\n  const result = await validateMarkers('project-markers.txt');\n  expect(result.isValid).toBe(true);\n  expect(result.criticalIssues).toHaveLength(0);\n});\n</code></pre>"},{"location":"features/validation/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"features/validation/#validation-speed","title":"Validation Speed","text":"<ul> <li>Small projects (&lt; 100 files) - &lt; 1 second</li> <li>Medium projects (&lt; 1000 files) - &lt; 5 seconds</li> <li>Large projects (&lt; 10000 files) - &lt; 30 seconds</li> </ul>"},{"location":"features/validation/#memory-usage","title":"Memory Usage","text":"<ul> <li>Streaming validation - Constant memory footprint</li> <li>Large files - Validated in chunks</li> <li>Parallel processing - Optimized for multi-core systems</li> </ul>"},{"location":"features/validation/#best-practices","title":"Best Practices","text":"<p>Validation Workflow</p> <ol> <li>Generate markers with latest version</li> <li>Validate immediately after generation</li> <li>Fix issues before distribution</li> <li>Re-validate after fixes</li> <li>Test extraction on clean environment</li> </ol> <p>Performance Optimization</p> <ul> <li>Exclude large binaries from marker generation</li> <li>Use filters to validate specific sections</li> <li>Cache validation results for repeated checks</li> <li>Parallel validation for multiple files</li> </ul>"},{"location":"features/validation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/validation/#common-problems","title":"Common Problems","text":"<p>Validation Timeout</p> <pre><code># Increase timeout for large projects\nlookatni validate project.txt --timeout=300\n</code></pre> <p>Memory Issues</p> <pre><code># Use streaming mode for large files\nlookatni validate project.txt --stream\n</code></pre> <p>Path Issues</p> <pre><code># Normalize paths for cross-platform compatibility\nlookatni validate project.txt --normalize-paths\n</code></pre> <p>Next: Explore Visual Markers for enhanced VS Code experience.</p>"},{"location":"features/visual-markers/","title":"\ud83d\udc41\ufe0f Visual Markers","text":"<p>Experience enhanced VS Code integration with interactive visual markers, syntax highlighting, and smart navigation features.</p>"},{"location":"features/visual-markers/#overview","title":"Overview","text":"<p>Visual markers transform your VS Code experience by providing rich visual cues, interactive navigation, and intelligent highlighting for LookAtni marker files.</p>"},{"location":"features/visual-markers/#features","title":"Features","text":""},{"location":"features/visual-markers/#syntax-highlighting","title":"\ud83c\udfa8 Syntax Highlighting","text":"<p>Beautiful syntax highlighting for marker files:</p> <ul> <li>File boundaries - Clear visual separation</li> <li>Path highlighting - Easy file identification  </li> <li>Content preview - Syntax-aware code display</li> <li>Metadata display - File size, type, and properties</li> </ul>"},{"location":"features/visual-markers/#smart-navigation","title":"\ud83e\udded Smart Navigation","text":"<p>Navigate large marker files effortlessly:</p> <ul> <li>File tree view - Explorer-style navigation</li> <li>Quick jump - Go to specific files instantly</li> <li>Breadcrumb navigation - Track your location</li> <li>Search and filter - Find files quickly</li> </ul>"},{"location":"features/visual-markers/#interactive-features","title":"\u26a1 Interactive Features","text":"<p>Rich interactions within marker files:</p> <ul> <li>Hover information - File details on hover</li> <li>Click to navigate - Jump to file sections</li> <li>Collapsible sections - Fold/unfold file content</li> <li>Preview mode - Quick content preview</li> </ul>"},{"location":"features/visual-markers/#visual-elements","title":"Visual Elements","text":""},{"location":"features/visual-markers/#file-boundary-markers","title":"File Boundary Markers","text":"<pre><code>\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\ud83d\udcc1 PROJECT: my-react-app\n\ud83d\uddc2\ufe0f FILE: src/components/Header.tsx\n\ud83d\udcca SIZE: 2.4 KB | \ud83d\udcc5 MODIFIED: 2024-07-12T10:30:00Z\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n</code></pre>"},{"location":"features/visual-markers/#content-sections","title":"Content Sections","text":"<pre><code>import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Header: React.FC = () =&gt; {\n  return (\n    &lt;header className=\"app-header\"&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n        &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/header&gt;\n  );\n};\n</code></pre>"},{"location":"features/visual-markers/#metadata-display","title":"Metadata Display","text":"<pre><code>metadata:\n  type: typescript\n  size: 2.4KB\n  lines: 15\n  encoding: utf-8\n  dependencies:\n    - react\n    - react-router-dom\n</code></pre>"},{"location":"features/visual-markers/#navigation-features","title":"Navigation Features","text":""},{"location":"features/visual-markers/#file-explorer-panel","title":"File Explorer Panel","text":"<p>The dedicated explorer panel shows:</p> <ul> <li>\ud83d\udcc2 Project structure - Complete folder hierarchy</li> <li>\ud83d\udd22 File counts - Number of files per directory</li> <li>\ud83d\udcca Size information - Total and individual file sizes</li> <li>\ud83d\udd0d Search functionality - Filter files by name or type</li> </ul>"},{"location":"features/visual-markers/#quick-actions","title":"Quick Actions","text":"<p>Right-click context menu provides:</p> <ul> <li>\ud83d\udccb Copy file path - Copy relative or absolute paths</li> <li>\ud83d\udc41\ufe0f Preview file - Quick content preview</li> <li>\ud83d\udd17 Go to definition - Navigate to related files</li> <li>\ud83d\udce4 Extract single file - Extract just this file</li> </ul>"},{"location":"features/visual-markers/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Action <code>Ctrl+P</code> Quick file search <code>Ctrl+G</code> Go to line <code>F12</code> Go to definition <code>Shift+F12</code> Find all references <code>Ctrl+F</code> Search in file <code>Ctrl+Shift+F</code> Search in all files"},{"location":"features/visual-markers/#configuration","title":"Configuration","text":""},{"location":"features/visual-markers/#visual-settings","title":"Visual Settings","text":"<pre><code>{\n  \"lookatni.visual.enableSyntaxHighlighting\": true,\n  \"lookatni.visual.showFileTree\": true,\n  \"lookatni.visual.enableHoverInfo\": true,\n  \"lookatni.visual.colorScheme\": \"material\",\n  \"lookatni.visual.fontSize\": 14,\n  \"lookatni.visual.showMetadata\": true\n}\n</code></pre>"},{"location":"features/visual-markers/#color-themes","title":"Color Themes","text":"<p>Choose from multiple visual themes:</p> Material ThemeGitHub ThemeMonokai Theme <ul> <li>Primary: Deep Purple</li> <li>Accent: Cyan</li> <li>Background: Dark Grey</li> <li>Text: White/Light Grey</li> </ul> <ul> <li>Primary: Blue</li> <li>Accent: Green</li> <li>Background: White</li> <li>Text: Dark Grey</li> </ul> <ul> <li>Primary: Orange</li> <li>Accent: Green</li> <li>Background: Dark</li> <li>Text: Light</li> </ul>"},{"location":"features/visual-markers/#font-settings","title":"Font Settings","text":"<pre><code>{\n  \"lookatni.visual.fontFamily\": \"JetBrains Mono, Consolas, monospace\",\n  \"lookatni.visual.fontSize\": 14,\n  \"lookatni.visual.lineHeight\": 1.5,\n  \"lookatni.visual.fontWeight\": \"normal\"\n}\n</code></pre>"},{"location":"features/visual-markers/#interactive-commands","title":"Interactive Commands","text":""},{"location":"features/visual-markers/#file-operations","title":"File Operations","text":"<p>Available through command palette or context menu:</p> <ul> <li>LookAtni: Show File Tree - Toggle explorer panel</li> <li>LookAtni: Navigate to File - Quick file navigation</li> <li>LookAtni: Preview File - Show content preview</li> <li>LookAtni: Extract Selected Files - Extract specific files</li> </ul>"},{"location":"features/visual-markers/#view-commands","title":"View Commands","text":"<p>Customize your visual experience:</p> <ul> <li>LookAtni: Toggle Syntax Highlighting - Enable/disable highlighting</li> <li>LookAtni: Change Color Theme - Switch visual themes</li> <li>LookAtni: Adjust Font Size - Modify text size</li> <li>LookAtni: Reset Visual Settings - Restore defaults</li> </ul>"},{"location":"features/visual-markers/#advanced-features","title":"Advanced Features","text":""},{"location":"features/visual-markers/#code-folding","title":"Code Folding","text":"<p>Collapse sections for better overview:</p> <pre><code>\ud83d\udcc1 src/\n  \ud83d\udcc1 components/ [12 files] \u2b07\ufe0f\n  \ud83d\udcc1 pages/ [5 files] \u2b07\ufe0f\n  \ud83d\udcc1 utils/ [8 files] \u2b07\ufe0f\n  \ud83d\udcc4 App.tsx \u2b07\ufe0f\n</code></pre>"},{"location":"features/visual-markers/#minimap-integration","title":"Minimap Integration","text":"<p>VS Code minimap shows:</p> <ul> <li>File boundaries - Visual sections</li> <li>Content density - Code vs. comments</li> <li>Search results - Highlighted matches</li> <li>Error indicators - Validation issues</li> </ul>"},{"location":"features/visual-markers/#intellisense-support","title":"IntelliSense Support","text":"<p>Smart autocomplete for:</p> <ul> <li>File paths - Auto-complete relative paths</li> <li>Import statements - Suggest available modules</li> <li>Configuration options - LookAtni settings</li> <li>Command parameters - CLI option hints</li> </ul>"},{"location":"features/visual-markers/#performance-optimization","title":"Performance Optimization","text":""},{"location":"features/visual-markers/#large-file-handling","title":"Large File Handling","text":"<p>For large marker files (&gt;10MB):</p> <ul> <li>Virtual scrolling - Smooth performance</li> <li>Lazy loading - Load content on demand</li> <li>Memory management - Efficient resource usage</li> <li>Background processing - Non-blocking operations</li> </ul>"},{"location":"features/visual-markers/#rendering-optimization","title":"Rendering Optimization","text":"<ul> <li>Incremental updates - Only refresh changed sections</li> <li>GPU acceleration - Hardware-accelerated rendering</li> <li>Caching - Cache parsed content for speed</li> <li>Debounced updates - Reduce unnecessary refreshes</li> </ul>"},{"location":"features/visual-markers/#accessibility","title":"Accessibility","text":""},{"location":"features/visual-markers/#screen-reader-support","title":"Screen Reader Support","text":"<ul> <li>Semantic markup - Proper ARIA labels</li> <li>Keyboard navigation - Full keyboard accessibility</li> <li>Focus management - Logical tab order</li> <li>Content description - Descriptive text for elements</li> </ul>"},{"location":"features/visual-markers/#visual-accessibility","title":"Visual Accessibility","text":"<ul> <li>High contrast mode - Enhanced visibility</li> <li>Font scaling - Adjustable text size</li> <li>Color blind support - Alternative color schemes</li> <li>Reduced motion - Respect animation preferences</li> </ul>"},{"location":"features/visual-markers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/visual-markers/#common-issues","title":"Common Issues","text":"<p>Syntax Highlighting Not Working</p> <pre><code>// Check language association\n\"files.associations\": {\n  \"*.lookatni\": \"lookatni\",\n  \"*.markers\": \"lookatni\"\n}\n</code></pre> <p>Performance Issues</p> <pre><code>// Reduce visual features for large files\n\"lookatni.visual.enableForLargeFiles\": false,\n\"lookatni.visual.maxFileSize\": \"5MB\"\n</code></pre> <p>Theme Conflicts</p> <pre><code>// Reset to default theme\n\"lookatni.visual.colorScheme\": \"default\"\n</code></pre> <p>Next: Learn about CLI Tools for automation and scripting.</p>"},{"location":"getting-started/concepts/","title":"\ud83c\udfaf Getting Started Concepts","text":"<p>Understanding the core concepts behind LookAtni File Markers and how they work together to create a powerful project management system.</p>"},{"location":"getting-started/concepts/#core-concepts","title":"\ud83e\udde9 Core Concepts","text":""},{"location":"getting-started/concepts/#what-are-file-markers","title":"What Are File Markers?","text":"<p>File markers are self-contained, human-readable text files that represent complete projects or directories. Think of them as \"DNA\" for your projects - they contain all the information needed to recreate the exact structure and content.</p> <pre><code>// === LookAtni File Markers v1.0.6 ===\n// Generated: 2025-01-20T10:30:00Z\n// Source: /my-awesome-project\n// Files: 15 | Size: 2.3MB | Compressed: true\n\n// === File: package.json ===\n// Size: 1.2KB | Modified: 2025-01-20T09:15:30Z\n{\n  \"name\": \"my-awesome-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An amazing project\"\n}\n\n// === File: src/index.js ===\n// Size: 0.8KB | Modified: 2025-01-20T09:20:15Z\nconsole.log('Hello, LookAtni!');\n\n// === Binary File: assets/logo.png ===\n// Size: 15.3KB | Type: image/png | Encoded: base64\niVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADU...\n</code></pre>"},{"location":"getting-started/concepts/#key-principles","title":"Key Principles","text":""},{"location":"getting-started/concepts/#human-readable-format","title":"\ud83d\udcdd Human-Readable Format","text":"<p>File markers use plain text with clear delimiters, making them easy to read, edit, and understand without special tools.</p>"},{"location":"getting-started/concepts/#bidirectional-conversion","title":"\ud83d\udd04 Bidirectional Conversion","text":"<ul> <li>Generation: Project \u2192 Marker file</li> <li>Extraction: Marker file \u2192 Project</li> </ul>"},{"location":"getting-started/concepts/#metadata-preservation","title":"\ud83c\udfaf Metadata Preservation","text":"<p>File timestamps, permissions, sizes, and other metadata are preserved during the conversion process.</p>"},{"location":"getting-started/concepts/#self-contained","title":"\ud83d\udce6 Self-Contained","text":"<p>A marker file contains everything needed to recreate the project, including binary files (encoded as base64).</p>"},{"location":"getting-started/concepts/#how-it-works","title":"\ud83d\udee0\ufe0f How It Works","text":""},{"location":"getting-started/concepts/#the-generation-process","title":"The Generation Process","text":"<pre><code>graph LR\n    A[Source Project] --&gt; B[File Scanner]\n    B --&gt; C[Metadata Collector]\n    C --&gt; D[Content Processor]\n    D --&gt; E[Binary Encoder]\n    E --&gt; F[Marker Generator]\n    F --&gt; G[Output File]</code></pre> <ol> <li>File Scanning: Recursively scan project directory</li> <li>Metadata Collection: Gather file information (size, dates, permissions)</li> <li>Content Processing: Read text files and process content</li> <li>Binary Encoding: Convert binary files to base64</li> <li>Marker Generation: Combine everything into marker format</li> <li>Output: Save as <code>.lookatni</code> file</li> </ol>"},{"location":"getting-started/concepts/#the-extraction-process","title":"The Extraction Process","text":"<pre><code>graph LR\n    A[Marker File] --&gt; B[Parser]\n    B --&gt; C[Metadata Extractor]\n    C --&gt; D[Content Decoder]\n    D --&gt; E[Directory Creator]\n    E --&gt; F[File Writer]\n    F --&gt; G[Restored Project]</code></pre> <ol> <li>Parsing: Parse marker file structure</li> <li>Metadata Extraction: Extract file information</li> <li>Content Decoding: Decode binary content from base64</li> <li>Directory Creation: Recreate directory structure</li> <li>File Writing: Write files with original content</li> <li>Restoration: Apply original timestamps and permissions</li> </ol>"},{"location":"getting-started/concepts/#marker-file-anatomy","title":"\ud83c\udfa8 Marker File Anatomy","text":""},{"location":"getting-started/concepts/#header-section","title":"Header Section","text":"<pre><code>// === LookAtni File Markers v1.0.6 ===\n// Generated: 2025-01-20T10:30:00Z\n// Source: /my-awesome-project\n// Files: 15 | Size: 2.3MB | Compressed: true\n// Generator: VS Code Extension\n// Options: include-metadata, exclude-node-modules\n</code></pre> <p>The header contains: - Version information - Generation timestamp - Source path - Statistics (file count, total size) - Generator information - Generation options used</p>"},{"location":"getting-started/concepts/#file-entries","title":"File Entries","text":"<p>Each file in the project becomes an entry in the marker:</p> <pre><code>// === File: src/components/Button.jsx ===\n// Size: 1.5KB | Modified: 2025-01-20T09:25:10Z\n// Type: text/javascript | Encoding: utf-8\nimport React from 'react';\n\nexport const Button = ({ children, onClick }) =&gt; {\n  return (\n    &lt;button onClick={onClick} className=\"btn\"&gt;\n      {children}\n    &lt;/button&gt;\n  );\n};\n</code></pre>"},{"location":"getting-started/concepts/#binary-file-handling","title":"Binary File Handling","text":"<p>Binary files are encoded for inclusion:</p> <pre><code>// === Binary File: assets/icon.png ===\n// Size: 2.3KB | Type: image/png | Encoded: base64\niVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz...\n</code></pre>"},{"location":"getting-started/concepts/#directory-structure","title":"Directory Structure","text":"<p>Directories are represented implicitly through file paths, but can also be explicitly defined:</p> <pre><code>// === Directory: src/components ===\n// Created: 2025-01-19T14:20:00Z | Permissions: 755\n\n// === Directory: assets/images ===\n// Created: 2025-01-19T14:22:00Z | Permissions: 755\n</code></pre>"},{"location":"getting-started/concepts/#configuration-system","title":"\ud83d\udd27 Configuration System","text":""},{"location":"getting-started/concepts/#global-configuration","title":"Global Configuration","text":"<p>LookAtni uses a hierarchical configuration system:</p> <ol> <li>Built-in defaults</li> <li>Global user settings (<code>~/.lookatni/config.json</code>)</li> <li>Project-specific settings (<code>.lookatni.json</code> in project root)</li> <li>Command-line arguments (highest priority)</li> </ol>"},{"location":"getting-started/concepts/#configuration-options","title":"Configuration Options","text":"<pre><code>{\n  \"includeMetadata\": true,\n  \"compressionLevel\": 1,\n  \"excludePatterns\": [\n    \"node_modules/**\",\n    \".git/**\",\n    \"dist/**\",\n    \"*.log\",\n    \".DS_Store\"\n  ],\n  \"includeBinaryFiles\": true,\n  \"maxFileSize\": \"10MB\",\n  \"encoding\": \"utf-8\",\n  \"preserveTimestamps\": true,\n  \"validateOnExtract\": true\n}\n</code></pre>"},{"location":"getting-started/concepts/#use-case-categories","title":"\ud83c\udfaf Use Case Categories","text":""},{"location":"getting-started/concepts/#educational","title":"\ud83d\udcda Educational","text":"<ul> <li>Code Sharing: Share complete projects with students</li> <li>Assignment Distribution: Distribute starter code and solutions</li> <li>Portfolio Building: Students maintain project collections</li> <li>Peer Review: Easy sharing for code reviews</li> </ul>"},{"location":"getting-started/concepts/#professional","title":"\ud83c\udfe2 Professional","text":"<ul> <li>Code Documentation: Create comprehensive project snapshots</li> <li>Backup &amp; Recovery: Portable project backups</li> <li>Collaboration: Share project states with team members</li> <li>Client Delivery: Package complete solutions for clients</li> </ul>"},{"location":"getting-started/concepts/#research-development","title":"\ud83d\udd2c Research &amp; Development","text":"<ul> <li>Experiment Tracking: Save different experiment states</li> <li>Reproducible Research: Share complete research environments</li> <li>Version Snapshots: Capture specific project versions</li> <li>Comparative Analysis: Compare different implementation approaches</li> </ul>"},{"location":"getting-started/concepts/#ecosystem-integration","title":"\ud83c\udf10 Ecosystem Integration","text":""},{"location":"getting-started/concepts/#vs-code-extension","title":"VS Code Extension","text":"<p>The primary interface for LookAtni, providing: - Command palette integration - File explorer context menus - Visual markers and navigation - Automated workflows - Status bar information</p>"},{"location":"getting-started/concepts/#command-line-interface","title":"Command-Line Interface","text":"<p>For automation and scripting: <pre><code># Generate markers\nlookatni generate --source ./my-project --output project.lookatni\n\n# Extract project\nlookatni extract --input project.lookatni --output ./restored-project\n\n# Validate marker file\nlookatni validate project.lookatni\n\n# Compare projects\nlookatni diff --source ./project-v1 --target ./project-v2\n</code></pre></p>"},{"location":"getting-started/concepts/#api-integration","title":"API Integration","text":"<p>For programmatic access: <pre><code>import { MarkerGenerator, MarkerExtractor } from 'lookatni-core';\n\nconst generator = new MarkerGenerator();\nconst marker = await generator.generate('./project-path');\n\nconst extractor = new MarkerExtractor();\nawait extractor.extract(marker, './output-path');\n</code></pre></p>"},{"location":"getting-started/concepts/#workflow-patterns","title":"\ud83d\udd04 Workflow Patterns","text":""},{"location":"getting-started/concepts/#basic-workflow","title":"Basic Workflow","text":"<pre><code>graph TD\n    A[Create Project] --&gt; B[Generate Markers]\n    B --&gt; C[Share/Store Markers]\n    C --&gt; D[Extract Project]\n    D --&gt; E[Modify Project]\n    E --&gt; B</code></pre>"},{"location":"getting-started/concepts/#collaborative-workflow","title":"Collaborative Workflow","text":"<pre><code>graph TD\n    A[Developer A Creates] --&gt; B[Generate Markers]\n    B --&gt; C[Share with Team]\n    C --&gt; D[Developer B Extracts]\n    D --&gt; E[Make Changes]\n    E --&gt; F[Generate New Markers]\n    F --&gt; G[Share Updated Version]\n    G --&gt; H[Developer A Extracts Updates]</code></pre>"},{"location":"getting-started/concepts/#educational-workflow","title":"Educational Workflow","text":"<pre><code>graph TD\n    A[Instructor Prepares] --&gt; B[Generate Assignment]\n    B --&gt; C[Distribute to Students]\n    C --&gt; D[Students Work]\n    D --&gt; E[Submit Solutions]\n    E --&gt; F[Instructor Reviews]\n    F --&gt; G[Provide Feedback]\n    G --&gt; H[Students Iterate]</code></pre>"},{"location":"getting-started/concepts/#security-considerations","title":"\ud83d\udee1\ufe0f Security Considerations","text":""},{"location":"getting-started/concepts/#data-protection","title":"Data Protection","text":"<ul> <li>No Sensitive Data: Markers are plain text - avoid including secrets</li> <li>Access Control: Store markers securely based on project sensitivity</li> <li>Audit Trail: Track marker generation and usage</li> <li>Encryption: Use external encryption for sensitive projects</li> </ul>"},{"location":"getting-started/concepts/#best-practices","title":"Best Practices","text":"<ol> <li>Review Before Sharing: Always review marker content before sharing</li> <li>Use Exclusion Patterns: Exclude sensitive files and directories</li> <li>Validate Sources: Verify marker sources before extraction</li> <li>Secure Storage: Use appropriate storage for different sensitivity levels</li> </ol>"},{"location":"getting-started/concepts/#learning-path","title":"\ud83c\udf93 Learning Path","text":""},{"location":"getting-started/concepts/#beginner-level","title":"Beginner Level","text":"<ol> <li>Basic Generation: Create your first marker file</li> <li>Simple Extraction: Restore a project from markers</li> <li>VS Code Integration: Use extension commands</li> <li>Configuration: Customize basic settings</li> </ol>"},{"location":"getting-started/concepts/#intermediate-level","title":"Intermediate Level","text":"<ol> <li>Advanced Configuration: Complex exclusion patterns and options</li> <li>CLI Usage: Command-line operations and scripting</li> <li>Workflow Integration: Incorporate into development workflow</li> <li>Collaboration: Share and manage team projects</li> </ol>"},{"location":"getting-started/concepts/#advanced-level","title":"Advanced Level","text":"<ol> <li>API Integration: Programmatic marker management</li> <li>Custom Automation: Build automated workflows</li> <li>Extension Development: Extend LookAtni functionality</li> <li>Enterprise Deployment: Large-scale organizational usage</li> </ol> <p>Understanding these core concepts provides the foundation for effectively using LookAtni File Markers in your projects and workflows. The system's simplicity and power come from these well-designed fundamental principles.</p>"},{"location":"getting-started/installation/","title":"\ud83d\udce6 Installation Guide","text":"<p>Get LookAtni File Markers up and running in your VS Code environment.</p>"},{"location":"getting-started/installation/#vs-code-extension","title":"VS Code Extension","text":""},{"location":"getting-started/installation/#from-vs-code-marketplace","title":"From VS Code Marketplace","text":"<ol> <li>Open VS Code</li> <li>Go to Extensions (<code>Ctrl+Shift+X</code> / <code>Cmd+Shift+X</code>)</li> <li>Search for \"LookAtni File Markers\"</li> <li>Click Install on the official extension by Rafa Mori</li> <li>Reload VS Code when prompted</li> </ol>"},{"location":"getting-started/installation/#from-vsix-file","title":"From VSIX File","text":"<p>If you have a <code>.vsix</code> file:</p> <ol> <li>Open VS Code</li> <li>Open Command Palette (<code>Ctrl+Shift+P</code> / <code>Cmd+Shift+P</code>)</li> <li>Type <code>Extensions: Install from VSIX...</code></li> <li>Select the <code>.vsix</code> file</li> <li>Restart VS Code</li> </ol>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify everything works:</p> <ol> <li>Open Command Palette (<code>Ctrl+Shift+P</code>)</li> <li>Type \"LookAtni\" - you should see all available commands</li> <li>Try <code>LookAtni: Quick Demo</code> to test the extension</li> </ol>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>VS Code: Version 1.102.0 or higher</li> <li>Node.js: Version 18.0 or higher (for CLI tools)</li> <li>Operating System: Windows 10+, macOS 10.15+, or Linux</li> </ul>"},{"location":"getting-started/installation/#recommended-setup","title":"Recommended Setup","text":"<ul> <li>VS Code: Latest stable version</li> <li>Node.js: Latest LTS version</li> <li>Package Manager: npm 9.0+ or pnpm 8.0+</li> <li>Memory: 4GB+ RAM for large projects</li> </ul>"},{"location":"getting-started/installation/#cli-tools-installation","title":"CLI Tools Installation","text":"<p>For advanced users who want to use LookAtni CLI tools:</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<pre><code># Ensure Node.js and npm are installed\nnode --version  # Should be 18.0+\nnpm --version   # Should be 9.0+\n</code></pre>"},{"location":"getting-started/installation/#install-tsx-runner","title":"Install TSX Runner","text":"<pre><code># Install tsx globally for TypeScript execution\nnpm install -g tsx\n\n# Verify installation\ntsx --version\n</code></pre>"},{"location":"getting-started/installation/#clone-repository-optional","title":"Clone Repository (Optional)","text":"<p>For development or advanced CLI usage:</p> <pre><code># Clone the repository\ngit clone https://github.com/rafa-mori/lookatni-file-markers.git\ncd lookatni-file-markers\n\n# Install dependencies\nnpm install\n\n# Test CLI tools\nnpm run lookatni help\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#default-settings","title":"Default Settings","text":"<p>LookAtni works out of the box with sensible defaults:</p> <pre><code>{\n  \"lookatni.defaultMaxFileSize\": 1000,\n  \"lookatni.showStatistics\": true,\n  \"lookatni.autoValidate\": false,\n  \"lookatni.excludePatterns\": [\n    \"node_modules\",\n    \".git\",\n    \"dist\",\n    \"build\"\n  ]\n}\n</code></pre>"},{"location":"getting-started/installation/#workspace-configuration","title":"Workspace Configuration","text":"<p>Create <code>.vscode/settings.json</code> in your workspace:</p> <pre><code>{\n  \"lookatni.defaultMaxFileSize\": 500,\n  \"lookatni.showStatistics\": true,\n  \"lookatni.autoValidate\": true,\n  \"lookatni.excludePatterns\": [\n    \"node_modules\",\n    \".git\",\n    \"*.log\",\n    \"coverage\"\n  ]\n}\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#extension-not-loading","title":"Extension Not Loading","text":"<ol> <li>Check VS Code version - must be 1.102.0+</li> <li>Restart VS Code completely</li> <li>Check extension logs in Output panel</li> <li>Reinstall extension if necessary</li> </ol>"},{"location":"getting-started/installation/#commands-not-found","title":"Commands Not Found","text":"<ol> <li>Reload VS Code window (<code>Ctrl+Shift+P</code> \u2192 \"Reload Window\")</li> <li>Check for extension conflicts</li> <li>Verify installation in Extensions panel</li> </ol>"},{"location":"getting-started/installation/#cli-tools-not-working","title":"CLI Tools Not Working","text":"<ol> <li>Install tsx globally: <code>npm install -g tsx</code></li> <li>Check Node.js version: <code>node --version</code></li> <li>Verify PATH includes npm global binaries</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs</li> <li>Discussions: Ask questions</li> <li>Documentation: Browse guides</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, head to the Quick Start Guide to begin using LookAtni File Markers!</p> <p>\ud83c\udf89 Installation Complete!</p> <p>You're ready to revolutionize your code organization workflow with LookAtni File Markers!</p>"},{"location":"getting-started/quick-start/","title":"\ud83d\ude80 Quick Start Guide","text":"<p>Get up and running with LookAtni File Markers in minutes!</p>"},{"location":"getting-started/quick-start/#your-first-markers","title":"Your First Markers","text":""},{"location":"getting-started/quick-start/#step-1-try-the-quick-demo","title":"Step 1: Try the Quick Demo","text":"<p>Experience LookAtni in action:</p> <ol> <li>Open Command Palette (<code>Ctrl+Shift+P</code>)</li> <li>Type: <code>LookAtni: Quick Demo</code></li> <li>Press Enter and watch the magic happen!</li> </ol> <p>This creates a sample HTML project and demonstrates the complete workflow.</p>"},{"location":"getting-started/quick-start/#step-2-generate-markers-from-your-project","title":"Step 2: Generate Markers from Your Project","text":"<p>Transform your existing project into portable markers:</p> <ol> <li>Open your project in VS Code</li> <li>Command Palette \u2192 <code>LookAtni: Generate Markers</code></li> <li>Select source folder (your project root)</li> <li>Choose output file (e.g., <code>my-project-markers.txt</code>)</li> <li>Configure options (file filters, size limits)</li> <li>Generate! \u2728</li> </ol>"},{"location":"getting-started/quick-start/#step-3-extract-markers-anywhere","title":"Step 3: Extract Markers Anywhere","text":"<p>Restore your project from markers:</p> <ol> <li>Get your markers file (<code>.txt</code> file from Step 2)</li> <li>Command Palette \u2192 <code>LookAtni: Extract Files</code></li> <li>Select markers file</li> <li>Choose destination folder</li> <li>Extract! Your project is restored perfectly</li> </ol>"},{"location":"getting-started/quick-start/#real-world-example","title":"Real-World Example","text":"<p>Let's create a React project marker:</p>"},{"location":"getting-started/quick-start/#create-sample-react-project","title":"Create Sample React Project","text":"<pre><code># Create a simple React component\nmkdir my-react-app\ncd my-react-app\n\n# Create package.json\necho '{\n  \"name\": \"my-react-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"react\": \"^18.0.0\"\n  }\n}' &gt; package.json\n\n# Create a component\nmkdir src\necho 'import React from \"react\";\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello LookAtni!&lt;/h1&gt;\n      &lt;p&gt;This project was packaged with LookAtni File Markers&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}' &gt; src/App.jsx\n</code></pre>"},{"location":"getting-started/quick-start/#generate-markers","title":"Generate Markers","text":"<ol> <li>Open <code>my-react-app</code> in VS Code</li> <li>Command Palette \u2192 <code>LookAtni: Generate Markers</code></li> <li>Source: <code>./</code> (current folder)</li> <li>Output: <code>react-app-markers.txt</code></li> <li>Exclude: <code>node_modules</code> (default)</li> <li>Generate!</li> </ol>"},{"location":"getting-started/quick-start/#share-and-extract","title":"Share and Extract","text":"<p>Your <code>react-app-markers.txt</code> file contains everything:</p> <pre><code>//\u241c/ package.json /\u241c//\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"react\": \"^18.0.0\"\n  }\n}\n\n//\u241c/ src/App.jsx /\u241c//\nimport React from \"react\";\n\nexport function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello LookAtni!&lt;/h1&gt;\n      &lt;p&gt;This project was packaged with LookAtni File Markers&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Anyone can now extract this into a working React project!</p>"},{"location":"getting-started/quick-start/#essential-commands","title":"Essential Commands","text":""},{"location":"getting-started/quick-start/#primary-commands","title":"Primary Commands","text":"Command Description Shortcut <code>LookAtni: Generate Markers</code> Create markers from files <code>Ctrl+Alt+G</code> <code>LookAtni: Extract Files</code> Extract files from markers <code>Ctrl+Alt+E</code> <code>LookAtni: Validate Markers</code> Check marker integrity <code>Ctrl+Alt+V</code> <code>LookAtni: Quick Demo</code> Run demonstration <code>Ctrl+Alt+D</code>"},{"location":"getting-started/quick-start/#quick-actions","title":"Quick Actions","text":"Command Description <code>LookAtni: Visual Markers</code> Toggle visual markers <code>LookAtni: Show Statistics</code> Display project stats <code>LookAtni: Open CLI Tools</code> Access CLI commands <code>LookAtni: Configuration</code> Open settings"},{"location":"getting-started/quick-start/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/quick-start/#code-review-workflow","title":"Code Review Workflow","text":"<ol> <li>Generate markers for the feature branch</li> <li>Share markers file with reviewer</li> <li>Reviewer extracts and tests locally</li> <li>Provide feedback on the extracted code</li> </ol>"},{"location":"getting-started/quick-start/#educational-workflow","title":"Educational Workflow","text":"<ol> <li>Create lesson project with examples</li> <li>Generate markers for distribution</li> <li>Students extract and follow along</li> <li>Include in course materials</li> </ol>"},{"location":"getting-started/quick-start/#backup-workflow","title":"Backup Workflow","text":"<ol> <li>Generate markers for important projects</li> <li>Store markers files in cloud storage</li> <li>Extract when needed for recovery</li> <li>Version control your markers</li> </ol>"},{"location":"getting-started/quick-start/#tips-for-success","title":"Tips for Success","text":""},{"location":"getting-started/quick-start/#file-organization","title":"File Organization","text":"<ul> <li>Use descriptive names for markers files</li> <li>Include version numbers (e.g., <code>project-v1.2-markers.txt</code>)</li> <li>Add date stamps for time-based tracking</li> <li>Organize by project type or purpose</li> </ul>"},{"location":"getting-started/quick-start/#best-practices","title":"Best Practices","text":"<ul> <li>Exclude large files (videos, binaries, dependencies)</li> <li>Use size limits to keep markers manageable</li> <li>Validate regularly to catch issues early</li> <li>Document your markers with comments</li> </ul>"},{"location":"getting-started/quick-start/#performance-tips","title":"Performance Tips","text":"<ul> <li>Generate incrementally for large projects</li> <li>Use file filters to focus on relevant code</li> <li>Split large projects into logical markers</li> <li>Monitor file sizes and optimize as needed</li> </ul>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you've mastered the basics:</p> <ol> <li>Explore Features - Dive deeper into capabilities</li> <li>Read Best Practices - Optimize your workflow</li> <li>Try Examples - Real-world use cases</li> <li>Check CLI Tools - Advanced automation</li> </ol> <p>\ud83c\udfaf Pro Tip</p> <p>Start small with a simple project, then gradually work up to complex workflows. LookAtni grows with your needs!</p>"},{"location":"guide/best-practices/","title":"\ud83c\udfaf Best Practices","text":"<p>Essential guidelines and proven strategies for optimal LookAtni File Markers usage.</p>"},{"location":"guide/best-practices/#project-organization","title":"Project Organization","text":""},{"location":"guide/best-practices/#file-structure-guidelines","title":"File Structure Guidelines","text":"<p>\u2705 Recommended Structure:</p> <pre><code>my-project/\n\u251c\u2500\u2500 src/                    # Source code (always include)\n\u2502   \u251c\u2500\u2500 components/         # Reusable components\n\u2502   \u251c\u2500\u2500 pages/             # Page components\n\u2502   \u251c\u2500\u2500 utils/             # Utility functions\n\u2502   \u251c\u2500\u2500 types/             # Type definitions\n\u2502   \u2514\u2500\u2500 hooks/             # Custom hooks\n\u251c\u2500\u2500 docs/                  # Documentation (include)\n\u251c\u2500\u2500 tests/                 # Test files (selective)\n\u251c\u2500\u2500 public/                # Static assets (selective)\n\u251c\u2500\u2500 config/                # Configuration files (include)\n\u251c\u2500\u2500 scripts/               # Build/utility scripts (include)\n\u251c\u2500\u2500 package.json           # Always include\n\u251c\u2500\u2500 README.md              # Always include\n\u251c\u2500\u2500 .gitignore             # Include for reference\n\u2514\u2500\u2500 node_modules/          # Never include\n</code></pre> <p>\ud83d\udd27 Configuration Example:</p> <pre><code>{\n  \"include\": [\n    \"src/**/*.{ts,tsx,js,jsx}\",\n    \"docs/**/*.{md,mdx}\",\n    \"config/**/*.{json,js,ts}\",\n    \"scripts/**/*.{js,ts,sh}\",\n    \"*.{json,md,yml,yaml}\",\n    \".gitignore\",\n    \".env.example\"\n  ],\n  \"exclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"build/**\",\n    \"coverage/**\",\n    \"*.log\",\n    \".git/**\",\n    \".vscode/**\",\n    \"**/*.test.*\",\n    \"**/*.spec.*\"\n  ]\n}\n</code></pre>"},{"location":"guide/best-practices/#file-naming-conventions","title":"File Naming Conventions","text":"<p>\ud83d\udcc1 Consistent Naming:</p> <ul> <li>Descriptive names: <code>user-profile-markers.txt</code> vs <code>markers.txt</code></li> <li>Version indicators: <code>project-v1.2.0-markers.txt</code></li> <li>Timestamps: <code>project-20240712-1430.txt</code></li> <li>Environment tags: <code>project-prod-stable.txt</code></li> </ul> <p>\ud83c\udff7\ufe0f Naming Templates:</p> <pre><code>{\n  \"templates\": {\n    \"development\": \"{{project}}-dev-{{timestamp}}.txt\",\n    \"staging\": \"{{project}}-staging-{{version}}.txt\", \n    \"production\": \"{{project}}-prod-{{version}}-{{date}}.txt\",\n    \"feature\": \"{{project}}-feature-{{branch}}-{{timestamp}}.txt\"\n  }\n}\n</code></pre>"},{"location":"guide/best-practices/#generation-best-practices","title":"Generation Best Practices","text":""},{"location":"guide/best-practices/#smart-filtering-strategies","title":"Smart Filtering Strategies","text":"<p>\ud83c\udfaf Purpose-Driven Generation:</p> Development SharingProduction ReleaseCode ReviewTutorial/Educational <pre><code># Include everything needed for development\nlookatni generate \\\n  --include \"src/**,docs/**,*.json,*.md\" \\\n  --exclude \"**/*.test.*,node_modules/**\" \\\n  --output dev-share.txt\n</code></pre> <pre><code># Only production-ready files\nlookatni generate \\\n  --include \"src/**,README.md,package.json,LICENSE\" \\\n  --exclude \"**/*.test.*,**/*.spec.*,**/*.stories.*\" \\\n  --output prod-release.txt \\\n  --compress\n</code></pre> <pre><code># Changed files + related tests\ngit diff --name-only HEAD~1 | tr '\\n' ',' &gt; changed.txt\nlookatni generate \\\n  --include \"$(cat changed.txt),**/*.test.*\" \\\n  --output code-review.txt\n</code></pre> <pre><code># Complete learning materials\nlookatni generate \\\n  --include \"src/**,docs/**,examples/**,*.md\" \\\n  --exclude \"node_modules/**,dist/**\" \\\n  --output tutorial-complete.txt \\\n  --preserve-structure\n</code></pre>"},{"location":"guide/best-practices/#performance-optimization","title":"Performance Optimization","text":"<p>\u26a1 Speed Guidelines:</p> <ol> <li>Use specific patterns instead of broad includes</li> <li>Exclude large directories early in the pattern</li> <li>Use parallel processing for large projects</li> <li>Stream large files to reduce memory usage</li> </ol> <pre><code># Optimized for large projects\nlookatni generate \\\n  --source . \\\n  --include \"src/**/*.{ts,tsx}\" \\\n  --exclude \"node_modules/**,dist/**,coverage/**\" \\\n  --parallel=8 \\\n  --stream \\\n  --compress\n</code></pre> <p>\ud83d\udcbe Memory Management:</p> <pre><code>{\n  \"performance\": {\n    \"maxFileSize\": \"5MB\",\n    \"maxTotalSize\": \"100MB\", \n    \"streamThreshold\": \"1MB\",\n    \"parallelThreads\": 4,\n    \"useTemporaryFiles\": true\n  }\n}\n</code></pre>"},{"location":"guide/best-practices/#validation-best-practices","title":"Validation Best Practices","text":""},{"location":"guide/best-practices/#comprehensive-validation-strategy","title":"Comprehensive Validation Strategy","text":"<p>\ud83d\udd0d Multi-Level Validation:</p> <pre><code># 1. Quick syntax check\nlookatni validate markers.txt\n\n# 2. Detailed analysis\nlookatni validate markers.txt --detailed --fix-suggestions\n\n# 3. Strict production validation\nlookatni validate markers.txt --strict --report validation.json\n\n# 4. Cross-validation with extraction\nlookatni extract markers.txt --dry-run --verbose\n</code></pre>"},{"location":"guide/best-practices/#error-prevention","title":"Error Prevention","text":"<p>\ud83d\udee1\ufe0f Common Issues Prevention:</p> Issue Prevention Solution Large files Set size limits Use <code>maxFileSize</code> in config Binary files Exclude patterns Add <code>*.{jpg,png,pdf}</code> to exclude Path conflicts Normalize paths Use <code>--normalize-paths</code> flag Encoding issues Specify encoding Set <code>defaultEncoding: \"utf-8\"</code> Missing dependencies Include related files Use dependency analysis <p>\u2699\ufe0f Preventive Configuration:</p> <pre><code>{\n  \"validation\": {\n    \"strict\": true,\n    \"maxFileSize\": \"10MB\",\n    \"allowedExtensions\": [\n      \".js\", \".ts\", \".jsx\", \".tsx\", \n      \".json\", \".md\", \".css\", \".html\"\n    ],\n    \"requiredFiles\": [\"package.json\", \"README.md\"],\n    \"customRules\": [\n      {\n        \"pattern\": \"**/*.{jpg,png,gif}\",\n        \"action\": \"warn\",\n        \"message\": \"Binary files should be excluded\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"guide/best-practices/#extraction-best-practices","title":"Extraction Best Practices","text":""},{"location":"guide/best-practices/#safe-extraction-practices","title":"Safe Extraction Practices","text":"<p>\ud83d\udd12 Safety-First Approach:</p> <pre><code># 1. Always preview first\nlookatni extract markers.txt --dry-run\n\n# 2. Extract to clean directory\nmkdir -p ./extracted/project-name\nlookatni extract markers.txt --output ./extracted/project-name\n\n# 3. Use backup for existing projects\nlookatni extract markers.txt --output ./existing-project --backup\n\n# 4. Validate after extraction\nlookatni verify markers.txt --extracted ./extracted/project-name\n</code></pre>"},{"location":"guide/best-practices/#conflict-resolution-strategies","title":"Conflict Resolution Strategies","text":"<p>\ud83e\udd1d Handling Conflicts:</p> Interactive ModeSafe ModeOverwrite ModeMerge Mode <pre><code># User decides for each conflict\nlookatni extract markers.txt --interactive\n</code></pre> <pre><code># Skip existing files, create backups\nlookatni extract markers.txt --skip-existing --backup\n</code></pre> <pre><code># Overwrite with confirmation\nlookatni extract markers.txt --overwrite --verbose\n</code></pre> <pre><code># Intelligent merging for compatible files\nlookatni extract markers.txt --merge --backup\n</code></pre>"},{"location":"guide/best-practices/#team-collaboration-guidelines","title":"Team Collaboration Guidelines","text":""},{"location":"guide/best-practices/#sharing-protocols","title":"Sharing Protocols","text":"<p>\ud83d\udce4 Distribution Best Practices:</p> <ol> <li>Always validate before sharing</li> <li>Include documentation about the markers</li> <li>Use descriptive filenames with context</li> <li>Provide extraction instructions</li> <li>Include version information</li> </ol> <p>\ud83d\udccb Sharing Checklist:</p> <pre><code>## Marker File Checklist\n\n- [ ] Generated with latest LookAtni version\n- [ ] Passed strict validation\n- [ ] Descriptive filename with version/date\n- [ ] Includes README or documentation\n- [ ] Tested extraction in clean environment\n- [ ] File size reasonable for distribution method\n- [ ] Contains only necessary files\n- [ ] Sensitive data excluded (.env, secrets, etc.)\n</code></pre>"},{"location":"guide/best-practices/#version-control-integration","title":"Version Control Integration","text":"<p>\ud83d\udd04 Git Workflow:</p> <pre><code># .gitignore additions\nmarkers/\n*.markers.txt\ntemp-extraction/\n\n# Pre-commit hook example\n#!/bin/sh\n# Validate any marker files before commit\nif ls *.txt 1&gt; /dev/null 2&gt;&amp;1; then\n  for file in *.txt; do\n    if [[ $file == *\"markers\"* ]]; then\n      echo \"Validating $file...\"\n      lookatni validate \"$file\" --strict || exit 1\n    fi\n  done\nfi\n</code></pre>"},{"location":"guide/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guide/best-practices/#data-protection","title":"Data Protection","text":"<p>\ud83d\udd10 Security Guidelines:</p> <ol> <li>Never include sensitive data:</li> <li>API keys, passwords, tokens</li> <li>Database credentials</li> <li>Private certificates</li> <li> <p>Personal information</p> </li> <li> <p>Use exclusion patterns:    <pre><code>{\n  \"exclude\": [\n    \"**/.env*\",\n    \"**/secrets/**\",\n    \"**/*.key\",\n    \"**/*.pem\",\n    \"**/config/production.*\"\n  ]\n}\n</code></pre></p> </li> <li> <p>Validate before sharing:    <pre><code># Security scan\nlookatni validate markers.txt --security-scan\n\n# Check for sensitive patterns\ngrep -i \"password\\|secret\\|key\\|token\" markers.txt\n</code></pre></p> </li> </ol>"},{"location":"guide/best-practices/#access-control","title":"Access Control","text":"<p>\ud83d\udc65 Sharing Permissions:</p> <ul> <li>Internal projects: Team access only</li> <li>Open source: Public safe files only</li> <li>Client work: Explicit permission required</li> <li>Educational: Remove proprietary code</li> </ul>"},{"location":"guide/best-practices/#performance-guidelines","title":"Performance Guidelines","text":""},{"location":"guide/best-practices/#optimization-strategies","title":"Optimization Strategies","text":"<p>\ud83d\ude80 Speed Optimization:</p> Project Size Strategy Configuration Small (&lt;10MB) Standard Default settings Medium (10-100MB) Selective Filter patterns, parallel processing Large (100MB+) Optimized Streaming, compression, chunking Enterprise (1GB+) Advanced Custom scripts, incremental processing <p>\u2699\ufe0f Large Project Configuration:</p> <pre><code>{\n  \"performance\": {\n    \"parallel\": true,\n    \"threads\": 8,\n    \"streaming\": true,\n    \"compression\": true,\n    \"chunkSize\": \"10MB\",\n    \"tempDirectory\": \"/tmp/lookatni\",\n    \"maxMemory\": \"4GB\"\n  }\n}\n</code></pre>"},{"location":"guide/best-practices/#resource-management","title":"Resource Management","text":"<p>\ud83d\udcbe Memory &amp; Storage:</p> <pre><code># Monitor resource usage\nlookatni generate --source . --monitor-resources\n\n# Set limits\nlookatni generate \\\n  --source . \\\n  --max-memory=2GB \\\n  --max-files=10000 \\\n  --timeout=300\n\n# Cleanup temporary files\nlookatni cleanup --temp-files --older-than=1h\n</code></pre>"},{"location":"guide/best-practices/#quality-assurance","title":"Quality Assurance","text":""},{"location":"guide/best-practices/#testing-workflows","title":"Testing Workflows","text":"<p>\ud83e\uddea QA Process:</p> <ol> <li> <p>Generation Testing:    <pre><code># Test with different configurations\nlookatni generate --source . --config dev.json --dry-run\nlookatni generate --source . --config prod.json --dry-run\n</code></pre></p> </li> <li> <p>Validation Testing:    <pre><code># Test all validation levels\nlookatni validate markers.txt --quick\nlookatni validate markers.txt --detailed\nlookatni validate markers.txt --strict\n</code></pre></p> </li> <li> <p>Extraction Testing:    <pre><code># Test extraction in isolated environment\ndocker run --rm -v $(pwd):/work alpine:latest sh -c \"\n  cd /work &amp;&amp; \n  lookatni extract markers.txt --output /tmp/test &amp;&amp;\n  ls -la /tmp/test\n\"\n</code></pre></p> </li> </ol>"},{"location":"guide/best-practices/#automated-testing","title":"Automated Testing","text":"<p>\ud83e\udd16 CI/CD Testing:</p> <pre><code># GitHub Actions example\n- name: Test Marker Generation\n  run: |\n    # Generate test markers\n    lookatni generate --source ./test-project --output test.txt\n\n    # Validate\n    lookatni validate test.txt --strict\n\n    # Test extraction\n    lookatni extract test.txt --output ./extracted --dry-run\n\n    # Verify integrity\n    lookatni verify test.txt --extracted ./extracted\n</code></pre>"},{"location":"guide/best-practices/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"guide/best-practices/#common-issues-solutions","title":"Common Issues &amp; Solutions","text":"<p>\u274c File Too Large Error: <pre><code># Solution: Use compression and filtering\nlookatni generate --compress --max-file-size=5MB\n</code></pre></p> <p>\u274c Permission Denied: <pre><code># Solution: Check directory permissions\nchmod 755 output-directory\nlookatni extract --output ./safe-directory\n</code></pre></p> <p>\u274c Invalid Path Characters: <pre><code># Solution: Normalize paths\nlookatni generate --normalize-paths --cross-platform\n</code></pre></p> <p>\u274c Memory Issues: <pre><code># Solution: Use streaming mode\nlookatni generate --stream --max-memory=1GB\n</code></pre></p> <p>Next: Explore Advanced Topics for technical deep-dive.</p>"},{"location":"guide/commands/","title":"\ud83d\udccb Commands Reference","text":"<p>Complete reference for all LookAtni File Markers commands in VS Code and CLI.</p>"},{"location":"guide/commands/#vs-code-commands","title":"VS Code Commands","text":"<p>Access commands through the Command Palette (<code>Ctrl+Shift+P</code>) or right-click context menus.</p>"},{"location":"guide/commands/#file-generation-commands","title":"File Generation Commands","text":""},{"location":"guide/commands/#generate-markers","title":"Generate Markers","text":"<p><pre><code>LookAtni: Generate Markers\n</code></pre> Purpose: Create marker files from selected directories or workspace Usage:  1. Open Command Palette 2. Type \"LookAtni: Generate Markers\" 3. Select source directory 4. Choose output file location 5. Configure filters and options</p> <p>Keyboard Shortcut: <code>Ctrl+Shift+G</code> (configurable)</p>"},{"location":"guide/commands/#quick-markers","title":"Quick Markers","text":"<p><pre><code>LookAtni: Quick Markers\n</code></pre> Purpose: Generate markers with preset configurations for common scenarios Options: - Development Build - Include source, docs, configs - Production Build - Only production-ready files - Component Library - Just components and types - Documentation - Docs and examples only</p>"},{"location":"guide/commands/#file-operations-commands","title":"File Operations Commands","text":""},{"location":"guide/commands/#extract-files","title":"Extract Files","text":"<p><pre><code>LookAtni: Extract Files\n</code></pre> Purpose: Extract complete projects from marker files Features: - Interactive file browser for marker selection - Destination folder picker - Conflict resolution options - Progress tracking with cancellation</p>"},{"location":"guide/commands/#validate-markers","title":"Validate Markers","text":"<p><pre><code>LookAtni: Validate Markers\n</code></pre> Purpose: Verify integrity of marker files Output: - Comprehensive validation report - Issue categorization (Critical/Warning/Info) - Auto-fix suggestions - Performance metrics</p>"},{"location":"guide/commands/#demo-presentation-commands","title":"Demo &amp; Presentation Commands","text":""},{"location":"guide/commands/#automated-demo","title":"Automated Demo","text":"<p><pre><code>LookAtni: Automated Demo\n</code></pre> Purpose: Create perfect demonstrations for tutorials and presentations Features: - Scripted actions with timing control - Multiple demo scenarios - Recording-friendly output - Customizable speed and pauses</p>"},{"location":"guide/commands/#quick-demo","title":"Quick Demo","text":"<p><pre><code>LookAtni: Quick Demo\n</code></pre> Purpose: Quick demonstration of basic workflow Duration: ~2 minutes Content: Generate \u2192 Validate \u2192 Extract cycle</p>"},{"location":"guide/commands/#recording-guide","title":"Recording Guide","text":"<p><pre><code>LookAtni: Recording Guide\n</code></pre> Purpose: Open interactive guide for creating video tutorials Includes: - Step-by-step recording instructions - Best practices for screen recording - Recommended settings and tools</p>"},{"location":"guide/commands/#project-management-commands","title":"Project Management Commands","text":""},{"location":"guide/commands/#show-statistics","title":"Show Statistics","text":"<p><pre><code>LookAtni: Show Statistics\n</code></pre> Purpose: Display project metrics and insights Metrics: - File count by type - Total project size - Complexity analysis - Dependency graph</p>"},{"location":"guide/commands/#open-cli","title":"Open CLI","text":"<p><pre><code>LookAtni: Open CLI\n</code></pre> Purpose: Open integrated terminal with LookAtni CLI ready Features: - Pre-configured environment - Current project context - Command history and suggestions</p>"},{"location":"guide/commands/#visual-navigation-commands","title":"Visual &amp; Navigation Commands","text":""},{"location":"guide/commands/#visual-markers","title":"Visual Markers","text":"<p><pre><code>LookAtni: Visual Markers\n</code></pre> Purpose: Toggle enhanced visual markers in editor Features: - Syntax highlighting - Interactive navigation - File tree view - Hover information</p>"},{"location":"guide/commands/#configuration","title":"Configuration","text":"<p><pre><code>LookAtni: Configuration\n</code></pre> Purpose: Open settings UI for LookAtni preferences Categories: - Generation settings - Visual preferences - Performance options - Integration settings</p>"},{"location":"guide/commands/#cli-commands","title":"CLI Commands","text":""},{"location":"guide/commands/#installation-setup","title":"Installation &amp; Setup","text":"<pre><code># Install globally\nnpm install -g lookatni-cli\n\n# Verify installation\nlookatni --version\n\n# Show help\nlookatni --help\n</code></pre>"},{"location":"guide/commands/#core-commands","title":"Core Commands","text":""},{"location":"guide/commands/#lookatni-generate","title":"<code>lookatni generate</code>","text":"<p>Generate marker files from project directories.</p> <pre><code>lookatni generate [options]\n\nOptions:\n  -s, --source &lt;path&gt;       Source directory (default: current)\n  -o, --output &lt;file&gt;       Output marker file\n  -i, --include &lt;patterns&gt;  Include file patterns (comma-separated)\n  -e, --exclude &lt;patterns&gt;  Exclude file patterns (comma-separated)\n  -c, --compress           Compress output\n  -m, --metadata           Include file metadata\n  -p, --preserve-structure Preserve directory structure\n  -v, --verbose            Verbose output\n  -d, --dry-run           Preview without generating\n\nExamples:\n  lookatni generate --source ./my-project --output markers.txt\n  lookatni generate -s . -o markers.txt -i \"src/**,*.json\" -e \"node_modules/**\"\n  lookatni generate --compress --metadata --verbose\n</code></pre>"},{"location":"guide/commands/#lookatni-extract","title":"<code>lookatni extract</code>","text":"<p>Extract projects from marker files.</p> <pre><code>lookatni extract [options]\n\nOptions:\n  -i, --input &lt;file&gt;        Input marker file (required)\n  -o, --output &lt;path&gt;       Output directory (default: current)\n  -f, --filter &lt;patterns&gt;   Extract specific patterns only\n  -e, --exclude &lt;patterns&gt;  Exclude specific patterns\n  --overwrite              Overwrite existing files\n  --backup                 Create backups before overwriting\n  --skip-existing          Skip existing files\n  -v, --verbose            Verbose output\n  -d, --dry-run           Preview without extracting\n\nExamples:\n  lookatni extract -i project.txt -o ./restored\n  lookatni extract -i markers.txt -f \"src/**\" --overwrite\n  lookatni extract -i project.txt --backup --verbose\n</code></pre>"},{"location":"guide/commands/#lookatni-validate","title":"<code>lookatni validate</code>","text":"<p>Validate marker file integrity.</p> <pre><code>lookatni validate [options] &lt;file&gt;\n\nOptions:\n  -d, --detailed           Show detailed validation report\n  -f, --fix-suggestions    Provide fix suggestions\n  -r, --report &lt;file&gt;      Save report to file\n  --strict                 Use strict validation rules\n  --auto-fix              Attempt automatic fixes\n  -j, --json              Output in JSON format\n  -v, --verbose           Verbose output\n\nExamples:\n  lookatni validate project.txt\n  lookatni validate markers.txt --detailed --fix-suggestions\n  lookatni validate project.txt --strict --report validation.json\n</code></pre>"},{"location":"guide/commands/#advanced-commands","title":"Advanced Commands","text":""},{"location":"guide/commands/#lookatni-analyze","title":"<code>lookatni analyze</code>","text":"<p>Analyze project structure and dependencies.</p> <pre><code>lookatni analyze [options]\n\nOptions:\n  -s, --source &lt;path&gt;       Source directory\n  -o, --output &lt;file&gt;       Save analysis to file\n  -g, --graph &lt;file&gt;        Generate dependency graph\n  --size-breakdown         Show size breakdown by file type\n  --complexity-analysis    Analyze code complexity\n  -f, --format &lt;type&gt;       Output format (json|yaml|txt)\n\nExamples:\n  lookatni analyze --source ./project --output analysis.json\n  lookatni analyze --graph deps.dot --size-breakdown\n</code></pre>"},{"location":"guide/commands/#lookatni-diff","title":"<code>lookatni diff</code>","text":"<p>Compare marker files or directories.</p> <pre><code>lookatni diff [options] &lt;source1&gt; &lt;source2&gt;\n\nOptions:\n  -r, --report &lt;file&gt;      Save comparison report\n  --ignore-whitespace     Ignore whitespace changes\n  --ignore-metadata       Ignore metadata differences\n  -f, --format &lt;type&gt;      Report format (json|html|txt)\n  -v, --verbose           Show detailed differences\n\nExamples:\n  lookatni diff old.txt new.txt\n  lookatni diff markers.txt ./project-dir --report changes.html\n</code></pre>"},{"location":"guide/commands/#lookatni-merge","title":"<code>lookatni merge</code>","text":"<p>Merge multiple marker files.</p> <pre><code>lookatni merge [options] &lt;files...&gt;\n\nOptions:\n  -o, --output &lt;file&gt;      Output merged file\n  --strategy &lt;type&gt;        Merge strategy (combine|overwrite|prompt)\n  --deduplicate           Remove duplicate files\n  -v, --verbose           Verbose output\n\nExamples:\n  lookatni merge file1.txt file2.txt -o combined.txt\n  lookatni merge *.txt --deduplicate --strategy=combine\n</code></pre>"},{"location":"guide/commands/#configuration-commands","title":"Configuration Commands","text":""},{"location":"guide/commands/#lookatni-config","title":"<code>lookatni config</code>","text":"<p>Manage global configuration.</p> <pre><code>lookatni config &lt;command&gt; [options]\n\nCommands:\n  set &lt;key&gt; &lt;value&gt;        Set configuration value\n  get &lt;key&gt;               Get configuration value\n  list                    List all configuration\n  reset                   Reset to defaults\n  validate &lt;file&gt;         Validate config file\n\nExamples:\n  lookatni config set default.output ./markers\n  lookatni config get default.include\n  lookatni config list\n  lookatni config validate .lookatni.json\n</code></pre>"},{"location":"guide/commands/#lookatni-init","title":"<code>lookatni init</code>","text":"<p>Initialize project configuration.</p> <pre><code>lookatni init [options]\n\nOptions:\n  -t, --template &lt;type&gt;    Use configuration template\n  -f, --force             Overwrite existing configuration\n  -i, --interactive       Interactive configuration wizard\n\nTemplates:\n  - javascript           JavaScript/Node.js projects\n  - typescript           TypeScript projects\n  - react               React applications\n  - vue                 Vue.js applications\n  - python              Python projects\n  - documentation       Documentation sites\n\nExamples:\n  lookatni init --template react\n  lookatni init --interactive\n</code></pre>"},{"location":"guide/commands/#command-chaining-workflows","title":"Command Chaining &amp; Workflows","text":""},{"location":"guide/commands/#basic-workflow","title":"Basic Workflow","text":"<pre><code># Complete workflow in one command chain\nlookatni generate --source . --output project.txt &amp;&amp; \\\nlookatni validate project.txt --strict &amp;&amp; \\\necho \"\u2705 Project markers ready for distribution!\"\n</code></pre>"},{"location":"guide/commands/#development-workflow","title":"Development Workflow","text":"<pre><code># Development build with validation\nlookatni generate \\\n  --source ./src \\\n  --include \"**/*.{ts,tsx,js,jsx,json,md}\" \\\n  --exclude \"**/*.test.*\" \\\n  --output dev-build.txt \\\n  --metadata --verbose\n\n# Validate and extract for testing\nlookatni validate dev-build.txt --detailed\nlookatni extract --input dev-build.txt --output ./test-extraction --dry-run\n</code></pre>"},{"location":"guide/commands/#production-workflow","title":"Production Workflow","text":"<pre><code># Production-ready markers\nlookatni generate \\\n  --source . \\\n  --include \"src/**,README.md,package.json,LICENSE\" \\\n  --exclude \"**/*.test.*,**/*.spec.*,node_modules/**\" \\\n  --output \"$(basename $PWD)-prod-$(date +%Y%m%d).txt\" \\\n  --compress --preserve-structure\n\n# Validate with strict rules\nlookatni validate *.txt --strict --report validation-report.json\n</code></pre>"},{"location":"guide/commands/#error-handling-troubleshooting","title":"Error Handling &amp; Troubleshooting","text":""},{"location":"guide/commands/#common-exit-codes","title":"Common Exit Codes","text":"Code Meaning Action 0 Success Continue 1 General error Check command syntax 2 File not found Verify file paths 3 Permission denied Check file permissions 4 Invalid configuration Validate config file 5 Validation failed Fix validation errors"},{"location":"guide/commands/#debugging-commands","title":"Debugging Commands","text":"<pre><code># Verbose output for debugging\nlookatni generate --verbose --source .\n\n# Dry run to test without changes\nlookatni extract --input markers.txt --dry-run\n\n# Debug configuration\nlookatni config debug\n\n# Test file patterns\nlookatni test-pattern \"src/**/*.{ts,tsx}\"\n</code></pre>"},{"location":"guide/commands/#performance-optimization","title":"Performance Optimization","text":"<pre><code># For large projects\nlookatni generate --source . --parallel=8 --stream\n\n# Memory-conscious processing\nlookatni generate --source . --max-memory=2GB --use-temp\n\n# Compress large outputs\nlookatni generate --source . --compress --output large-project.txt.gz\n</code></pre> <p>Next: Explore Workflows Guide for advanced automation patterns.</p>"},{"location":"guide/configuration/","title":"\u2699\ufe0f Configuration Guide","text":"<p>Comprehensive configuration options for customizing LookAtni File Markers to fit your workflow.</p>"},{"location":"guide/configuration/#configuration-levels","title":"Configuration Levels","text":"<p>LookAtni supports configuration at multiple levels, with the following priority order:</p> <ol> <li>Command-line arguments (highest priority)</li> <li>Workspace settings (VS Code workspace)</li> <li>User settings (VS Code global)</li> <li>Project configuration (<code>.lookatni.json</code>)</li> <li>Global defaults (lowest priority)</li> </ol>"},{"location":"guide/configuration/#vs-code-settings","title":"VS Code Settings","text":""},{"location":"guide/configuration/#basic-settings","title":"Basic Settings","text":"<pre><code>{\n  // File generation settings\n  \"lookatni.generation.autoInclude\": [\n    \"src/**\",\n    \"docs/**\",\n    \"*.json\",\n    \"*.md\"\n  ],\n  \"lookatni.generation.autoExclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"build/**\",\n    \"*.log\",\n    \".git/**\"\n  ],\n\n  // Output settings\n  \"lookatni.output.defaultDirectory\": \"./markers\",\n  \"lookatni.output.filenameTemplate\": \"{{project}}-{{timestamp}}.txt\",\n  \"lookatni.output.compressOutput\": true,\n\n  // Validation settings\n  \"lookatni.validation.strictMode\": true,\n  \"lookatni.validation.maxFileSize\": \"10MB\",\n  \"lookatni.validation.validateOnSave\": true\n}\n</code></pre>"},{"location":"guide/configuration/#visual-settings","title":"Visual Settings","text":"<pre><code>{\n  // Visual markers\n  \"lookatni.visual.enableSyntaxHighlighting\": true,\n  \"lookatni.visual.showFileTree\": true,\n  \"lookatni.visual.enableHoverInfo\": true,\n  \"lookatni.visual.colorScheme\": \"material\",\n\n  // Editor integration\n  \"lookatni.editor.showInlinePreview\": true,\n  \"lookatni.editor.enableCodeFolding\": true,\n  \"lookatni.editor.showLineNumbers\": true,\n\n  // Performance\n  \"lookatni.performance.enableForLargeFiles\": false,\n  \"lookatni.performance.maxFileSizeForVisual\": \"5MB\",\n  \"lookatni.performance.lazyLoading\": true\n}\n</code></pre>"},{"location":"guide/configuration/#automation-settings","title":"Automation Settings","text":"<pre><code>{\n  // Auto-generation\n  \"lookatni.auto.generateOnSave\": false,\n  \"lookatni.auto.generateOnBuild\": true,\n  \"lookatni.auto.validateAfterGeneration\": true,\n\n  // Demo settings\n  \"lookatni.demo.autoSpeed\": \"normal\",\n  \"lookatni.demo.showSteps\": true,\n  \"lookatni.demo.pauseBetweenActions\": 1000,\n\n  // CLI integration\n  \"lookatni.cli.useGlobalInstall\": true,\n  \"lookatni.cli.defaultArguments\": \"--verbose --preserve-structure\"\n}\n</code></pre>"},{"location":"guide/configuration/#project-configuration","title":"Project Configuration","text":""},{"location":"guide/configuration/#lookatnijson-file","title":"<code>.lookatni.json</code> File","text":"<p>Create a <code>.lookatni.json</code> file in your project root:</p> <pre><code>{\n  \"version\": \"1.0\",\n  \"name\": \"my-react-app\",\n  \"description\": \"React application with TypeScript\",\n\n  \"include\": [\n    \"src/**/*.{ts,tsx,js,jsx}\",\n    \"public/**/*.{html,css,js}\",\n    \"*.{json,md,yml,yaml}\",\n    \"docs/**/*.md\"\n  ],\n\n  \"exclude\": [\n    \"node_modules/**\",\n    \"dist/**\",\n    \"build/**\",\n    \"coverage/**\",\n    \"*.log\",\n    \".git/**\",\n    \".vscode/**\",\n    \"*.test.{ts,tsx,js,jsx}\"\n  ],\n\n  \"output\": {\n    \"directory\": \"./markers\",\n    \"filename\": \"{{project}}-{{version}}-{{timestamp}}.txt\",\n    \"compress\": true,\n    \"includeMetadata\": true,\n    \"preserveStructure\": true\n  },\n\n  \"validation\": {\n    \"strict\": true,\n    \"maxFileSize\": \"10MB\",\n    \"allowedExtensions\": [\n      \".ts\", \".tsx\", \".js\", \".jsx\",\n      \".json\", \".md\", \".html\", \".css\",\n      \".yml\", \".yaml\"\n    ],\n    \"requiredFiles\": [\n      \"package.json\",\n      \"README.md\"\n    ],\n    \"customRules\": [\n      {\n        \"pattern\": \"src/**/*.test.*\",\n        \"action\": \"exclude\",\n        \"reason\": \"Test files should not be included in production markers\"\n      }\n    ]\n  },\n\n  \"templates\": {\n    \"header\": \"# {{project}} - {{description}}\\\\nGenerated: {{timestamp}}\\\\n\",\n    \"fileMarker\": \"=== {{path}} ===\",\n    \"footer\": \"\\\\n# End of {{project}} markers\"\n  },\n\n  \"presets\": {\n    \"development\": {\n      \"include\": [\"src/**\", \"docs/**\", \"*.json\"],\n      \"exclude\": [\"**/*.test.*\"],\n      \"validation\": { \"strict\": false }\n    },\n    \"production\": {\n      \"include\": [\"src/**\", \"README.md\", \"package.json\"],\n      \"exclude\": [\"**/*.test.*\", \"**/*.spec.*\", \"docs/**\"],\n      \"validation\": { \"strict\": true }\n    }\n  }\n}\n</code></pre>"},{"location":"guide/configuration/#configuration-schemas","title":"Configuration Schemas","text":"<p>LookAtni includes JSON schemas for validation:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/rafa-mori/lookatni-file-markers/main/schemas/config.schema.json\",\n  \"version\": \"1.0\",\n  // ... your configuration\n}\n</code></pre>"},{"location":"guide/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"guide/configuration/#file-filters","title":"File Filters","text":""},{"location":"guide/configuration/#glob-patterns","title":"Glob Patterns","text":"<pre><code>{\n  \"include\": [\n    \"src/**/*.{ts,tsx}\",        // TypeScript files in src\n    \"!src/**/*.test.*\",         // Exclude test files\n    \"docs/**/*.{md,mdx}\",       // Documentation files\n    \"*.{json,yml,yaml}\",        // Config files in root\n    \"public/**/*.!(*.map)\"      // Public files except source maps\n  ]\n}\n</code></pre>"},{"location":"guide/configuration/#dynamic-filters","title":"Dynamic Filters","text":"<pre><code>{\n  \"filters\": {\n    \"typescript\": {\n      \"include\": [\"**/*.{ts,tsx}\"],\n      \"exclude\": [\"**/*.d.ts\"]\n    },\n    \"documentation\": {\n      \"include\": [\"**/*.{md,mdx}\", \"**/README*\"],\n      \"exclude\": [\"node_modules/**\"]\n    },\n    \"configuration\": {\n      \"include\": [\n        \"*.{json,yml,yaml,toml}\",\n        \".env*\",\n        \".*rc*\"\n      ]\n    }\n  },\n\n  \"activeFilters\": [\"typescript\", \"documentation\", \"configuration\"]\n}\n</code></pre>"},{"location":"guide/configuration/#template-system","title":"Template System","text":""},{"location":"guide/configuration/#custom-templates","title":"Custom Templates","text":"<pre><code>{\n  \"templates\": {\n    \"fileHeader\": [\n      \"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\",\n      \"\u2551 FILE: {{path}}\",\n      \"\u2551 SIZE: {{size}} | MODIFIED: {{modified}}\",\n      \"\u2551 TYPE: {{type}} | ENCODING: {{encoding}}\",\n      \"\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\"\n    ],\n\n    \"directoryHeader\": [\n      \"\ud83d\udcc1 DIRECTORY: {{path}}\",\n      \"   Files: {{fileCount}} | Size: {{totalSize}}\"\n    ],\n\n    \"projectHeader\": [\n      \"\ud83d\ude80 PROJECT: {{name}}\",\n      \"\ud83d\udcc4 Description: {{description}}\",\n      \"\ud83d\udd52 Generated: {{timestamp}}\",\n      \"\ud83d\udcca Total Files: {{totalFiles}} | Total Size: {{totalSize}}\",\n      \"\"\n    ]\n  }\n}\n</code></pre>"},{"location":"guide/configuration/#variable-substitution","title":"Variable Substitution","text":"<p>Available template variables:</p> Variable Description Example <code>{{project}}</code> Project name <code>my-react-app</code> <code>{{version}}</code> Project version <code>1.0.0</code> <code>{{timestamp}}</code> Generation time <code>2024-07-12T10:30:00Z</code> <code>{{path}}</code> File/directory path <code>src/components/Header.tsx</code> <code>{{size}}</code> File size <code>2.4 KB</code> <code>{{modified}}</code> Last modified time <code>2024-07-12T09:15:00Z</code> <code>{{type}}</code> File type <code>typescript</code> <code>{{encoding}}</code> File encoding <code>utf-8</code> <code>{{fileCount}}</code> Number of files <code>156</code> <code>{{totalSize}}</code> Total project size <code>1.2 MB</code>"},{"location":"guide/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"guide/configuration/#multiple-environments","title":"Multiple Environments","text":"<pre><code>{\n  \"environments\": {\n    \"development\": {\n      \"include\": [\"src/**\", \"tests/**\", \"docs/**\"],\n      \"output\": {\n        \"directory\": \"./dev-markers\",\n        \"filename\": \"dev-{{timestamp}}.txt\"\n      },\n      \"validation\": { \"strict\": false }\n    },\n\n    \"staging\": {\n      \"include\": [\"src/**\", \"docs/**\"],\n      \"exclude\": [\"**/*.test.*\"],\n      \"output\": {\n        \"directory\": \"./staging-markers\",\n        \"compress\": true\n      },\n      \"validation\": { \"strict\": true }\n    },\n\n    \"production\": {\n      \"include\": [\"src/**\"],\n      \"exclude\": [\"**/*.test.*\", \"**/*.spec.*\", \"**/*.stories.*\"],\n      \"output\": {\n        \"directory\": \"./prod-markers\",\n        \"filename\": \"prod-{{version}}-{{timestamp}}.txt\",\n        \"compress\": true,\n        \"includeMetadata\": false\n      },\n      \"validation\": {\n        \"strict\": true,\n        \"maxFileSize\": \"5MB\"\n      }\n    }\n  },\n\n  \"defaultEnvironment\": \"development\"\n}\n</code></pre>"},{"location":"guide/configuration/#environment-variables","title":"Environment Variables","text":"<pre><code># Set environment\nexport LOOKATNI_ENV=production\n\n# Override settings\nexport LOOKATNI_OUTPUT_DIR=./custom-markers\nexport LOOKATNI_COMPRESS=true\nexport LOOKATNI_STRICT_VALIDATION=true\n</code></pre>"},{"location":"guide/configuration/#integration-configuration","title":"Integration Configuration","text":""},{"location":"guide/configuration/#git-integration","title":"Git Integration","text":"<pre><code>{\n  \"git\": {\n    \"respectGitignore\": true,\n    \"includeGitInfo\": true,\n    \"excludeGitFiles\": true,\n    \"customIgnoreFile\": \".lookatniignore\"\n  }\n}\n</code></pre>"},{"location":"guide/configuration/#ide-integration","title":"IDE Integration","text":"<pre><code>{\n  \"ide\": {\n    \"vscode\": {\n      \"enableExtension\": true,\n      \"showInExplorer\": true,\n      \"enableCommands\": true,\n      \"keybindings\": {\n        \"generateMarkers\": \"ctrl+shift+g\",\n        \"extractFiles\": \"ctrl+shift+e\",\n        \"validateMarkers\": \"ctrl+shift+v\"\n      }\n    },\n\n    \"intellij\": {\n      \"enablePlugin\": false\n    }\n  }\n}\n</code></pre>"},{"location":"guide/configuration/#build-tool-integration","title":"Build Tool Integration","text":""},{"location":"guide/configuration/#webpack","title":"Webpack","text":"<pre><code>// webpack.config.js\nconst LookAtniPlugin = require('lookatni-webpack-plugin');\n\nmodule.exports = {\n  plugins: [\n    new LookAtniPlugin({\n      configFile: './.lookatni.json',\n      environment: process.env.NODE_ENV,\n      generateOnBuild: true,\n      outputPath: './dist/markers'\n    })\n  ]\n};\n</code></pre>"},{"location":"guide/configuration/#vite","title":"Vite","text":"<pre><code>// vite.config.js\nimport { defineConfig } from 'vite';\nimport lookatni from 'vite-plugin-lookatni';\n\nexport default defineConfig({\n  plugins: [\n    lookatni({\n      include: ['src/**'],\n      exclude: ['**/*.test.*'],\n      outputDir: './dist/markers'\n    })\n  ]\n});\n</code></pre>"},{"location":"guide/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"guide/configuration/#validation","title":"Validation","text":"<pre><code># Validate configuration file\nlookatni config validate .lookatni.json\n\n# Check effective configuration\nlookatni config show --environment production\n\n# Test configuration\nlookatni config test .lookatni.json --dry-run\n</code></pre>"},{"location":"guide/configuration/#common-issues","title":"Common Issues","text":"<p>Configuration Not Applied</p> <pre><code># Check configuration precedence\nlookatni config debug\n\n# Force reload configuration\nlookatni config reload\n</code></pre> <p>Invalid Glob Patterns</p> <pre><code># Test glob patterns\nlookatni test-pattern \"src/**/*.{ts,tsx}\"\n\n# Show matched files\nlookatni list-files --pattern \"src/**/*.{ts,tsx}\"\n</code></pre> <p>Performance Issues</p> <pre><code>// Optimize for large projects\n{\n  \"performance\": {\n    \"maxFiles\": 10000,\n    \"maxFileSize\": \"1MB\",\n    \"parallelProcessing\": true,\n    \"streamLargeFiles\": true\n  }\n}\n</code></pre> <p>Next: Learn about Commands Guide for detailed command usage.</p>"},{"location":"guide/workflows/","title":"\ud83d\udd04 Workflows Guide","text":"<p>Advanced workflow patterns and automation strategies for LookAtni File Markers.</p>"},{"location":"guide/workflows/#development-workflows","title":"Development Workflows","text":""},{"location":"guide/workflows/#daily-development-workflow","title":"Daily Development Workflow","text":"<pre><code>graph LR\n    A[Code Changes] --&gt; B[Auto Generate]\n    B --&gt; C[Validate]\n    C --&gt; D{Valid?}\n    D --&gt;|Yes| E[Commit]\n    D --&gt;|No| F[Fix Issues]\n    F --&gt; B\n    E --&gt; G[Share Markers]</code></pre> <p>Implementation:</p> <pre><code># Development script (dev-workflow.sh)\n#!/bin/bash\n\necho \"\ud83d\ude80 Starting development workflow...\"\n\n# Generate markers for current changes\nlookatni generate \\\n  --source ./src \\\n  --include \"**/*.{ts,tsx,js,jsx}\" \\\n  --exclude \"**/*.test.*\" \\\n  --output \"dev-$(date +%H%M).txt\" \\\n  --metadata\n\n# Validate immediately\nif lookatni validate \"dev-$(date +%H%M).txt\" --strict; then\n  echo \"\u2705 Markers valid - ready to share!\"\n  # Optional: auto-commit or share\nelse\n  echo \"\u274c Validation failed - please fix issues\"\n  exit 1\nfi\n</code></pre>"},{"location":"guide/workflows/#feature-branch-workflow","title":"Feature Branch Workflow","text":"<p>Perfect for sharing specific features or components:</p> <pre><code># Feature extraction workflow\nFEATURE_NAME=\"user-authentication\"\nBRANCH_NAME=$(git branch --show-current)\n\n# Generate markers for feature-specific files\nlookatni generate \\\n  --source . \\\n  --include \"src/auth/**,src/components/Login/**,src/types/user.ts\" \\\n  --output \"feature-${FEATURE_NAME}.txt\" \\\n  --preserve-structure\n\n# Create feature documentation\necho \"# Feature: ${FEATURE_NAME}\" &gt; feature-${FEATURE_NAME}.md\necho \"Branch: ${BRANCH_NAME}\" &gt;&gt; feature-${FEATURE_NAME}.md\necho \"Files included in markers:\" &gt;&gt; feature-${FEATURE_NAME}.md\nlookatni analyze --source . --format txt &gt;&gt; feature-${FEATURE_NAME}.md\n</code></pre>"},{"location":"guide/workflows/#cicd-workflows","title":"CI/CD Workflows","text":""},{"location":"guide/workflows/#github-actions-integration","title":"GitHub Actions Integration","text":"<pre><code># .github/workflows/markers.yml\nname: Generate and Validate Markers\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  markers:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Install LookAtni CLI\n        run: npm install -g lookatni-cli\n\n      - name: Generate production markers\n        run: |\n          lookatni generate \\\n            --source . \\\n            --include \"src/**,package.json,README.md\" \\\n            --exclude \"**/*.test.*,node_modules/**\" \\\n            --output \"production-${GITHUB_SHA::8}.txt\" \\\n            --compress --preserve-structure\n\n      - name: Validate markers\n        run: |\n          lookatni validate \"production-${GITHUB_SHA::8}.txt\" \\\n            --strict \\\n            --report validation-report.json\n\n      - name: Upload markers artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: production-markers\n          path: production-*.txt\n\n      - name: Upload validation report\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: validation-report\n          path: validation-report.json\n\n  # Deploy markers to releases\n  release:\n    needs: markers\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Download markers\n        uses: actions/download-artifact@v4\n        with:\n          name: production-markers\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        with:\n          tag_name: v${{ github.run_number }}\n          files: production-*.txt\n          generate_release_notes: true\n</code></pre>"},{"location":"guide/workflows/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - build\n  - validate\n  - package\n  - deploy\n\nvariables:\n  LOOKATNI_VERSION: \"latest\"\n\nbefore_script:\n  - npm install -g lookatni-cli@$LOOKATNI_VERSION\n\ngenerate_markers:\n  stage: build\n  script:\n    - |\n      lookatni generate \\\n        --source . \\\n        --include \"src/**,docs/**,*.json,*.md\" \\\n        --exclude \"node_modules/**,*.log,coverage/**\" \\\n        --output \"project-$CI_COMMIT_SHORT_SHA.txt\" \\\n        --compress --metadata\n  artifacts:\n    paths:\n      - project-*.txt\n    expire_in: 1 week\n  only:\n    - main\n    - develop\n    - merge_requests\n\nvalidate_markers:\n  stage: validate\n  dependencies:\n    - generate_markers\n  script:\n    - |\n      lookatni validate project-$CI_COMMIT_SHORT_SHA.txt \\\n        --strict \\\n        --detailed \\\n        --report validation-$CI_COMMIT_SHORT_SHA.json\n  artifacts:\n    reports:\n      junit: validation-*.json\n  allow_failure: false\n\npackage_release:\n  stage: package\n  dependencies:\n    - generate_markers\n    - validate_markers\n  script:\n    - mkdir release\n    - cp project-$CI_COMMIT_SHORT_SHA.txt release/\n    - cp validation-$CI_COMMIT_SHORT_SHA.json release/\n    - tar -czf release-$CI_COMMIT_SHORT_SHA.tar.gz release/\n  artifacts:\n    paths:\n      - release-*.tar.gz\n  only:\n    - tags\n</code></pre>"},{"location":"guide/workflows/#educational-workflows","title":"Educational Workflows","text":""},{"location":"guide/workflows/#course-material-distribution","title":"Course Material Distribution","text":"<pre><code># Course setup script\n#!/bin/bash\n\nCOURSE_NAME=\"react-fundamentals\"\nLESSON_NUMBER=$1\n\nif [ -z \"$LESSON_NUMBER\" ]; then\n  echo \"Usage: $0 &lt;lesson_number&gt;\"\n  exit 1\nfi\n\necho \"\ud83d\udcda Preparing lesson $LESSON_NUMBER for $COURSE_NAME...\"\n\n# Create lesson-specific markers\nlookatni generate \\\n  --source \"./lessons/lesson-$LESSON_NUMBER\" \\\n  --include \"**/*.{js,jsx,css,md}\" \\\n  --exclude \"**/node_modules/**,**/.git/**\" \\\n  --output \"lesson-$LESSON_NUMBER-starter.txt\" \\\n  --preserve-structure\n\n# Create solution markers\nlookatni generate \\\n  --source \"./solutions/lesson-$LESSON_NUMBER\" \\\n  --include \"**/*.{js,jsx,css,md}\" \\\n  --exclude \"**/node_modules/**,**/.git/**\" \\\n  --output \"lesson-$LESSON_NUMBER-solution.txt\" \\\n  --preserve-structure\n\n# Validate both\nlookatni validate \"lesson-$LESSON_NUMBER-starter.txt\"\nlookatni validate \"lesson-$LESSON_NUMBER-solution.txt\"\n\necho \"\u2705 Lesson $LESSON_NUMBER materials ready!\"\necho \"\ud83d\udcc1 Starter: lesson-$LESSON_NUMBER-starter.txt\"\necho \"\ud83d\udca1 Solution: lesson-$LESSON_NUMBER-solution.txt\"\n</code></pre>"},{"location":"guide/workflows/#workshop-automation","title":"Workshop Automation","text":"<pre><code># workshop-manager.py\nimport subprocess\nimport json\nimport os\nfrom datetime import datetime\n\nclass WorkshopManager:\n    def __init__(self, workshop_name):\n        self.workshop_name = workshop_name\n        self.timestamp = datetime.now().strftime(\"%Y%m%d_%H%M\")\n\n    def prepare_workshop(self):\n        \"\"\"Prepare all workshop materials\"\"\"\n\n        # Create workshop directory structure\n        os.makedirs(f\"workshops/{self.workshop_name}\", exist_ok=True)\n\n        # Generate starter project\n        self._generate_markers(\n            source=\"./workshop-templates/starter\",\n            output=f\"workshops/{self.workshop_name}/starter-{self.timestamp}.txt\",\n            description=\"Workshop starter files\"\n        )\n\n        # Generate exercise solutions\n        exercises = self._get_exercises()\n        for i, exercise in enumerate(exercises, 1):\n            self._generate_markers(\n                source=f\"./workshop-templates/exercises/{exercise}\",\n                output=f\"workshops/{self.workshop_name}/exercise-{i:02d}-{exercise}.txt\",\n                description=f\"Exercise {i}: {exercise}\"\n            )\n\n        # Generate final project\n        self._generate_markers(\n            source=\"./workshop-templates/final\",\n            output=f\"workshops/{self.workshop_name}/final-project.txt\",\n            description=\"Complete workshop project\"\n        )\n\n        print(f\"\u2705 Workshop '{self.workshop_name}' prepared successfully!\")\n\n    def _generate_markers(self, source, output, description):\n        \"\"\"Generate markers with validation\"\"\"\n\n        cmd = [\n            \"lookatni\", \"generate\",\n            \"--source\", source,\n            \"--output\", output,\n            \"--include\", \"**/*.{js,jsx,ts,tsx,css,md,json}\",\n            \"--exclude\", \"node_modules/**,*.log\",\n            \"--preserve-structure\",\n            \"--metadata\"\n        ]\n\n        result = subprocess.run(cmd, capture_output=True, text=True)\n\n        if result.returncode == 0:\n            # Validate generated markers\n            validate_cmd = [\"lookatni\", \"validate\", output, \"--strict\"]\n            validate_result = subprocess.run(validate_cmd, capture_output=True, text=True)\n\n            if validate_result.returncode == 0:\n                print(f\"\u2705 {description}: {output}\")\n            else:\n                print(f\"\u274c Validation failed for {output}\")\n        else:\n            print(f\"\u274c Failed to generate {output}: {result.stderr}\")\n\n    def _get_exercises(self):\n        \"\"\"Get list of available exercises\"\"\"\n        exercises_dir = \"./workshop-templates/exercises\"\n        if os.path.exists(exercises_dir):\n            return [d for d in os.listdir(exercises_dir) \n                   if os.path.isdir(os.path.join(exercises_dir, d))]\n        return []\n\n# Usage\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python workshop-manager.py &lt;workshop_name&gt;\")\n        sys.exit(1)\n\n    workshop = WorkshopManager(sys.argv[1])\n    workshop.prepare_workshop()\n</code></pre>"},{"location":"guide/workflows/#team-collaboration-workflows","title":"Team Collaboration Workflows","text":""},{"location":"guide/workflows/#code-review-workflow","title":"Code Review Workflow","text":"<pre><code># review-prep.sh - Prepare code for review\n#!/bin/bash\n\nPR_NUMBER=$1\nBRANCH_NAME=$(git branch --show-current)\n\nif [ -z \"$PR_NUMBER\" ]; then\n  echo \"Usage: $0 &lt;pr_number&gt;\"\n  exit 1\nfi\n\necho \"\ud83d\udd0d Preparing code review for PR #$PR_NUMBER...\"\n\n# Get changed files\nCHANGED_FILES=$(git diff --name-only origin/main..HEAD)\n\necho \"Changed files:\"\necho \"$CHANGED_FILES\"\n\n# Generate markers for changed files only\necho \"$CHANGED_FILES\" | tr '\\n' ',' | sed 's/,$//' &gt; changed_files.txt\nINCLUDE_PATTERN=$(cat changed_files.txt)\n\nlookatni generate \\\n  --source . \\\n  --include \"$INCLUDE_PATTERN\" \\\n  --output \"review-pr-$PR_NUMBER.txt\" \\\n  --preserve-structure \\\n  --metadata\n\n# Add context files (related imports, tests, etc.)\nlookatni generate \\\n  --source . \\\n  --include \"$INCLUDE_PATTERN,**/*.test.*,**/*.spec.*\" \\\n  --exclude \"node_modules/**\" \\\n  --output \"review-pr-$PR_NUMBER-context.txt\" \\\n  --preserve-structure\n\n# Validate\nlookatni validate \"review-pr-$PR_NUMBER.txt\"\nlookatni validate \"review-pr-$PR_NUMBER-context.txt\"\n\necho \"\u2705 Review materials ready:\"\necho \"\ud83d\udcc1 Changes: review-pr-$PR_NUMBER.txt\"\necho \"\ud83e\uddea With tests: review-pr-$PR_NUMBER-context.txt\"\n\n# Cleanup\nrm changed_files.txt\n</code></pre>"},{"location":"guide/workflows/#component-library-workflow","title":"Component Library Workflow","text":"<pre><code># component-release.sh\n#!/bin/bash\n\nCOMPONENT_NAME=$1\nVERSION=$2\n\nif [ -z \"$COMPONENT_NAME\" ] || [ -z \"$VERSION\" ]; then\n  echo \"Usage: $0 &lt;component_name&gt; &lt;version&gt;\"\n  exit 1\nfi\n\necho \"\ud83d\udce6 Releasing component $COMPONENT_NAME v$VERSION...\"\n\n# Generate component package\nlookatni generate \\\n  --source \"./src/components/$COMPONENT_NAME\" \\\n  --include \"**/*.{ts,tsx,css,md}\" \\\n  --exclude \"**/*.test.*,**/*.stories.*\" \\\n  --output \"components/$COMPONENT_NAME-$VERSION.txt\" \\\n  --preserve-structure\n\n# Generate with examples and tests\nlookatni generate \\\n  --source \"./src/components/$COMPONENT_NAME\" \\\n  --include \"**/*.{ts,tsx,css,md,stories.*}\" \\\n  --output \"components/$COMPONENT_NAME-$VERSION-examples.txt\" \\\n  --preserve-structure\n\n# Generate documentation\nlookatni generate \\\n  --source \"./docs/components/$COMPONENT_NAME\" \\\n  --include \"**/*.{md,mdx}\" \\\n  --output \"components/$COMPONENT_NAME-$VERSION-docs.txt\"\n\n# Validate all packages\nfor file in components/$COMPONENT_NAME-$VERSION*.txt; do\n  echo \"Validating $file...\"\n  lookatni validate \"$file\" --strict\ndone\n\necho \"\u2705 Component $COMPONENT_NAME v$VERSION packaged successfully!\"\n</code></pre>"},{"location":"guide/workflows/#backup-archive-workflows","title":"Backup &amp; Archive Workflows","text":""},{"location":"guide/workflows/#automated-backup-system","title":"Automated Backup System","text":"<pre><code># backup-system.sh\n#!/bin/bash\n\nBACKUP_DIR=\"/backups/projects\"\nPROJECT_NAME=$(basename \"$PWD\")\nDATE=$(date +%Y%m%d)\nTIME=$(date +%H%M)\n\necho \"\ud83d\udcbe Creating backup for $PROJECT_NAME...\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR/$PROJECT_NAME/$DATE\"\n\n# Generate different backup types\necho \"Creating daily backup...\"\nlookatni generate \\\n  --source . \\\n  --exclude \"node_modules/**,dist/**,build/**,*.log,.git/**\" \\\n  --output \"$BACKUP_DIR/$PROJECT_NAME/$DATE/daily-$TIME.txt\" \\\n  --compress \\\n  --preserve-structure\n\necho \"Creating source-only backup...\"\nlookatni generate \\\n  --source ./src \\\n  --output \"$BACKUP_DIR/$PROJECT_NAME/$DATE/source-$TIME.txt\" \\\n  --compress \\\n  --metadata\n\necho \"Creating config backup...\"\nlookatni generate \\\n  --source . \\\n  --include \"*.json,*.yml,*.yaml,*.toml,.*rc*,.env*\" \\\n  --output \"$BACKUP_DIR/$PROJECT_NAME/$DATE/config-$TIME.txt\" \\\n  --preserve-structure\n\n# Validate backups\nfor backup in \"$BACKUP_DIR/$PROJECT_NAME/$DATE\"/*.txt; do\n  lookatni validate \"$backup\" --strict\ndone\n\n# Cleanup old backups (keep last 7 days)\nfind \"$BACKUP_DIR/$PROJECT_NAME\" -type d -mtime +7 -exec rm -rf {} +\n\necho \"\u2705 Backup completed successfully!\"\necho \"\ud83d\udcc1 Location: $BACKUP_DIR/$PROJECT_NAME/$DATE\"\n</code></pre>"},{"location":"guide/workflows/#performance-optimization-workflows","title":"Performance Optimization Workflows","text":""},{"location":"guide/workflows/#large-project-handling","title":"Large Project Handling","text":"<pre><code># large-project-workflow.sh\n#!/bin/bash\n\nPROJECT_SIZE=$(du -sh . | cut -f1)\necho \"\ud83d\udcca Project size: $PROJECT_SIZE\"\n\n# Check if project is large (&gt;100MB)\nSIZE_BYTES=$(du -sb . | cut -f1)\nLARGE_THRESHOLD=104857600  # 100MB\n\nif [ $SIZE_BYTES -gt $LARGE_THRESHOLD ]; then\n  echo \"\ud83d\udd0d Large project detected - optimizing workflow...\"\n\n  # Use streaming and parallel processing\n  lookatni generate \\\n    --source . \\\n    --exclude \"node_modules/**,dist/**,build/**,coverage/**,*.log\" \\\n    --output \"large-project-$(date +%Y%m%d).txt\" \\\n    --parallel=8 \\\n    --stream \\\n    --compress \\\n    --max-memory=4GB\n\n  echo \"\u2705 Large project processed with optimizations\"\nelse\n  echo \"\ud83d\udcdd Standard project - using normal workflow...\"\n\n  lookatni generate \\\n    --source . \\\n    --exclude \"node_modules/**,dist/**,build/**\" \\\n    --output \"project-$(date +%Y%m%d).txt\" \\\n    --preserve-structure \\\n    --metadata\nfi\n</code></pre> <p>Next: Learn about Best Practices for optimal LookAtni usage.</p>"}]}